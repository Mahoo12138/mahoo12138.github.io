<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用ADB将安卓投屏到电脑进行调试开发</title>
      <link href="/android-6.html"/>
      <url>/android-6.html</url>
      
        <content type="html"><![CDATA[<p>保证手机与电脑在同一个局域网下，然后查看手机的IP地址：</p><h2 id="投屏准备"><a href="#投屏准备" class="headerlink" title="投屏准备"></a>投屏准备</h2><p>数据线连接手机，并确保手机与电脑在同一个局域网下，然后查看手机的IP地址</p><ul><li>通过设置-WLAN，查看当前WiF信息详细，查看IP地址</li><li>通过adb命令查看：<code>adb shell netcfg</code></li></ul><p>在电脑cmd中，ping一下手机的IP地址，再次检查是否同一局域网</p><p>开启adb调式端口 <code>adb tcpip 5555</code>，并通过IP连接安卓手机：</p><pre class=" language-bash"><code class="language-bash">adb connect <span class="token operator">&lt;</span>android-ip<span class="token operator">></span></code></pre><p>连接成功后显示<code>connected to 192.168.0.104:5555</code></p><h2 id="软件投屏"><a href="#软件投屏" class="headerlink" title="软件投屏"></a>软件投屏</h2><p>在大佬博客上，下载其开发的投屏软件：<a href="https://www.cnblogs.com/we-hjb/p/10989928.html" target="_blank" rel="noopener">安卓投屏助手(ARDC)最新版</a></p><p>打开软件后，自动连接，开始投屏，还有各种玩法，自行摸索</p><h2 id="使用问题"><a href="#使用问题" class="headerlink" title="使用问题"></a>使用问题</h2><ul><li><p>cannot connect to 192.168.137.137:5555: 由于目标计算机积极拒绝，无法连接。 (10061)</p><ol><li><p>使用数据线连接手机</p></li><li><p>进入手机shell，如<code>Termux</code> 输入命令：</p><pre class=" language-shell"><code class="language-shell"># 打开adb网络调式，并设置端口setprop service.adb.tcp.port 5555</code></pre></li><li><p>重新投屏即可</p></li></ol></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express &amp; MongoDB 实战</title>
      <link href="/backend-1.html"/>
      <url>/backend-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><h3 id="配置-Express"><a href="#配置-Express" class="headerlink" title="配置 Express"></a>配置 Express</h3><p>安装 express &amp; express 脚手架</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express -g<span class="token function">npm</span> i express-generator -g</code></pre><p>通过查看版本号，检验是否安装成功：</p><pre class=" language-bash"><code class="language-bash">express --version</code></pre><p>通过<code>express -h</code>查看命令行的指令含义：</p><pre class=" language-bash"><code class="language-bash">Usage: express <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span>Options:        --version        输出版本号    -e, --ejs            添加对 ejs 模板引擎的支持        --pug            添加对 pug 模板引擎的支持        --hbs            添加对 handlebars 模板引擎的支持    -H, --hogan          添加对 hogan.js 模板引擎的支持    -v, --view <span class="token operator">&lt;</span>engine<span class="token operator">></span>  添加对视图引擎（view） <span class="token operator">&lt;</span>engine<span class="token operator">></span> 的支持 <span class="token punctuation">(</span>ejs<span class="token operator">|</span>hbs<span class="token operator">|</span>hjs<span class="token operator">|</span>jade<span class="token operator">|</span>pug<span class="token operator">|</span>twig<span class="token operator">|</span>vash<span class="token punctuation">)</span> （默认是 jade 模板引擎）        --no-view        创建不带视图引擎的项目    -c, --css <span class="token operator">&lt;</span>engine<span class="token operator">></span>   添加样式表引擎 <span class="token operator">&lt;</span>engine<span class="token operator">></span> 的支持 <span class="token punctuation">(</span>less<span class="token operator">|</span>stylus<span class="token operator">|</span>compass<span class="token operator">|</span>sass<span class="token punctuation">)</span> （默认是普通的 css 文件）        --git            添加 .gitignore    -f, --force          强制在非空目录下创建    -h, --help           输出使用方法</code></pre><p>创建了一个名为 helloworld 的 Express 应用，并使用ejs模板引擎：</p><pre class=" language-bash"><code class="language-bash">express -e helloworld</code></pre><p>根据提示，依次进入目录，安装依赖，运行程序：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> helloworld<span class="token function">npm</span> <span class="token function">install</span>DEBUG<span class="token operator">=</span>helloworld:* <span class="token function">npm</span> start</code></pre><p>在此之前，可以安装Node自动重启工具 nodemon，它的作用是监听代码文件的变动，当代码改变之后，自动重启。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g  nodemon</code></pre><p>在项目的<code>package.json</code>中做如下改变即可：</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"nodemon ./bin/www"</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>运行项目后，打开<code>http://localhost:3000/</code>，端口可在<code>bin/www.js</code>中更改</p><h3 id="配置-MongoDB"><a href="#配置-MongoDB" class="headerlink" title="配置 MongoDB"></a>配置 MongoDB</h3><p>在官网下载对应设备的安装包：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">mongodb-win32-x86_64-2012plus-4.2.5-signed.msi</a></p><p>安装过程中，建议取消勾选<strong>install mongoDB compass</strong>，安装完毕后，直接在命令行中键入<code>mongo</code>，之后在数据库的命令解释器中：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看当前数据库</span>show dbs<span class="token comment" spellcheck="true"># 选择数据库，无则新建</span>use project<span class="token comment" spellcheck="true"># 创建表单</span>db.createCollection<span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 插入一条数据</span>db.users.insertOne<span class="token punctuation">(</span> <span class="token punctuation">{</span>name:<span class="token string">'mahoo12138'</span><span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看数据库表单列表</span>show collections<span class="token comment" spellcheck="true"># 查看表单数据</span>db.users.find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除一条表单数据</span>db.users.deleteOne<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"mahoo12138"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>更多数据库操作，请查阅官方文档：<a href="https://docs.mongodb.com/manual/reference/method/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/method/</a></p><h3 id="Express-连接-MongoDB"><a href="#Express-连接-MongoDB" class="headerlink" title="Express 连接 MongoDB"></a>Express 连接 MongoDB</h3><p>在 express 项目中，安装<code>mongodb</code>：</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">npm</span> <span class="token function">install</span> mongodb --save</code></pre><p>之后创建<code>model/index.js</code>，对数据库连接进行封装：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> MongoClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数据库URL</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数据库名称</span><span class="token keyword">const</span> dbName <span class="token operator">=</span> <span class="token string">'project'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用 connect 方法连接服务器</span>    MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> client<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库连接错误：'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据库连接成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>            callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用 CommonJS 语法导出</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    connect<span class="token punctuation">}</span></code></pre><p>相关函数调用，可查询官方文档：<a href="http://mongodb.github.io/node-mongodb-native/3.5/" target="_blank" rel="noopener">http://mongodb.github.io/node-mongodb-native/3.5/</a></p><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><p>在 express 项目<code>routers/index.js</code>中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导入封装好的数据库连接函数</span><span class="token keyword">var</span> model <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 插入如下代码，作为测试</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  model<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>docs<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户列表'</span><span class="token punctuation">,</span>docs<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Express'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>刷新<code>http://localhost:3000/</code>页面，控制台中出现，如下内容则连接成功：</p><pre class=" language-bash"><code class="language-bash">GET / 304 51.163 ms - -数据库连接成功用户列表 <span class="token punctuation">[</span> <span class="token punctuation">{</span> _id: 5e8c030bb81464cd1885fe73, name: <span class="token string">'mahoo12138'</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span>GET /stylesheets/style.css 304 5.073 ms - -</code></pre><h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><h3 id="添加注册界面"><a href="#添加注册界面" class="headerlink" title="添加注册界面"></a>添加注册界面</h3><p>在项目路径<code>views/</code>下添加一个<code>register.ejs</code>文件：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&lt;%= title %> - 注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">include</span> <span class="token attr-name">head</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>注册页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/users/register<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apassword<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请重复输入密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>已有账号？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>立即登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>上述代码中将<strong>head</strong>标签中的内容抽离到了<code>head.ejs</code>中，同样也将<code>index.ejs</code>中引入的样式表放入模板中，之后引入即可：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>stylesheet<span class="token punctuation">'</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>/stylesheets/style.css<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span></code></pre><p>在项目路径<code>routers/index.js</code>中添加代码测试：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 渲染注册页</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'regist'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Express'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>测试成功后，在<code>routers/users.js</code>中编写用户注册逻辑：</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">===</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>apassword<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'两次输入密码一致！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">,</span>      password<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password    <span class="token punctuation">}</span>    model<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>db <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'注册失败！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'注册成功！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 跳转到登陆界面</span>          res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"两次输入密码不一致！"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="添加登录界面"><a href="#添加登录界面" class="headerlink" title="添加登录界面"></a>添加登录界面</h3><p>稍稍修改注册界面，也就有了登录界面：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&lt;%= title %> - 登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">include</span> <span class="token attr-name">head</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>登陆界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/users/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>没有账号？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>立即注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在<code>routers/users.js</code>中编写用户登录逻辑，登录时需要查询数据库，当查询结果大于 0 即已注册，跳转即可：</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">,</span>      password<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>db <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> docs<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>          res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>docs<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span><span class="token punctuation">{</span>          res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截"></a>登录拦截</h4><p>安装 express 会话插件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> express-session --save</code></pre><p>相关文档，可查看存储仓库的<a href="https://github.com/expressjs/session" target="_blank" rel="noopener">README.md</a></p><p>在<code>/app.js</code>中，添加如下代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token string">'mahoo project'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  secret<span class="token punctuation">:</span> <span class="token string">'mahoo project'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* 对会话id相关的 cookie 进行签名 */</span>  resave<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  saveUninitialized<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/* 是否保存未初始化的会话 */</span>   <span class="token comment" spellcheck="true">// cookie: { secure: true }</span>  cookie<span class="token punctuation">:</span> <span class="token punctuation">{</span> maxAge<span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 指定会话有效期 5min */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 注意要写在下行代码之前</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>登录后的主页面需要显示用户名，需要传递一个变量：</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>   res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'Express'</span><span class="token punctuation">,</span>username<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需求是登录后才能查看主页面，编辑<code>routers/index.js</code>添加拦截：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> path <span class="token operator">=</span> req<span class="token punctuation">.</span>path  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'链接: '</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>path <span class="token operator">!==</span> <span class="token string">'/login'</span> <span class="token operator">&amp;&amp;</span> path <span class="token operator">!==</span> <span class="token string">'/register'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户名：'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不拦截"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意，代码应在此代码前</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> indexRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们先 code 一个导航条<code>nav.ejs</code>：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&lt;%= title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        用户 &lt;%= username %> 已登录      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>写文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exit-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>退出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>之后在主页面中引入：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&lt;%= title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">include</span> <span class="token attr-name">head</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name"><span class="token namespace">include('nav',{username:</span></span> <span class="token attr-name">username})</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 这里是将传入该文件的 username 作为 username 再传入 nav.ejs --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="发布文章界面"><a href="#发布文章界面" class="headerlink" title="发布文章界面"></a>发布文章界面</h3><p>新建一个模板<code>views/write.ejs</code>，同时引入开源的富文本编辑器<strong>xheditor</strong>，<a href="https://github.com/yaniswang/xhEditor/releases/download/1.2.2/xheditor-1.2.2.zip" target="_blank" rel="noopener">下载地址</a>，按照文档加入 script 代码，并在 <strong>textarea</strong> 标签中添加<code>xheditor</code>属性：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&lt;%= username %> - 写文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">include</span> <span class="token attr-name">head</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name"><span class="token namespace">include('nav',{username:</span></span> <span class="token attr-name">username})</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>文章界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/articles/add<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入标题！<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xheditor<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入文章内容！<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit-btn<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发布<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xheditor/jquery/jquery-1.11.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xheditor/xheditor-1.2.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/xheditor/xheditor_lang/zh-cn.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>再新建一个路由文件<code>/routers/articles.js</code>管理文章的增删改查：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> model <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../model'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> passage <span class="token operator">=</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>title<span class="token punctuation">,</span>      content<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>content<span class="token punctuation">,</span>      id<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      username<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username  <span class="token punctuation">}</span>  model<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'articles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>passage<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"发布成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/write'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>在<code>/app.js</code>中，按照 <strong>users.js</strong> 的配置添加<code>articles.js</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> articlesRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/articles'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/articles'</span><span class="token punctuation">,</span> articlesRouter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>之后在 <strong>Mongo shell</strong> 添加一个表单<code>articles</code>：</p><pre class=" language-shell"><code class="language-shell">db.createCollection("articles")</code></pre><p>最后在<code>write</code>页面中发布文章测试，并在 <strong>Mongo shell</strong> 核对文章数据。</p><h3 id="主页文章列表"><a href="#主页文章列表" class="headerlink" title="主页文章列表"></a>主页文章列表</h3><p>在<code>routers/index.js</code>中添加获取文章列表的查询逻辑：</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  model<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'articles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>docs<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文章列表'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> list <span class="token operator">=</span> docs<span class="token punctuation">;</span>      list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        ele<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'Express'</span><span class="token punctuation">,</span>        username<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">,</span>        list<span class="token punctuation">:</span> list      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意，在处理时间戳时，使用到了<a href="https://momentjs.com/" target="_blank" rel="noopener">moment</a>开源模块，详细文档可查询官方文档。</p><p>之后在<code>views/index.ejs</code>中，添加如下代码，使用的是 <strong>ejs</strong> 模板语法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">list.map(function(item,index){</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&lt;%= index + 1 %> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&lt;%= item.username %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&lt;%= item.title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&lt;%= item.time %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span>  <span class="token attr-name">})</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="分页显示"><a href="#分页显示" class="headerlink" title="分页显示"></a>分页显示</h4><p>分页显示时，每页显示两条数据，分页查询的几个函数，<code>sort({_id:-1})</code>设置倒序查询，<code>limit()</code>设置查询数量，<code>skip()</code>跳转多少条数据进行查询，详细看代码：</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> page <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>page <span class="token operator">||</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">//接收前端查询请求，首次刷新默认第一页</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>  total<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//总页数</span>  curPage<span class="token punctuation">:</span> page<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//当前页数</span>  list<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> pageSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  model<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'articles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>docs<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      data<span class="token punctuation">.</span>total <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>docs<span class="token punctuation">.</span>length <span class="token operator">/</span> pageSize<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 第一次查询数据，获取文章数量，得到页码总数</span>      model<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'articles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>docs2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        docs2<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            ele<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 第二次分页查询，利用sort(),limit(),skip()</span>          data<span class="token punctuation">.</span>list <span class="token operator">=</span> docs2          res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            title<span class="token punctuation">:</span> <span class="token string">'Express'</span><span class="token punctuation">,</span>            username<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">,</span>            data<span class="token punctuation">:</span> data          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在前端页面上添加页面显示，点击页码带参查询：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 省略 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &lt;% for(let i = 1;i &lt;= data.total; i++){ %>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/?page<span class="token punctuation">=</span>&lt;%<span class="token punctuation">=</span> i %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%= i %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h4><p>修改删除文章的超链接，传入删除文章的 id 以及当前页码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/articles/delete?id<span class="token punctuation">=</span>&lt;%<span class="token punctuation">=</span> item.id %<span class="token punctuation">></span>&amp;page<span class="token punctuation">=</span>&lt;%<span class="token punctuation">=</span> data.curPage %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>当一页的两条数据都被删除后，页面还是停留在当前页面的，我们需要跳转到上一页，则需要在查询数据时，做一个判断，在获取文章页面的<strong>第二次</strong>查询数据库时，如果查询到的数据大小为 0 ，则跳转：</p><pre class=" language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'articles'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>docs2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// --------------------------------------------------------</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>docs2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/?page='</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        docs2<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            ele<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>list <span class="token operator">=</span> docs2    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// --------------------------------------------------------</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'Express'</span><span class="token punctuation">,</span>        username<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">,</span>        data<span class="token punctuation">:</span> data    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h4><p>修改编辑文章的超链接，传入编辑文章的 id 以及当前页码，因为编辑文章和添加文章的页面类似，从简而言，直接复用即可：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/write?id<span class="token punctuation">=</span>&lt;%<span class="token punctuation">=</span> item.id %<span class="token punctuation">></span>&amp;page<span class="token punctuation">=</span>&lt;%<span class="token punctuation">=</span> data.curPage %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超乎你想象的Stm32中的TIM定时器</title>
      <link href="/stm32-6.html"/>
      <url>/stm32-6.html</url>
      
        <content type="html"><![CDATA[<p>注：本文属博主学习时所作笔记，内容源大参考于野火的《零死角玩转STM32F103》以及部分网络资料，笔记内容仅作为自己参考，免去频繁查询参考手册的麻烦，如有错误，还请指出！</p><h2 id="定时器分类"><a href="#定时器分类" class="headerlink" title="定时器分类"></a>定时器分类</h2><p>STM32F1 系列中，除了互联型的产品，共有 8 个定时器，分为基本定时器，通用定时器和高级定时器。  </p><table><thead><tr><th>类别</th><th>定时器</th><th>分辨率</th><th>计数器类型</th><th>预分频系数</th><th>产生DMA</th><th>捕获/比较通道</th><th>互补输出</th></tr></thead><tbody><tr><td>高级定时器</td><td>TIM1，TIM8</td><td>16位</td><td>向上/向下</td><td>1~65535</td><td>可以</td><td>4</td><td>有</td></tr><tr><td>通用定时器</td><td>TIM2&lt;sub&gt;TIM5</td><td>16位</td><td>向上/向下</td><td>165535</td><td>可以</td><td>4</td><td>无</td></tr><tr><td>基本定时器</td><td>TIM6，TIM7</td><td>16位</td><td>向上</td><td>1~65535</td><td>可以</td><td>0</td><td>无</td></tr></tbody></table><h2 id="基本定时器"><a href="#基本定时器" class="headerlink" title="基本定时器"></a>基本定时器</h2><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn/hexo_images/Study/STM32/tim1.png" style="zoom: 67%;"><ol><li><p><strong>时钟源</strong>    TIMxCLK由APB1预分频提供，库函数中 APB1 预分频系数为 2 ，定时器时钟TIMxCLK = 36 * 2 =72</p></li><li><p><strong>计数器时钟</strong>    CK_CNT 经 PSC 得到，PSC是16位预分频器，可对 TIMxCLK 进行1~65536 之间任意一个数进行分频：CK_INT=TIMxCLK/(PSC + 1)</p></li><li><p><strong>计数器</strong>    CNT 是一个16位的计数器，只能向上计数，最大值位65535，计数值到达自动重装载寄存器时，产生更新时间，清零重新计数</p></li><li><p><strong>自动重装载寄存器</strong>    ARR 是一个16位计数器，存放最大计数值，到达此值，如果开启中断，则定时器产生中断</p></li></ol><h3 id="定时时间计算"><a href="#定时时间计算" class="headerlink" title="定时时间计算"></a>定时时间计算</h3><p>定时器的定时时间等于计数器的中断周期乘以中断的次数。这里用定时 500ms 作为例子：</p><ul><li>设置PSC预分频器为 72 - 1 = 71 MHz，则定时器频率为 72M/(PSC + 1) = 1 MHz</li><li>设置 ARR = 1000 - 1，0 ~ 999，计数1000次</li><li>中断周期 T = 1000 * 1 / 1000000 = 1 ms，（1MHz 周期为 1 ns）</li></ul><h3 id="定时器初始化结构体"><a href="#定时器初始化结构体" class="headerlink" title="定时器初始化结构体"></a>定时器初始化结构体</h3><p>基本定时器只用到<code>TIM_TimeBaseInitTypeDef</code>结构体：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    uint16_t TIM_Prescaler<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 预分频器</span>    uint16_t TIM_CounterMode<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 计数模式，向上或向下</span>    uint32_t TIM_Period<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 定时器周期</span>    uint16_t TIM_ClockDivision<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 外部时钟分频</span>    uint8_t TIM_RepetitionCounter<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 重复计算器，高级寄存器专用</span><span class="token punctuation">}</span> TIM_TimeBaseInitTypeDef<span class="token punctuation">;</span></code></pre><p>而且只用到两个成员<code>TIM_Prescaler</code>和<code>TIM_Period</code>，也就是定时器分配器设置和定时器周期（自动重装载寄存器值）。</p><h3 id="代码实例——实现-1s-定时"><a href="#代码实例——实现-1s-定时" class="headerlink" title="代码实例——实现 1s 定时"></a>代码实例——实现 1s 定时</h3><p><strong>初始化基本定时器</strong></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/********************基本定时器 TIM 参数定义，只限 TIM6、 7************/</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM6         </span><span class="token comment" spellcheck="true">// 如果使用 TIM7，注释掉这个宏即可</span><span class="token macro property">#<span class="token directive keyword">ifdef</span>  BASIC_TIM6         </span><span class="token comment" spellcheck="true">// 使用基本定时器 TIM6</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM                         TIM6</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM_APBxClock_FUN         RCC_APB1PeriphClockCmd</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM_CLK                     RCC_APB1Periph_TIM6</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM_IRQ                     TIM6_IRQn</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM_IRQHandler             TIM6_IRQHandler</span><span class="token macro property">#<span class="token directive keyword">else</span>                     </span><span class="token comment" spellcheck="true">// 使用基本定时器 TIM7</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM                         TIM7                        </span><span class="token comment" spellcheck="true">// 定时器</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM_APBxClock_FUN         RCC_APB1PeriphClockCmd        </span><span class="token comment" spellcheck="true">// 时钟函数</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM_CLK                     RCC_APB1Periph_TIM7            </span><span class="token comment" spellcheck="true">// 时钟</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM_IRQ                     TIM7_IRQn                    </span><span class="token comment" spellcheck="true">// 中断源</span><span class="token macro property">#<span class="token directive keyword">define</span> BASIC_TIM_IRQHandler             TIM7_IRQHandler                </span><span class="token comment" spellcheck="true">// 中断服务函数</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BASIC_TIM_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开启定时器时钟，即内部时钟 CK_INT=72M</span>    <span class="token function">BASIC_TIM_APBxClock_FUN</span><span class="token punctuation">(</span>BASIC_TIM_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自动重装载寄存器周的值(计数值)</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Period<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 累计 TIM_Period 个频率后产生一个更新或者中断</span>    <span class="token comment" spellcheck="true">// 时钟预分频数为 71，则驱动计数器的时钟 CK_CNT = CK_INT / (71+1)=1M</span>    TIM_TimeBaseStructure<span class="token punctuation">.</span>TIM_Prescaler<span class="token operator">=</span> <span class="token number">71</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 其余三个结构体变量，基本定时器没有，不用管</span>    <span class="token comment" spellcheck="true">// 初始化定时器</span>    <span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 清除计数器中断标志位</span>    <span class="token function">TIM_ClearFlag</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span> TIM_FLAG_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开启计数器中断</span>    <span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span>TIM_IT_Update<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使能计数器</span>    <span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>BASIC_TIM<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 暂时关闭定时器的时钟，等待使用</span>    <span class="token function">BASIC_TIM_APBxClock_FUN</span><span class="token punctuation">(</span>BASIC_TIM_CLK<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre><p>把定时器设置自动重装载寄存器 ARR 的值为 1000，设置时钟预分频器为 71，则驱动计数器的时钟： CK_CNT = CK_INT / (71+1)=1M，则计数器计数一次的时间等于：1/CK_CNT=1us，当计数器计数到 ARR 的值 1000 时，产生一次中断，则中断一次的时间为： 1/CK_CNT*ARR = 1ms。  </p><p><strong>定时器中断优先级配置</strong>  </p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// 中断优先级配置</span><span class="token keyword">void</span> <span class="token function">BASIC_TIM_NVIC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置中断组为 0</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置中断来源为基本定时器</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> BASIC_TIM_IRQ <span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置主优先级为 0</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置抢占优先级为 3</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre><p><strong>定时器中断服务程序</strong>  </p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">BASIC_TIM_IRQHandler</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">TIM_GetITStatus</span><span class="token punctuation">(</span> BASIC_TIM<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET <span class="token punctuation">)</span> <span class="token punctuation">{</span>        time<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">TIM_ClearITPendingBit</span><span class="token punctuation">(</span>BASIC_TIM <span class="token punctuation">,</span> TIM_FLAG_Update<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定时器中断一次的时间是 1ms，定义一个全局变量 time 表示中断次数。实现一个 1s 的定时，只需判断 time 是否等于 1000 即可， 1000 * 1ms = 1s。然后把 time 清 0，重新计数，在最后，需要将中断标志位清除掉。 </p><p><strong>主函数</strong></p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* led 端口配置 */</span>    <span class="token function">LED_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 基本定时器 TIMx,x[6,7] 定时配置 */</span>    <span class="token function">BASIC_TIM_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 配置基本定时器 TIMx,x[6,7]的中断优先级 */</span>    <span class="token function">BASIC_TIM_NVIC_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 基本定时器 TIMx,x[6,7] 重新开时钟，开始计时 */</span>    <span class="token function">BASIC_TIM_APBxClock_FUN</span><span class="token punctuation">(</span>BASIC_TIM_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> time <span class="token operator">==</span> <span class="token number">1000</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">/* 1000 * 1 ms = 1s 时间到 */</span>            time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* LED1 取反 */</span>            LED1_TOGGLE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单入门CSS预处理器Less和Sass</title>
      <link href="/font-end-1.html"/>
      <url>/font-end-1.html</url>
      
        <content type="html"><![CDATA[<p>Sass和Less都属于CSS预处理器，CSS预处理器定义了一种新的语言，其基本的思想是，用一种特殊的语言，为CSS增加一些编程的特性，如变量、语句，函数、继承等概念。将CSS作为目标生成文件，然后开发者就只要使用这种语言进行CSS的编码开发工作。目前比较流行的有<a href="https://sass-lang.com/" target="_blank" rel="noopener"><strong>Sass</strong></a>、<a href="http://lesscss.org/" target="_blank" rel="noopener"><strong>less</strong></a>和<strong>stylus</strong>，我主要学习前两种。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>在 less 和 Sass 中，单行的注释是不会被编译到 CSS 文件中的；</p><p>只有多行注释，也就是 CSS 中原本的代码注释，才会被编译生成到 CSS 文件中。</p><h2 id="变量，插值，作用域"><a href="#变量，插值，作用域" class="headerlink" title="变量，插值，作用域"></a>变量，插值，作用域</h2><p>在 less 使用<code>@</code>定义变量，而在 Sass 中则使用<code>$</code>定义变量；</p><p>当把属性作为变量时，这也就是插值。插值的操作与定义变量略有不同，只是在引用变量时需要加上<code>@</code>和<code>{}</code>，而且选择器中也可以使用插值；Sass 中，使用<code>#</code>和<code>{}</code>完成插值操作，不过带上了变量前的<code>$</code>；</p><p>作用域很好理解，就像 Javascript 的那种变量的就近查找原则，也就是在<code>.box1</code>中的<strong>width</strong>和<strong>height</strong>属性的值都为<strong>200px</strong>，会优先在选择器内查找变量；Sass 唯一的不同之处在于<code>width:100px</code>而<code>height:200px</code>，这个顺序有差别。</p><pre class=" language-less"><code class="language-less"><span class="token variable">@number<span class="token punctuation">:</span></span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token variable">@key<span class="token punctuation">:</span></span> height<span class="token punctuation">;</span><span class="token variable">@i<span class="token punctuation">:</span></span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token selector">.box1</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 作用域</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@number</span><span class="token punctuation">;</span>    <span class="token variable">@number<span class="token punctuation">:</span></span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">@{key}</span><span class="token punctuation">:</span> <span class="token variable">@number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box@{i}</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$number</span></span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property"><span class="token variable">$key</span></span><span class="token punctuation">:</span> height<span class="token punctuation">;</span><span class="token selector">.box1</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$number</span><span class="token punctuation">;</span>    <span class="token property"><span class="token variable">$number</span></span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property"><span class="token variable">#{$key}</span></span><span class="token punctuation">:</span> <span class="token variable">$number</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="选择器嵌套，伪类嵌套，属性嵌套-Sass"><a href="#选择器嵌套，伪类嵌套，属性嵌套-Sass" class="headerlink" title="选择器嵌套，伪类嵌套，属性嵌套(Sass)"></a>选择器嵌套，伪类嵌套，属性嵌套(Sass)</h2><p><strong>选择器嵌套</strong>在CSS预编译中很常见，因为在编写带有很多子元素且一级一级嵌套的元素的样式时，往往需要很多选择器，在一级一级选择时，选择器不可避免会重复编写，而选择器的嵌套则可以一次性编写，但是编译产生的 css 还是css的语法，这样提高开发效率；在 Sass 中是完全一样的</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// less 代码</span><span class="token selector">ul</span><span class="token punctuation">{</span>    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token selector">li</span><span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token selector">div</span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">p</span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 编译生成的css */</span><span class="token selector">ul </span><span class="token punctuation">{</span>  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li div </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li p </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>伪类嵌套</strong>也就是在选择器内部编写其伪类的样式，只需要在伪类前添加<code>&amp;</code>即可，Sass 也是完全一样的：</p><pre class=" language-less"><code class="language-less"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token selector">&amp;:hover</span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">img</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>属性嵌套</strong>是在编写一些围绕某种属性的样式时，可以嵌套，在 Less 中不支持，具体可以看代码：</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// scss 文件</span><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token selector">font: </span><span class="token punctuation">{</span>        <span class="token property">size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>        <span class="token property">weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>        <span class="token property">family</span><span class="token punctuation">:</span> 微软雅黑<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 编译生成的css */</span><span class="token atrule"><span class="token rule">@charset</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span></span><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> 微软雅黑<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意<code>:</code>后的空格不能少，否则会编译错误</p><h2 id="运算，单位，转义，颜色"><a href="#运算，单位，转义，颜色" class="headerlink" title="运算，单位，转义，颜色"></a>运算，单位，转义，颜色</h2><p>在变量使用时，可以对其做需要的运算，而涉及到不同的单位的量运算时，会以第一个变量为基准进行转化，而转义则是将某个代码段不经过编译直接输出到 CSS 中，颜色的RGB值也是可以进行运算的；</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// less 文件</span><span class="token variable">@num<span class="token punctuation">:</span></span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token selector">.box2</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@num</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@num</span> <span class="token operator">+</span> <span class="token number">10</span>em<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>em <span class="token operator">+</span> <span class="token variable">@num</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> ~<span class="token string">"20px / 2"</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#101010</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 编译生成的css */</span><span class="token selector"><span class="token class">.box2</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">110</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">110</span>em<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px / <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#202020</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 Sass 中单位不同，是不能进行运算的，而且默认<code>/</code>是分割的操作不进行运算，如果需要做运算需要用<code>()</code>做转义；</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// scss 文件</span><span class="token property"><span class="token variable">$num</span></span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token selector">.box2</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$num</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// height: $num + 10em;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">20</span>px <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#010101</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="内置和自定义函数"><a href="#内置和自定义函数" class="headerlink" title="内置和自定义函数"></a>内置和自定义函数</h2><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// less 和 Sass 文件</span><span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.5</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">percentage</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 编译生成的css */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> 对于 Less 和 Sass 中的内置函数，并不是完全通用，可以在官方的API文档查询所需函数。</p><hr><p>在 Sass 中还可以自定义函数，使用参考一下代码：</p><pre class=" language-scss"><code class="language-scss"><span class="token keyword">@function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token variable">$n</span>, <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">@return</span> <span class="token variable">$n</span> <span class="token operator">+</span> <span class="token variable">$m</span><span class="token punctuation">}</span><span class="token selector">.box </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span>px <span class="token operator">+</span> <span class="token number">3</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="混入，命名空间，继承"><a href="#混入，命名空间，继承" class="headerlink" title="混入，命名空间，继承"></a>混入，命名空间，继承</h2><p>当编写一个样式时，可以像函数一样在另一个样式中引入，称为混入，当样式选择器添加了<code>()</code>，如==.hide()==，则其原本的样式不会在编译后的 css 文件中复现，而且当添加了括号时，还可以进行传参操作：</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// less 文件</span><span class="token selector">.show</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.hide(<span class="token variable">@color</span>)</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token mixin-usage function">.show</span><span class="token punctuation">;</span>    <span class="token mixin-usage function">.hide</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 编译生成的 css */</span><span class="token selector"><span class="token class">.show</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 Sass 中并不是类似选择器的方式编写混入，而是使用关键词<code>mixin</code>标记混入的样式，用<code>include</code>引入混入样式，同样的可以添加<code>()</code>进行传参：</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// scss 文件</span><span class="token keyword">@mixin</span> <span class="token selector">show </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> bolck<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">@mixin</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token keyword">@include</span> show<span class="token punctuation">;</span>    <span class="token keyword">@include</span> <span class="token function">hide</span><span class="token punctuation">(</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 编译生成的 css */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p>Less 中的命名空间是针对混入的一个扩展，上述代码中的混入都是在全局中定义的，而命名空间的引入，可以定义多个混入，可以更灵活的开发：</p><pre class=" language-less"><code class="language-less"><span class="token selector">#name()</span><span class="token punctuation">{</span>    <span class="token selector">.show</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token mixin-usage function">#name.show</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p>继承跟混入形式和功能上都很相像，不过会更精简代码：</p><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// less 文件</span><span class="token selector">.both</span> <span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box1</span><span class="token punctuation">{</span>    &amp;<span class="token punctuation">:</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token number">.</span>both<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box2</span><span class="token punctuation">{</span>    &amp;<span class="token punctuation">:</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token number">.</span>both<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 编译生成的 css */</span><span class="token selector"><span class="token class">.both</span>,<span class="token class">.box1</span>,<span class="token class">.box2</span></span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// scss 文件</span><span class="token selector">.both </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box1</span><span class="token punctuation">{</span>    <span class="token keyword">@extend</span> <span class="token number">.</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.box2</span><span class="token punctuation">{</span>    <span class="token keyword">@extend</span> <span class="token number">.</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 Scss 中大致类似的用法，不过可以将<code>.both</code>改成<code>%both</code>，这样 both 样式就不会在 css 文件中编译生成了。</p><h2 id="合并，媒体查询"><a href="#合并，媒体查询" class="headerlink" title="合并，媒体查询"></a>合并，媒体查询</h2><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// less 文件</span><span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">background+</span><span class="token punctuation">:</span> <span class="token url">url(a.png)</span><span class="token punctuation">;</span>     <span class="token property">background+</span><span class="token punctuation">:</span> <span class="token url">url(b.png)</span><span class="token punctuation">;</span>     <span class="token property">transform+_</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transform+_</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">30</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// scss 文件</span><span class="token selector"><span class="token variable">$background</span>: </span><span class="token punctuation">{</span>    <span class="token property">a</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span>a<span class="token number">.</span>png<span class="token punctuation">)</span>,    <span class="token property">b</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span>b<span class="token number">.</span>png<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token selector"><span class="token variable">$transform</span>: </span><span class="token punctuation">{</span>    <span class="token property">a</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,    <span class="token property">b</span><span class="token punctuation">:</span> <span class="token function">roate</span><span class="token punctuation">(</span><span class="token number">30</span>deg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token selector">.box </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">map-values</span><span class="token punctuation">(</span><span class="token variable">$background</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">zip</span><span class="token punctuation">(</span><span class="token function">map-values</span><span class="token punctuation">(</span><span class="token variable">$transform</span><span class="token punctuation">)</span><span class="token number">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 编译生成的 css */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(a.png)</span>, <span class="token url">url(b.png)</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">30</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">// less &amp; scss 文件</span><span class="token selector">.box</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token atrule">@media all and <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token atrule">@media all and <span class="token punctuation">(</span>min-width<span class="token punctuation">:</span> 1440px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">900</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 编译生成的 css */</span><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> all and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> all and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1440px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">900</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="条件，导入，循环"><a href="#条件，导入，循环" class="headerlink" title="条件，导入，循环"></a>条件，导入，循环</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Less </tag>
            
            <tag> Sass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言再学习之基础语法</title>
      <link href="/c-cpp-6.html"/>
      <url>/c-cpp-6.html</url>
      
        <content type="html"><![CDATA[<h3 id="内联函数-——-C-中关键字-inline"><a href="#内联函数-——-C-中关键字-inline" class="headerlink" title="内联函数 —— C 中关键字 inline"></a>内联函数 —— C 中关键字 inline</h3><p>调用函数时，一般会由于建立调用、传递参数、跳转到函数代码并返回等花费掉一些时间，而且一些函数被频繁调用，不断地有函数入栈，即<strong>函数栈</strong>，会造成栈空间或<strong>栈内存</strong>的大量消耗。</p><p>为了解决这个问题，在C99中特别地引入了<strong>inline修饰符</strong>，即内联函数。</p><p>关键字 inline 告诉编译器，任何地方只要调用内联函数，就直接把该函数的机器码插入到调用它的地方，类似于带参宏。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">max</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>a <span class="token operator">=</span> <span class="token function">max</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等价于 "a = (x > y ? x : y);"</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用FSMC模拟8080时序控制LCD</title>
      <link href="/stm32-5.html"/>
      <url>/stm32-5.html</url>
      
        <content type="html"><![CDATA[<p>注：本文属博主学习时所作笔记，内容源大参考于野火的《零死角玩转STM32F103》以及部分网络资料，笔记内容仅作为自己参考，免去频繁查询参考手册的麻烦，如有错误，还请指出！</p><h2 id="ILI9341-液晶控制器"><a href="#ILI9341-液晶控制器" class="headerlink" title="ILI9341 液晶控制器"></a>ILI9341 液晶控制器</h2><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/ili9341.png" alt="ILI9341控制器内部框图"></p><p>ILI9341 控制器内部电路连接完后，其余信号线引出到排针</p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/lcd.png" alt="液晶屏引出的信号线" style="zoom:67%;"><h3 id="液晶屏引出的信号线说明"><a href="#液晶屏引出的信号线说明" class="headerlink" title="液晶屏引出的信号线说明"></a>液晶屏引出的信号线说明</h3><table><thead><tr><th align="center">信号线</th><th align="center">ILI9341 对 应 的信号线</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">LCD_DB[15:0]</td><td align="center">D[15:0]</td><td align="left">数据信号</td></tr><tr><td align="center">LCD_RD</td><td align="center">RDX</td><td align="left">读数据信号，低电平有效 ，</td></tr><tr><td align="center">LCD_RS</td><td align="center">D/CX</td><td align="left">数据/命令信号，高电平时， D[15:0]表示的是数据(RGB 像素数据或命令数据)；低电平时，D[15:0]表示控制命令</td></tr><tr><td align="center">LCD_RESET</td><td align="center">RESX</td><td align="left">复位信号，低电平有效</td></tr><tr><td align="center">LCD_WR</td><td align="center">WRX</td><td align="left">写数据信号，低电平有效</td></tr><tr><td align="center">LCD_CS</td><td align="center">CSX</td><td align="left">片选信号，低电平有效</td></tr><tr><td align="center">LCD_BK</td><td align="center">-</td><td align="left">背光信号，低电平点亮</td></tr><tr><td align="center">GPIO[5:1]</td><td align="center">-</td><td align="left">触摸屏的控制信号线，下一章再介绍</td></tr></tbody></table><h2 id="FSMC简介"><a href="#FSMC简介" class="headerlink" title="FSMC简介"></a>FSMC简介</h2><p>STM32F1 系列芯片使用 FSMC 外设来管理扩展的存储器， FSMC 是 Flexible Static<br>Memory Controller 的缩写，译为灵活的静态存储控制器。它可以用于驱动包括 SRAM、<br>NOR FLASH 以及 NAND FLSAH 类型的存储器，不能驱动如 SDRAM 这种动态的存储器而<br>在 STM32F429 系列的控制器中，它具有 FMC 外设，支持控制 SDRAM 存储器。  </p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/fsmc.png" style="zoom:80%;"><p>MCU 对液晶屏的操作实际上就是把显示数据写入到显存中，与控制存储器非常类似，且8080 接口的通讯时序完全可以使用 FSMC 外设产生。</p><h3 id="模拟-8080-接口时序"><a href="#模拟-8080-接口时序" class="headerlink" title="模拟 8080 接口时序"></a>模拟 8080 接口时序</h3><p>在模拟控制 LCD 时，是使用 FSMC 的 NOR\PSRAM 模式的， 而且使用的是类似异步、 地址与数据线独立的  NOR FLASH 类型的模式 B，实际上 CLK、 NWAIT、 NADV 引脚并没有使用到。  </p><table><thead><tr><th align="center">FSMC 信 号 名</th><th align="center">信号方向</th><th>功能</th></tr></thead><tbody><tr><td align="center">CLK</td><td align="center">输出</td><td>时钟（同步突发模式使用）</td></tr><tr><td align="center">A[25:0]</td><td align="center">输出</td><td>地址总线</td></tr><tr><td align="center">D[15:0]</td><td align="center">输入/输出</td><td>双向数据总线</td></tr><tr><td align="center">NE[x]</td><td align="center">输出</td><td>片选， x = 1…4</td></tr><tr><td align="center">NOE</td><td align="center">输出</td><td>输出使能</td></tr><tr><td align="center">NWE</td><td align="center">输出</td><td>写使能</td></tr><tr><td align="center">NWAIT</td><td align="center">输入</td><td>NOR 闪存要求 FSMC 等待的信号</td></tr><tr><td align="center">NADV</td><td align="center">输出</td><td>地址、数据线复用时作锁存信号</td></tr></tbody></table><p>对比 FSMC NOR/PSRAM 中的模式 B 时序与 ILI9341 液晶控制器芯片使用的 8080 时序可发现，这两个时序是十分相似的(除了 FSMC 的地址线 A 和 8080 的 D/CX 线，可以说是完全一样)  </p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/8080vsnorflash.png" alt="FSMC模式B时序与8080时序对比（写过程）" style="zoom:80%;"><table><thead><tr><th>FSMC-NOR信号线</th><th>功能</th><th>8080 信号线</th><th>功能</th></tr></thead><tbody><tr><td>NEx</td><td>片选信号</td><td>CSX</td><td>片选信号</td></tr><tr><td>NWR</td><td>写使能</td><td>WRX</td><td>写使能</td></tr><tr><td>NOE  D[15:0]</td><td>读使能  数据信号</td><td>RDX  D[15:0]</td><td>读使能 数据信号</td></tr><tr><td>A[25:0]</td><td>地址信号</td><td>D/CX</td><td>数据/命令选择</td></tr></tbody></table><p>为了模拟出 8080 时序，我们可以把 FSMC 的 A0 地址线(也可以使用其它 A1/A2 等地<br>址线)与 ILI9341 芯片 8080 接口的 D/CX 信号线连接，那么当 A0 为高电平时(即 D/CX 为高<br>电平)，数据线 D[15:0]的信号会被 ILI9341 理解为数值，若 A0 为低电平时(即 D/CX 为低电<br>平)，传输的信号则会被理解为命令。  </p><h3 id="FSMC的地址映射"><a href="#FSMC的地址映射" class="headerlink" title="FSMC的地址映射"></a>FSMC的地址映射</h3><p>使用 FSMC 外接存储器时，其存储单元是映射到 STM32 的内部寻址空间的，这里也涉及到使用地址线某个引脚时，需要计算对应的地址，以达到控制输出高低电平。</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/fsmc_addr.png" alt="FSMC 的地址映射"></p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="液晶LCD硬件相关宏定义"><a href="#液晶LCD硬件相关宏定义" class="headerlink" title="液晶LCD硬件相关宏定义"></a>液晶LCD硬件相关宏定义</h3><p>根据液晶屏的原理图，将FSMC 控制液晶屏硬件相关的配置都以宏的形式定义：</p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/lcd_pin.png" alt="开发板与屏幕的连接" style="zoom:67%;"><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*****************    LCD控制信号    ******************/</span><span class="token comment" spellcheck="true">//片选引脚</span><span class="token macro property">#<span class="token directive keyword">define</span>        ILI9341_CS_CLK        RCC_APB2Periph_GPIOD</span><span class="token macro property">#<span class="token directive keyword">define</span>     ILI9341_CS_PORT     GPIOD</span><span class="token macro property">#<span class="token directive keyword">define</span>     ILI9341_CS_PIN         GPIO_Pin_7</span><span class="token comment" spellcheck="true">//数据命令引脚</span><span class="token macro property">#<span class="token directive keyword">define</span>        ILI9341_DC_CLK        RCC_APB2Periph_GPIOD</span><span class="token macro property">#<span class="token directive keyword">define</span>        ILI9341_DC_PORT        GPIOD</span><span class="token macro property">#<span class="token directive keyword">define</span>        ILI9341_DC_PIN        GPIO_Pin_11</span><span class="token comment" spellcheck="true">/****************    数据信号线    *****************/</span><span class="token macro property">#<span class="token directive keyword">define</span>     ILI9341_D0_CLK         RCC_APB2Periph_GPIOD</span><span class="token macro property">#<span class="token directive keyword">define</span>     ILI9341_D0_PORT     GPIOD</span><span class="token macro property">#<span class="token directive keyword">define</span>     ILI9341_D0_PIN         GPIO_Pin_14</span><span class="token comment" spellcheck="true">//其他引脚省略</span></code></pre><h3 id="初始化-FSMC-的-GPIO"><a href="#初始化-FSMC-的-GPIO" class="headerlink" title="初始化 FSMC 的 GPIO"></a>初始化 FSMC 的 GPIO</h3><p>利用上面的宏，编写 FSMC 的 GPIO 引脚初始化函数，对于 FSMC 引脚，全部直接初始化为复用推挽输出模式即可，而背光 BK 引脚及液晶复信 RST 信号则被初始化成普通的推挽输出模式，这两个液晶控制信号直接输出普通的电平控制即可。  </p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ILI9341_GPIO_Config</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 使能 FSMC 对应相应管脚时钟*/</span>    <span class="token function">RCC_APB2PeriphClockCmd</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">/* 控制信号 */</span>    ILI9341_CS_CLK<span class="token operator">|</span>ILI9341_DC_CLK<span class="token operator">|</span>ILI9341_WR_CLK<span class="token operator">|</span>    ILI9341_RD_CLK <span class="token operator">|</span>ILI9341_BK_CLK<span class="token operator">|</span>ILI9341_RST_CLK<span class="token operator">|</span>    <span class="token comment" spellcheck="true">/* 数据信号 */</span>    ILI9341_D0_CLK<span class="token operator">|</span>ILI9341_D1_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 省略部分信号线 */</span>    <span class="token comment" spellcheck="true">/* 配置 FSMC 相对应的数据线,FSMC-D0~D15 */</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> ILI9341_D0_PIN<span class="token punctuation">;</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>ILI9341_D0_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 省略部分信号线 */</span>    <span class="token comment" spellcheck="true">//设置复用推挽输出</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> ILI9341_RD_PIN<span class="token punctuation">;</span>     <span class="token function">GPIO_Init</span> <span class="token punctuation">(</span>ILI9341_RD_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 省略WR, CS, DC 控制引脚 */</span>    <span class="token comment" spellcheck="true">//设置普通推挽输出</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>         GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 配置 LCD 复位 RST 控制管脚 */</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> ILI9341_RST_PIN<span class="token punctuation">;</span>     <span class="token function">GPIO_Init</span> <span class="token punctuation">(</span>ILI9341_RST_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 配置 LCD 背光控制管脚 BK */</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> ILI9341_BK_PIN<span class="token punctuation">;</span>     <span class="token function">GPIO_Init</span> <span class="token punctuation">(</span>ILI9341_BK_PORT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="配置-FSMC-的模式"><a href="#配置-FSMC-的模式" class="headerlink" title="配置 FSMC 的模式"></a>配置 FSMC 的模式</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ILI9341_FSMC_Config</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* FSMC模式初始化结构体 */</span>    FSMC_NORSRAMInitTypeDef         FSMC_NORSRAMInitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 读写时序结构体 */</span>     FSMC_NORSRAMTimingInitTypeDef     readWriteTiming<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 使能 FSMC 时钟*/</span>     <span class="token function">RCC_AHBPeriphClockCmd</span><span class="token punctuation">(</span>RCC_AHBPeriph_FSMC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//地址建立时间（ADDSET）为 1 个 HCLK 2/72M=28ns</span>     readWriteTiming<span class="token punctuation">.</span>FSMC_AddressSetupTime <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//地址建立时间</span>     <span class="token comment" spellcheck="true">//数据保持时间（DATAST） + 1 个 HCLK = 5/72M=70ns</span>    readWriteTiming<span class="token punctuation">.</span>FSMC_DataSetupTime <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据建立时间</span>     <span class="token comment" spellcheck="true">//选择控制的模式</span>     <span class="token comment" spellcheck="true">//模式 B, 异步 NOR FLASH 模式，与 ILI9341 的 8080 时序匹配</span>     readWriteTiming<span class="token punctuation">.</span>FSMC_AccessMode <span class="token operator">=</span> FSMC_AccessMode_B<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 以下配置与模式 B 无关 */</span>     readWriteTiming<span class="token punctuation">.</span>FSMC_AddressHoldTime <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//地址保持时间，模式 B未用到</span>     <span class="token comment" spellcheck="true">//设置总线转换周期，仅用于复用模式的 NOR 操作</span>     readWriteTiming<span class="token punctuation">.</span>FSMC_BusTurnAroundDuration <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置时钟分频，仅用于同步类型的存储器</span>     readWriteTiming<span class="token punctuation">.</span>FSMC_CLKDivision <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//数据保持时间，仅用于同步型的 NOR</span>     readWriteTiming<span class="token punctuation">.</span>FSMC_DataLatency <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//选择使用的bank, 本次实例中使用的是FSMC_NE1</span>    <span class="token comment" spellcheck="true">//需要在宏定义中定义：#define FSMC_Bank1_NORSRAMx FSMC_Bank1_NORSRAM1</span>    FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_Bank <span class="token operator">=</span> FSMC_Bank1_NORSRAMx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置地址总线是否与数据总线是否复用，仅用于NOR</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_DataAddressMux <span class="token operator">=</span> FSMC_DataAddressMux_Disable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置要控制的存储器类型：本实例使用的是异步NOR</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_MemoryType <span class="token operator">=</span> FSMC_MemoryType_NOR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置存储器的数据宽度 */</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_MemoryDataWidth <span class="token operator">=</span> FSMC_MemoryDataWidth_16b<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置是否支持突发访问模式，只支持同步类型的存储器 */</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_BurstAccessMode <span class="token operator">=</span> FSMC_BurstAccessMode_Disable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置等待信号的极性，仅用于同步类型存储器 */</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_WaitSignalPolarity <span class="token operator">=</span> FSMC_WaitSignalPolarity_Low<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置是否支持对齐的突发模式，仅用于同步 */</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_WrapMode <span class="token operator">=</span> FSMC_WrapMode_Disable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 配置等待信号（插入时间）在等待前有效还是等待期间有效，仅用于同步 */</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_WaitSignalActive <span class="token operator">=</span> FSMC_WaitSignalActive_BeforeWaitState<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置是否写使能 */</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_WriteOperation <span class="token operator">=</span> FSMC_WriteOperation_Enable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置是否使能等待状态插入，用于设置当存储器处于突发传输模式时，     * 是否允许通过 NWAIT 信号插入等待状态，不使用      */</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_WaitSignal <span class="token operator">=</span> FSMC_WaitSignal_Disable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置是否使能扩展模式，不使用，读写同一时序*/</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_ExtendedMode <span class="token operator">=</span> FSMC_ExtendedMode_Disable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 设置是否使能写突发操作 */</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_WriteBurst <span class="token operator">=</span> FSMC_WriteBurst_Disable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 当不使用扩展模式时，本参数用于配置读写时序，否则用于配置读时序 */</span>     FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_ReadWriteTimingStruct <span class="token operator">=</span> <span class="token operator">&amp;</span>readWriteTiming<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 当使用扩展模式时，本参数用于配置写时序 */</span>    FSMC_NORSRAMInitStructure<span class="token punctuation">.</span>FSMC_WriteTimingStruct <span class="token operator">=</span> <span class="token operator">&amp;</span>readWriteTiming<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//初始化FSMC的配置</span>     <span class="token function">FSMC_NORSRAMInit</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>FSMC_NORSRAMInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 使能 FSMC_Bank1_NORSRAMx */</span>     <span class="token function">FSMC_NORSRAMCmd</span> <span class="token punctuation">(</span>FSMC_Bank1_NORSRAMx<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="计算控制液晶屏时使用的地址"><a href="#计算控制液晶屏时使用的地址" class="headerlink" title="计算控制液晶屏时使用的地址"></a>计算控制液晶屏时使用的地址</h3><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/lie.png" alt=""></p><ul><li><p>首先确定板子NEx引脚的连接，本次实例使用的是<code>FSMC_NE1</code></p></li><li><p>在 数据手册 –&gt; 存储器映像 中查询<code>FSMC_bnak1 NOR/PSRAM 1</code>的地址：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/fsmc_bank1_nor_addr.png" alt=""></p></li><li><p>使用的是<code>FSMS_NE1</code>也就是当访问到<code>0x6000000-0x63FFFFFF</code>这个地址范围内时，FSMC都会产生有效的访问时序；本实例中使用的是<code>FSMC_A16</code>地址线作为命令/数据选择线，即：</p><ul><li><p>使<code>FSMC_A16</code>为高电平，即第十六位为 1 ，可用地址范围内任意地址做一下运算：</p><pre class=" language-c"><code class="language-c"><span class="token number">0X6000</span> <span class="token number">0000</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6001</span> <span class="token number">0000</span><span class="token punctuation">;</span></code></pre></li><li><p>同样的，使<code>FSMC_A16</code>为低电平，即：</p><pre class=" language-c"><code class="language-c"><span class="token number">0X6000</span> <span class="token number">0000</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6000</span> <span class="token number">0000</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>由于地址线转换的问题，这里不细说，需要知道的是，STM32 内部的 HADDR 与 FSMC 的连接关系会左移一位，计算关系也会改变：</p><ul><li><p>使<code>FSMC_A16</code>地址线为高电平：</p><pre class=" language-c"><code class="language-c"><span class="token number">0X6000</span> <span class="token number">0000</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6002</span> <span class="token number">0000</span><span class="token punctuation">;</span></code></pre></li><li><p>使<code>FSMC_A16</code>地址线为低电平：</p><pre class=" language-c"><code class="language-c"><span class="token number">0X6000</span> <span class="token number">0000</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6000</span> <span class="token number">0000</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><h5 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h5><p>因为在实例后面会频繁对LCD进行操作，所以把发送命令及发送数据的操作封装成了内联函数，会更方便调用：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*********** 定义 FSMC 参数宏 **********/</span><span class="token comment" spellcheck="true">//FSMC_Bank1_NORSRAM 用于 LCD 命令操作的地址</span><span class="token macro property">#<span class="token directive keyword">define</span> FSMC_Addr_ILI9341_CMD ( ( uint32_t ) 0x60020000 )</span><span class="token comment" spellcheck="true">//FSMC_Bank1_NORSRAM 用于 LCD 数据操作的地址</span><span class="token macro property">#<span class="token directive keyword">define</span> FSMC_Addr_ILI9341_DATA ( ( uint32_t ) 0x60000000 )</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//发送数据</span>__inline <span class="token keyword">void</span> <span class="token function">ILI9341_Write_Cmd</span> <span class="token punctuation">(</span>uint16_t usCmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span>__IO uint16_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>FSMC_Addr_ILI9341_CMD<span class="token punctuation">)</span> <span class="token operator">=</span> usCmd<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//写入数据</span>__inline <span class="token keyword">void</span> <span class="token function">ILI9341_Write_Data</span> <span class="token punctuation">(</span>uint16_t usData<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">(</span>__IO uint16_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>FSMC_Addr_ILI9341_DATA<span class="token punctuation">)</span> <span class="token operator">=</span> usData<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需要写操作时，只要把要发送的命令代码或数据作为参数输入到函数然后调用即可，对于液晶屏的读操作，把向指针赋值的过程改为读取指针内容即可。  </p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//读取数据</span>__inline uint16_t <span class="token function">ILI9341_Read_Data</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>FSMC_Addr_ILI9341_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="检验封装"><a href="#检验封装" class="headerlink" title="检验封装"></a>检验封装</h4><p>在上述函数封装好之后，进行一些测试检验使很有必要，我们可以查询<code>ILI9341</code>的数据文档，选择合适的命令进行测试：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/ili9341_0ch.png" alt=""></p><p>当发送命令<code>0x0C</code>，第二个参数会返回 LCD 的像素信息，可以封装一个检验函数如下：</p><pre class=" language-c"><code class="language-c">uint16_t <span class="token function">Read_Pixel_Format</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ILI9341_Write_Cmd</span><span class="token punctuation">(</span><span class="token number">0x0C</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送命令参数</span>    <span class="token function">ILI9341_Read_Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取第一个返回参数</span>    <span class="token keyword">return</span> <span class="token function">ILI9341_Read_Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回第二个读取参数</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的网页梦 —— 前端基础 &amp; Vuejs</title>
      <link href="/font-end-2.html"/>
      <url>/font-end-2.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自从上学期期末考试以后，就没有更新博客了，那时候是因为，你懂的嘛；</p><p>回到家后，肯定是玩啦，这么长的假期，同学聚会也少不了，过年期间更是忙的没话说，况且，今年的春节被这个新型冠状病毒整的是你死我活的，国家都进入一种战时状态，天佑中华吧，早点过去这次的考验。</p><p>相比于在医院战场上的医务工作者人员，住在荒野乡间的我，整个世界都闲了下来，但是，你说这可能吗？</p><p>在这个这么长的假期，我丝毫没有忘记我一直以来对网站的追求，从最初的用别人的完整的源码，到用别人的框架和主题，我都一直想自己亲手敲出属于自己的网站，于是我早就开始了……</p><h3 id="前端基础-HTML-amp-CSS"><a href="#前端基础-HTML-amp-CSS" class="headerlink" title="前端基础 HTML &amp; CSS"></a>前端基础 HTML &amp; CSS</h3><p>说到 HTML  &amp; CSS 经常接触网站的我，早有入门，但是没有经过系统化的学习了解，很多东西尚未知悉，我花了大约一周时间把尚硅谷推出的<a href="https://www.bilibili.com/video/av77217003" target="_blank" rel="noopener">培训课程</a>过了一遍，当然这里并不是收了广告费的，只是这个老师讲的确实不错，如果自学能力较差，像我，就必须有个老师引导，学习更得劲。当然了，大佬都是靠着<a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">W3C</a>网站的文档自学的，这个确实厉害。</p><p>跟着课程走，相关的笔记，我用了Xmind做详细记录（感觉没什么用，多实战才是关键），一些经典的处理，我会单独列举出来。</p><h4 id="引入图标字体"><a href="#引入图标字体" class="headerlink" title="引入图标字体"></a>引入图标字体</h4><ol><li><p>引入图标字体库，一般都会选择在<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a>官网下载</p></li><li><p>解压后，将<code>css,eot,svg,ttf,woff,woff2</code>文件复制到项目目录</p></li><li><p>在 <strong>APP.vue</strong> 文件中全局引入</p><pre class=" language-javascript"><code class="language-javascript">@<span class="token keyword">import</span> <span class="token string">'assets/fonts/iconfont.css'</span><span class="token punctuation">;</span></code></pre></li><li><p>挑选相应图标并获取字体编码，应用于页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ifont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#x33;">&amp;#x33;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="实现网页无法选中"><a href="#实现网页无法选中" class="headerlink" title="实现网页无法选中"></a>实现网页无法选中</h4><ul><li><p>通过CSS</p><pre class=" language-css"><code class="language-css">  <span class="token selector">*</span><span class="token punctuation">{</span>      <span class="token property">moz-user-select</span><span class="token punctuation">:</span> -moz-none<span class="token punctuation">;</span>      <span class="token property">-moz-user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">-o-user-select</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>      <span class="token property">-khtml-user-select</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>      <span class="token property">-webkit-user-select</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>      <span class="token property">-ms-user-select</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>      <span class="token property">user-select</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>通过JS</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//禁止页面选择以及鼠标右键</span>document<span class="token punctuation">.</span>οncοntextmenu<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span>onselectstart<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li><p>通过H5的body标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">οncοntextmenu</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return false;<span class="token punctuation">"</span></span> <span class="token attr-name">onselectstart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="前端框架——Vuejs"><a href="#前端框架——Vuejs" class="headerlink" title="前端框架——Vuejs"></a>前端框架——Vuejs</h3><p>有了一些基础，再加上我这颗想要速成的心，我接着就看<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vuejs</a>相关的内容了，这里拿出一个常见的 UI 案例——<strong>Tabbar</strong>，作为练习。</p><h4 id="基本结构的搭建"><a href="#基本结构的搭建" class="headerlink" title="基本结构的搭建"></a>基本结构的搭建</h4><p>首先看下图，这就是Tabbar的成品图，作为一个组件，其显示的内容完全由外界决定，，我们在封装的过程中，只需要设置基本的布局和样式即可。</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/Vuejs/tabbar.png" alt=""></p><p>基本的结构就是 <strong>div</strong> 的嵌套了，样式设置也没有什么技术含量：</p><pre class=" language-css"><code class="language-css">  <span class="token selector"><span class="token id">#tab-bar</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        //设置为弹性盒布局    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f6f6f6</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>      //固定布局    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            //偏移至底部                          //设置Tabbar顶端阴影    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> -<span class="token number">1</span>px <span class="token number">1</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">100</span>,<span class="token number">100</span>,<span class="token number">100</span>,<span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.tab-bar-item</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>                    //子项平均分布    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>         //文字居中    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">49</span>px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>    <span class="token property">padding-top</span><span class="token punctuation">:</span> -<span class="token number">2</span>px<span class="token punctuation">;</span>          //一些细微调整<span class="token punctuation">}</span><span class="token selector"><span class="token class">.tab-bar-item</span> img</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>     //去除图片底部的空隙<span class="token punctuation">}</span><span class="token selector"><span class="token class">.active</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#1296db</span><span class="token punctuation">;</span>             //文本颜色<span class="token punctuation">}</span></code></pre><h4 id="Tabbar组件的封装"><a href="#Tabbar组件的封装" class="headerlink" title="Tabbar组件的封装"></a>Tabbar组件的封装</h4><p>具体的封装思路：</p><ul><li>定义插槽，用于设置Tabbar的每个子项Item</li><li>在Item中再设置三个插槽，用于对图标和文字的插入</li></ul><p>为什么Item中是三个插槽？因为点击Item时，为了更好的用户体验，往往会有图标的强调色，一次需要插入两个图标，而不是在点击时再插入。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--  Tabbar 插槽，同于放置Item  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--  Item 插槽  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab-bar-item<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isActive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-icon-active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><code>isActive</code>是一个计算属性，涉及到颜色控制，之后再详解；另一个就是，为了避免插槽再替换时，覆盖掉<code>v-if</code>和<code>v-else</code>，我们可以将插槽放入 <strong>div</strong> 中，并将它们作为 <strong>div</strong> 的属性。</p><h4 id="结合路由实现点击跳转"><a href="#结合路由实现点击跳转" class="headerlink" title="结合路由实现点击跳转"></a>结合路由实现点击跳转</h4><p>静态的Tabbar已经差不多了，Tabbar主要的功能就是实现多个页面的跳转，主要步骤：</p><ul><li><p>创建页面的<code>.vue</code>文件</p></li><li><p>修改路由配置文件</p></li><li><p>设置点击方法</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//路由 index.js 文件</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">//1. 安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用懒加载，这里只做一个示例</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../views/home/Home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 创建路由对象并导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      redirect<span class="token punctuation">:</span> <span class="token string">'/home'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Home    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>点击方法的设置在<code>tab-bar-item</code>这个 <strong>div</strong> 中设置：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tab-bar-item<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>跳转路由的代码：</p><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">itemClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Tabbar的动态颜色控制"><a href="#Tabbar的动态颜色控制" class="headerlink" title="Tabbar的动态颜色控制"></a>Tabbar的动态颜色控制</h4><p>到这里，整个<code>Tabbar</code>的封装已经差不多了，剩下的就是一个<code>TabBarItem</code>在细节性上的显示问题了，在点击事件产生时变色；此外作为一个封装的组件，其颜色的改变还需要由用户指定，而不能固定一个颜色，这里我们直接上代码：</p><p>首先，我们把固定的颜色样式删除，并在<code>TabBarItem</code>组件中添加如下代码：</p><pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">activeStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isActive <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activeColor<span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>props<span class="token punctuation">:</span> <span class="token punctuation">{</span>  path<span class="token punctuation">:</span> String<span class="token punctuation">,</span>  activeColor<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'#1296db'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在App的模板中添加如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tab-bar</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tab-bar-item</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home<span class="token punctuation">"</span></span> <span class="token attr-name">active-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>  <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-icon<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./assets/img/tabbar/home.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>  <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-icon-active<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./assets/img/tabbar/home_active.svg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tab-bar-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tab-bar</span><span class="token punctuation">></span></span></code></pre><p>也就是在父组件中向子组件TabBarItem中传入两个数据<code>path</code>和<code>active-color</code>,首先我们来看<code>isActive</code>这个计算属性，<code>indexOf</code>函数的作用时查看当前路由内的 <strong>path</strong> 值是否含有父组件传来的 <strong>path</strong> ，没有则返回 <strong>-1</strong>，<code>isActive</code>为<code>true</code>。</p><blockquote><p>The <code>indexOf()</code> method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns <strong>-1</strong> if the value is not found.</p></blockquote><p><code>active-color</code>参数则为传入的字体的颜色，字符串类型，如果忽略，则取默认值，首先要把html模板中的样式修改为：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">activeStyle</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>用<code>v-bind</code>绑定一个样式属性，由<code>isActive</code>控制，即可实现颜色动态控制。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于office的一点点使用经验</title>
      <link href="/office.html"/>
      <url>/office.html</url>
      
        <content type="html"><![CDATA[<p>最近在期末复习，会经常性做一些电子笔记。难免会用到微软的office全家桶，对于一个没有系统性学过这些软件的我来说，遇到很多问题全靠百度过活，百度最有用的功能就是百度经验了，其次就是百度文库，PPT白嫖就是爽！</p><p>然后嘛，我特开此贴记录一下我遇到的问题，很弱智<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span></p><h2 id="记录一次随机生成体温"><a href="#记录一次随机生成体温" class="headerlink" title="记录一次随机生成体温"></a>记录一次随机生成体温</h2><ul><li><p>编辑日期<code>YYYY-MM-DD</code>，右下角鼠标拖动下拉</p></li><li><p>在单元格中，设置函数<code>=36.4+RAND()*0.4</code>，数值大小依据情况取值</p><blockquote><p>RAND() ：返回大于或等于0且小于1的平均分布的随机数</p></blockquote></li><li><p>重新整理数据，因为每次操作后数据都会重新生成，所以需要数据持久化</p><ul><li>选中所有数据复制</li><li>在其他空白区域粘贴，粘贴选项选择：<strong>值</strong>，来回即可</li><li>选中所有数据，单击工具栏<strong>数字格式</strong>，选择<strong>数值</strong>，保留一位小数</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>码字语法三千，我只取一瓢</title>
      <link href="/markdown.html"/>
      <url>/markdown.html</url>
      
        <content type="html"><![CDATA[<h2 id="插入复杂表格"><a href="#插入复杂表格" class="headerlink" title="插入复杂表格"></a>插入复杂表格</h2><ol><li><p>利用 <strong>Excel</strong> 将表格绘制完成</p></li><li><p>选择导出保存为<code>.html/.htm</code>网页文档格式</p></li><li><p>用文本编辑器打开，拷贝<code>table</code>标签内容即可</p></li><li><p>若需要居中表格，可为 table 标签添加样式属性</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>表格内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre></li></ol><h2 id="文档脚注"><a href="#文档脚注" class="headerlink" title="文档脚注"></a>文档脚注</h2><pre class=" language-markdown"><code class="language-markdown">这是一个链接到黄同学博客的脚注[^1]。<span class="token url-reference url"><span class="token punctuation">[</span><span class="token variable">^1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> http://www.mahoo.design</span></code></pre><p>效果：这是一个链接到老黄博客的脚注<a href="http://www.mahoo.design" target="_blank" rel="noopener">^1</a>。</p><h2 id="字体，颜色，大小"><a href="#字体，颜色，大小" class="headerlink" title="字体，颜色，大小"></a>字体，颜色，大小</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>黑体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是黑体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>微软雅黑<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是微软雅黑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STCAIYUN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是华文彩云<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span>red</span><span class="token punctuation">></span></span>我是红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span>#008000</span><span class="token punctuation">></span></span>我是绿色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span>Blue</span><span class="token punctuation">></span></span>我是蓝色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span>5</span><span class="token punctuation">></span></span>我是尺寸为5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>黑体<span class="token punctuation">"</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span>green</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span>5</span><span class="token punctuation">></span></span>我是黑体，绿色，尺寸为5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></code></pre><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="red">我是红色</font><br><font color="#008000">我是绿色</font><br><font color="Blue">我是蓝色</font><br><font size="5">我是尺寸为5</font><br><font face="黑体" color="green" size="5">我是黑体，绿色，尺寸为5</font></p><h2 id="Latex-数学公式"><a href="#Latex-数学公式" class="headerlink" title="Latex 数学公式"></a>Latex 数学公式</h2><h3 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h3><ol><li>上标符号，符号：<code>^</code>，如：$x^4$            (x^4)</li><li>下标符号，符号：<code>_</code>，如：$x_1$            (x_1)</li><li>组合符号，符号：<code>{}</code>，如：${16}<em>{8}A{2}</em>{2}$         ({16}_{8}A{2}_{2})</li><li>取反，符号：<code>\prime</code>，如$D^\prime$</li></ol><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><ol><li>加法运算，符号：<code>+</code>，如：$x+y=z$</li><li>减法运算，符号：<code>-</code>，如：$x-y=z$</li><li>加减运算，符号：<code>\pm</code>，如：$x \pm y=z$</li><li>减加运算，符号：<code>\mp</code>，如：$x \mp y=z$</li><li>乘法运算，符号：<code>\times</code>，如：$x \times y=z$</li><li>点乘运算，符号：<code>\cdot</code>，如：$x \cdot y=z$</li><li>星乘运算，符号：<code>\ast</code>，如：$x \ast y=z$</li><li>除法运算，符号：<code>\div</code>，如：$x \div y=z$</li><li>斜法运算，符号：<code>/</code>，如：$x/y=z$</li><li>分式表示，符号：<code>\frac{分子}{分母}</code>，如：$\frac{x+y}{y+z}$</li><li>分式表示，符号：<code>{分子} \over {分母}</code>，如：${x+y} \over {y+z}$</li><li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li></ol><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><ol><li>等于运算，符号：<code>=</code>，如：$x+y=z$</li><li>大于运算，符号：<code>&gt;</code>，如：$x+y&gt;z$</li><li>小于运算，符号：<code>&lt;</code>，如：$x+y&lt;z$</li><li>大于等于运算，符号：<code>\geq</code>，如：$x+y \geq z$</li><li>小于等于运算，符号：<code>\leq</code>，如：$x+y \leq z$</li><li>不等于运算，符号：<code>\neq</code>，如：$x+y \neq z$</li><li>不大于等于运算，符号：<code>\ngeq</code>，如：$x+y \ngeq z$</li><li>不大于等于运算，符号：<code>\not\geq</code>，如：$x+y \not\geq z$</li><li>不小于等于运算，符号：<code>\nleq</code>，如：$x+y \nleq z$</li><li>不小于等于运算，符号：<code>\not\leq</code>，如：$x+y \not\leq z$</li><li>约等于运算，符号：<code>\approx</code>，如：$x+y \approx z$</li><li>恒定等于运算，符号：<code>\equiv</code>，如：$x+y \equiv z$</li><li>远远大于运算，符号：<code>\gg</code>，如：$a \gg b$</li><li>远远小于运算，符号：<code>\ll</code>，如：$a \ll b$</li></ol><h3 id="累加累乘"><a href="#累加累乘" class="headerlink" title="累加累乘"></a>累加累乘</h3><table><thead><tr><th>符号</th><th>代码</th></tr></thead><tbody><tr><td>$$\sum_{i=1}^n \frac{1}{i^2}$$</td><td><code>$\sum_{i=1}^n \frac{1}{i^2}$</code></td></tr><tr><td>$\prod_{i=1}^n \frac{1}{i^2}$</td><td><code>$\prod_{i=1}^n \frac{1}{i^2}$</code></td></tr><tr><td>$\bigcup_{i=1}^{2} R$</td><td><code>$\bigcup_{i=1}^{2} R$</code></td></tr><tr><td>$\bigcap_{i=1}^{2} R$</td><td><code>$\bigcap_{i=1}^{2} R$</code></td></tr></tbody></table><h3 id="积分运算"><a href="#积分运算" class="headerlink" title="积分运算"></a>积分运算</h3><ol><li><p>积分符号 $\int$ ：<code>$\int$</code></p></li><li><p>双重积分符号$\iint$：<code>$\iint$</code></p></li><li><p>三重积分符号$\iiint$：<code>$\iiint$</code></p></li><li><p>曲线积分$\oint$：<code>$\oint$</code></p><p>实例：$\int_0^1 {x^2} ,{\rm d}x$      ——<code>$\int_0^1 {x^2} \,{\rm d}x$</code></p></li></ol><h3 id="多行格式"><a href="#多行格式" class="headerlink" title="多行格式"></a>多行格式</h3><ol><li>$$y =\begin{cases} a \ b \ c\end{cases}$$         <code>y =\begin{cases} a \\ b \\ c\end{cases}</code></li></ol><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><table><thead><tr><th>符号</th><th>实现</th><th>描述</th></tr></thead><tbody><tr><td>$\bigotimes$</td><td><code>$\bigotimes$</code></td><td>克罗内克积</td></tr><tr><td>⨁</td><td><code>$\bigoplus$</code></td><td>异或</td></tr><tr><td>$\ldots$</td><td><code>$\ldots$</code></td><td>省略号</td></tr><tr><td>$\angle 30^\circ$</td><td><code>$\angle 30^\circ$</code></td><td>角度</td></tr><tr><td>$\uparrow$</td><td><code>$\uparrow$</code></td><td>向上</td></tr><tr><td>$\downarrow$</td><td><code>$\downarrow$</code></td><td>向下</td></tr><tr><td>$\leftarrow$</td><td><code>$\leftarrow$</code></td><td>向左</td></tr><tr><td>$\rightarrow$</td><td><code>$\rightarrow$</code></td><td>向右</td></tr><tr><td>$${\lim_{x \to +\infty}}$$</td><td><code>$${\lim_{x \to +\infty}}$$</code></td><td>极限</td></tr></tbody></table><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><table><thead><tr><th>字母</th><th>实现</th><th>字母</th><th>实现</th></tr></thead><tbody><tr><td>A</td><td><code>A</code></td><td>α</td><td><code>\alhpa</code></td></tr><tr><td>B</td><td><code>B</code></td><td>β</td><td><code>\beta</code></td></tr><tr><td>Γ</td><td><code>\Gamma</code></td><td>γ</td><td><code>\gamma</code></td></tr><tr><td>Δ</td><td><code>\Delta</code></td><td>δ</td><td><code>\delta</code></td></tr><tr><td>E</td><td><code>E</code></td><td>ϵ</td><td><code>\epsilon</code></td></tr><tr><td>Z</td><td><code>Z</code></td><td>ζ</td><td><code>\zeta</code></td></tr><tr><td>H</td><td><code>H</code></td><td>η</td><td><code>\eta</code></td></tr><tr><td>Θ</td><td><code>\Theta</code></td><td>θ</td><td><code>\theta</code></td></tr><tr><td>I</td><td><code>I</code></td><td>ι</td><td><code>\iota</code></td></tr><tr><td>K</td><td><code>K</code></td><td>κ</td><td><code>\kappa</code></td></tr><tr><td>Λ</td><td><code>\Lambda</code></td><td>λ</td><td><code>\lambda</code></td></tr><tr><td>M</td><td><code>M</code></td><td>$\mu$</td><td><code>\mu</code></td></tr><tr><td>N</td><td><code>N</code></td><td>$\nu$</td><td><code>\nu</code></td></tr><tr><td>Ξ</td><td><code>\Xi</code></td><td>ξ</td><td><code>\xi</code></td></tr><tr><td>O</td><td><code>O</code></td><td>$\omicron$</td><td><code>\omicron</code></td></tr><tr><td>Π</td><td><code>\Pi</code></td><td>π</td><td><code>\pi</code></td></tr><tr><td>P</td><td><code>P</code></td><td>ρ</td><td><code>\rho</code></td></tr><tr><td>Σ</td><td><code>\Sigma</code></td><td>$\sigma$</td><td><code>\sigma</code></td></tr><tr><td>T</td><td><code>T</code></td><td>τ</td><td><code>\tau</code></td></tr><tr><td>Υ</td><td><code>\Upsilon</code></td><td>υ</td><td><code>\upsilon</code></td></tr><tr><td>$\Phi$</td><td><code>\Phi</code></td><td>$\phi$</td><td><code>\phi</code></td></tr><tr><td>$\Chi$</td><td><code>\Chi</code></td><td>$\chi$</td><td><code>\chi</code></td></tr><tr><td>$\Psi$</td><td><code>\Psi</code></td><td>$\psi$</td><td><code>\psi</code></td></tr><tr><td>Ω</td><td><code>\Omega</code></td><td>$\omega$</td><td><code>\omega</code></td></tr><tr><td>$\varphi$</td><td><code>\varphi</code></td><td>$\varrho$</td><td><code>\varrho</code></td></tr></tbody></table><p>$$<br>\begin{cases}<br>  1+1/2+\underbrace{1/3+1/4}<em>{&gt;1/2}+<br>       \underbrace{1/5+1/6+1/7+1/8}</em>{&gt;1/2}+\cdots<br>\end{cases}<br>$$</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python对文件进行批量重命名</title>
      <link href="/py-1.html"/>
      <url>/py-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码及相关详解"><a href="#代码及相关详解" class="headerlink" title="代码及相关详解"></a>代码及相关详解</h2><p>最近没有在整STM32了，因为期末将近，必须花时间去预习了:joy:，但是还是忙里有偷闲，看到了以前看过的一些经典的影视作品动漫番剧，突然就想把这些作品的海报剧照等收藏起来，于是就淘遍整个网络下载下来好几百张图片，但是重命名就成了问题，Win10重命名的骚操作不会用，但是Python我会啊，谨以此文记录相关操作:wink:。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> timefilepath <span class="token operator">=</span> <span class="token string">'D:\Mahoo\Pictures\Saved Pictures\收藏'</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 开始计时</span>time_start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> file <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 拼接文件目录</span>    filedir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> file<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>filedir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 新文件名格式</span>        newname <span class="token operator">=</span> <span class="token string">'pic_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 重命名</span>        os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>filedir<span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> newname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结束计时</span>time_end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'一共重命名{}次，耗时{:.3}秒 '</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token punctuation">(</span>time_end <span class="token operator">-</span> time_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="os-path-isdir"><a href="#os-path-isdir" class="headerlink" title="os.path.isdir()"></a>os.path.isdir()</h3><p>该函数判断某一路径是否为目录，返回一个<code>Bool</code>值：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 判断D:\Mahoo\pic是否为文件</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'D:\\Mahoo\\pic'</span><span class="token punctuation">)</span></code></pre><p>类似的即是<code>os.path.isfile()</code>，功能都可以顾名思义<strong>判断是否为文件</strong>。</p><h3 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a>os.path.join()</h3><p>该函数将多个路径组合后返回，例如：</p><pre class=" language-python"><code class="language-python">path1 <span class="token operator">=</span> <span class="token string">'D:\Mahoo'</span>path2 <span class="token operator">=</span> <span class="token string">'Pictures'</span>path3  <span class="token operator">=</span>  os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path1<span class="token punctuation">,</span>path2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>path3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># D:\Mahoo\Pictures</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习Demo</title>
      <link href="/py-2.html"/>
      <url>/py-2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python学习Demo"><a href="#Python学习Demo" class="headerlink" title="Python学习Demo"></a>Python学习Demo</h1><h2 id="1-1-输入输出"><a href="#1-1-输入输出" class="headerlink" title="1.1 输入输出"></a>1.1 输入输出</h2><ul><li><p>使用input()函数获取键盘输入</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'a = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>使用getpass，输入无回显</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> getpassusername <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入用户名: '</span><span class="token punctuation">)</span>password <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token string">'请输入密码: '</span><span class="token punctuation">)</span><span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'admin'</span> <span class="token operator">and</span> password <span class="token operator">==</span> <span class="token string">'123456'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录失败!'</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><h4 id="进制输出"><a href="#进制输出" class="headerlink" title="进制输出"></a>进制输出</h4><p><code>%o</code> —— oct  八进制<br><code>%d</code> —— dec 十进制<br><code>%x</code> —— hex 十六进制</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%o'</span> <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 24</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d'</span> <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 20</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%x'</span> <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 14</span></code></pre><h4 id="浮点输出"><a href="#浮点输出" class="headerlink" title="浮点输出"></a>浮点输出</h4><p><code>%f</code>——保留小数点后面六位有效数字<br>　　%.3f，保留3位小数位<br><code>%e</code> ——保留小数点后面六位有效数字，指数形式输出<br>　　%.3e，保留3位小数位，使用<strong>科学计数法</strong><br><code>%g</code> ——在保证六位有效数字的前提下，使用小数方式，否则使用科学计数法<br>　　%.3g，保留3位有效数字，使用<strong>小数或科学计数法</strong></p><h4 id="format用法"><a href="#format用法" class="headerlink" title="format用法"></a>format用法</h4><p><code>format()</code>功能极其强大，该函数把字符串当成一个模板，通过传入的参数进行格式化，并且使用大括号<code>{}</code>作为特殊字符代替<code>%</code>，并且<code>{}</code>还可以<strong><em>加入编号或关键字控制输入</em></strong>：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不带字段</span>hello world<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0} {1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 带数字编号</span>hello world<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0} {1} {0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打乱顺序</span>hello world hello<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{1} {1} {0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>world world hello<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{a} {tom} {a}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>tom<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 带关键字</span>world hello world<span class="token comment" spellcheck="true"># 数字格式化</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:.2f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.14</span></code></pre><table><thead><tr><th align="center">数字·</th><th align="center">格式</th><th align="center">输出</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">3.1415926</td><td align="center">{:.2f}</td><td align="center">3.14</td><td align="left">保留小数点后两位</td></tr><tr><td align="center">3.1415926</td><td align="center">{:+.2f}</td><td align="center">+3.14</td><td align="left">带符号保留小数点后两位</td></tr><tr><td align="center">-1</td><td align="center">{:+.2f}</td><td align="center">-1.00</td><td align="left">带符号保留小数点后两位</td></tr><tr><td align="center">2.71828</td><td align="center">{:.0f}</td><td align="center">3</td><td align="left">不带小数</td></tr><tr><td align="center">5</td><td align="center">{:0&gt;2d}</td><td align="center">05</td><td align="left">数字补零 (填充左边, 宽度为2)</td></tr><tr><td align="center">5</td><td align="center">{:x&lt;4d}</td><td align="center">5xxx</td><td align="left">数字补x (填充右边, 宽度为4)</td></tr><tr><td align="center">10</td><td align="center">{:x&lt;4d}</td><td align="center">10xx</td><td align="left">数字补x (填充右边, 宽度为4)</td></tr><tr><td align="center">1000000</td><td align="center">{:,}</td><td align="center">1,000,000</td><td align="left">以逗号分隔的数字格式</td></tr><tr><td align="center">0.25</td><td align="center">{:.2%}</td><td align="center">25.00%</td><td align="left">百分比格式</td></tr><tr><td align="center">1000000000</td><td align="center">{:.2e}</td><td align="center">1.00e+09</td><td align="left">指数记法</td></tr><tr><td align="center">13</td><td align="center">{:&gt;10d}</td><td align="center">13</td><td align="left">右对齐 (默认, 宽度为10)</td></tr><tr><td align="center">13</td><td align="center">{:&lt;10d}</td><td align="center">13</td><td align="left">左对齐 (宽度为10)</td></tr><tr><td align="center">13</td><td align="center">{:^10d}</td><td align="center">13</td><td align="left">中间对齐 (宽度为10)</td></tr></tbody></table><table><thead><tr><th>进制控制</th><th>输出</th></tr></thead><tbody><tr><td>‘{:b}’.format(11)</td><td>1011</td></tr><tr><td>‘{:d}’.format(11)</td><td>11</td></tr><tr><td>‘{:o}’.format(11)</td><td>13</td></tr><tr><td>‘{:x}’.format(11)</td><td>b</td></tr><tr><td>‘{:#x}’.format(11)</td><td>0xb</td></tr><tr><td>‘{:#X}’.format(11)</td><td>0XB</td></tr></tbody></table><h2 id="1-2-条件"><a href="#1-2-条件" class="headerlink" title="1.2 条件"></a>1.2 条件</h2><ul><li><p>if…else的嵌套</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'x = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">2</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f(%.2f) = %.2f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>if…elif…else的嵌套</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> float<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'x = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">5</span><span class="token keyword">elif</span> x <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">else</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'f(%.2f) = %.2f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="1-3-循环"><a href="#1-3-循环" class="headerlink" title="1.3 循环"></a>1.3 循环</h2><ul><li><p>for-in循环</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""用for循环实现1-100求和"""</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">+=</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span></code></pre><p><strong>注意</strong>：<code>range</code>可以用来产生一个不变的数值序列，而且这个序列通常都是用在循环中的，例如：</p><ul><li><code>range(101)</code>可以产生一个0到100的整数序列。</li><li><code>range(1, 100)</code>可以产生一个1到99的整数序列。</li><li><code>range(1, 100, 2)</code>可以产生一个1到99的奇数序列，其中的2是步长，即数值序列的增量。</li></ul></li><li><p>for循环实现1-100偶数求和</p><pre class=" language-python"><code class="language-python">sum_even <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum_100_even <span class="token operator">+=</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>sum_even<span class="token punctuation">)</span></code></pre></li><li><p>while循环</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randomanswer <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    number <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> number <span class="token operator">></span> answer<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大了"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> number <span class="token operator">&lt;</span> answer<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小了"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"猜对了"</span><span class="token punctuation">)</span>       <span class="token keyword">break</span></code></pre></li><li><p>求取水仙花数</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> x <span class="token operator">//</span> <span class="token number">100</span>    b <span class="token operator">=</span> x <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span>    c <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span>    <span class="token keyword">if</span> a <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> b <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> c <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">==</span> x<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><h2 id="1-5-模块"><a href="#1-5-模块" class="headerlink" title="1.5 模块"></a>1.5 模块</h2><ul><li><p>random模块的randint函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> randintnum <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">'A'</span><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">'B'</span><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">'C'</span><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">'D'</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre></li><li><p>math模块, abs()取绝对值</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span>b <span class="token operator">=</span> <span class="token number">9</span>c <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><p>如果我们导入的模块除了定义函数之外还中有可以执行代码，<strong>那么Python解释器在导入这个模块时就会执行这些代码</strong>，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是“__main__”。</p></li></ul><p>module.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># __name__是Python中一个隐含的变量它代表了模块的名字</span><span class="token comment" spellcheck="true"># 只有被Python解释器直接执行的模块的名字才是__main__</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call foo()'</span><span class="token punctuation">)</span>    foo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call bar()'</span><span class="token punctuation">)</span>    bar<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>test.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> module<span class="token comment" spellcheck="true"># 导入module时 不会执行模块中if条件成立时的代码 因为模块的名字是module而不是__main__</span></code></pre><h2 id="1-6-函数"><a href="#1-6-函数" class="headerlink" title="1.6 函数"></a>1.6 函数</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在参数名前面的*表示args是一个可变参数</span><span class="token comment" spellcheck="true"># 即在调用add函数时可以传入0个或多个参数</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    total <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> val <span class="token keyword">in</span> args<span class="token punctuation">:</span>        total <span class="token operator">+=</span> val    <span class="token keyword">return</span> total<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="1-7-字符串，列表，元组"><a href="#1-7-字符串，列表，元组" class="headerlink" title="1.7 字符串，列表，元组"></a>1.7 字符串，列表，元组</h2><ul><li><p>字符串</p><pre class=" language-python"><code class="language-python">    str1 <span class="token operator">=</span> <span class="token string">'hello, world!'</span>    <span class="token comment" spellcheck="true"># 通过len函数计算字符串的长度</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 13</span>    <span class="token comment" spellcheck="true"># 获得字符串首字母大写的拷贝</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Hello, world!</span>    <span class="token comment" spellcheck="true"># 获得字符串变大写后的拷贝</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># HELLO, WORLD!</span>    <span class="token comment" spellcheck="true"># 从字符串中查找子串所在位置</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 8</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'shit'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -1</span>    <span class="token comment" spellcheck="true"># 与find类似但找不到子串时会引发异常</span>    <span class="token comment" spellcheck="true"># print(str1.index('or'))</span>    <span class="token comment" spellcheck="true"># print(str1.index('shit'))</span>    <span class="token comment" spellcheck="true"># 检查字符串是否以指定的字符串开头</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'He'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'hel'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>    <span class="token comment" spellcheck="true"># 检查字符串是否以指定的字符串结尾</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>    <span class="token comment" spellcheck="true"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    str2 <span class="token operator">=</span> <span class="token string">'abc123456'</span>    <span class="token comment" spellcheck="true"># 从字符串中取出指定位置的字符(下标运算)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c</span>    <span class="token comment" spellcheck="true"># 字符串切片(从指定的开始索引到指定的结束索引)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c12</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c123456</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># c246     序列每次递增2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ac246</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 654321cba</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 45     倒数第三到倒数第一</span>    <span class="token comment" spellcheck="true"># 检查字符串是否由数字构成</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span>    <span class="token comment" spellcheck="true"># 检查字符串是否以字母构成</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span>    <span class="token comment" spellcheck="true"># 检查字符串是否以数字和字母构成</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>    str3 <span class="token operator">=</span> <span class="token string">'  mahoo12138@qq.com '</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获得字符串修剪左右两侧空格的拷贝</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>字符串前加<code>r</code>表示该字符串为raw string，可以防止字符串被转义，一般多用于正则表达式：</p><pre class=" language-python"><code class="language-python">str <span class="token operator">=</span> r<span class="token string">"\n\n\n"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># \n\n\n</span></code></pre></li><li><p>字符串搜索&amp;替换</p><p>使用 str.replace()</p><pre class=" language-python"><code class="language-python">text<span class="token operator">=</span><span class="token string">"mahoo is a handsome boy"</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"boy"</span><span class="token punctuation">,</span><span class="token string">"girl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># mahoo is a handsome girl</span></code></pre><p>复杂的模式，请使用 re 模块中的 <code>sub()</code>函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 假设你想将形式为 11/27/2018 的日期字符串改成 2018-11-27</span><span class="token keyword">import</span> redate<span class="token operator">=</span><span class="token string">"11/27/2018"</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"(\d+)/(\d+)/(\d+)"</span><span class="token punctuation">,</span>r<span class="token string">"\3-\1-\2"</span><span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2018-11-27</span><span class="token comment" spellcheck="true"># sub() 函数中的第一个参数是被匹配的模式，第二个参数是替换模式。反斜杠数字比如 \3 指向前面模式的捕获组号</span></code></pre><p>转自：<a href="https://www.cnblogs.com/zzy-9318/" target="_blank" rel="noopener">朱兆筠</a>  —— <a href="https://www.cnblogs.com/zzy-9318/p/10457921.html" target="_blank" rel="noopener">Python之字符串搜索和替换</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3></li></ul></li><li><p>列表</p><pre class=" language-python"><code class="language-python">    list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#[1, 3, 5, 7, 100]</span>    list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#['hello', 'hello', 'hello', 'hello', 'hello']</span>    <span class="token comment" spellcheck="true"># 计算列表长度(元素个数)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#5</span>    <span class="token comment" spellcheck="true"># 下标(索引)运算</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#100</span>    <span class="token comment" spellcheck="true"># print(list1[5])  # IndexError: list index out of range</span>    <span class="token comment" spellcheck="true"># 索引为-1，则访问最后一个元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    list1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 添加元素</span>    list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    list1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#在序列1前面插入元素400</span>    list1 <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#添加元素在末尾</span>    <span class="token comment" spellcheck="true"># 删除元素</span>    list1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#移除该元素，没有则报错</span>    <span class="token keyword">if</span> <span class="token number">1234</span> <span class="token keyword">in</span> list1<span class="token punctuation">:</span>        list1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>    <span class="token keyword">del</span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#删除序列0的元素</span>    <span class="token comment" spellcheck="true"># 清空列表元素</span>    list1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><p>列表排序</p><pre class=" language-python"><code class="language-python">    list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'zoo'</span><span class="token punctuation">,</span> <span class="token string">'internationalization'</span><span class="token punctuation">,</span> <span class="token string">'blueberry'</span><span class="token punctuation">]</span>    list2 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>list1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 根据字母表排序</span>    <span class="token comment" spellcheck="true"># sorted函数返回列表排序后的拷贝不会修改传入的列表</span>    list3 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>list1<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 根据字母表反向排序</span>    <span class="token comment" spellcheck="true"># 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序</span>    list4 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>list1<span class="token punctuation">,</span> key<span class="token operator">=</span>len<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 给列表对象发出排序消息直接在列表对象上进行排序</span>    list1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span></code></pre></li></ul></li><li><p>创建列表</p><pre class=" language-python"><code class="language-python">    f <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    f <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">+</span> y <span class="token operator">+</span> z <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'AB'</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token string">'12'</span> <span class="token keyword">for</span> z <span class="token keyword">in</span> <span class="token string">'!@'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ['A1!', 'A1@', 'A2!', 'A2@', 'B1!', 'B1@', 'B2!', 'B2@']</span>    <span class="token comment" spellcheck="true"># 用列表的生成表达式语法创建列表容器</span>    <span class="token comment" spellcheck="true"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span>    <span class="token keyword">import</span> sys    f <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查看对象占用内存的字节数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span>    <span class="token comment" spellcheck="true"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span>    <span class="token comment" spellcheck="true"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span>    f <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 相比生成式生成器不占用存储数据的空间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">for</span> val <span class="token keyword">in</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span></code></pre></li><li><p>二维列表</p><ul><li><p>创建List二维列表</p><pre class=" language-python"><code class="language-python">lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 创建的是多行三列的二维列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lists<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lists<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"lists is:"</span><span class="token punctuation">,</span> lists<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># lists is: [[0, 1, 2], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5, 6]]</span></code></pre></li><li><p>使用索引遍历二维列表</p><pre class=" language-python"><code class="language-python">sum_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        sum_0 <span class="token operator">+=</span> lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The sum_0 of Lists:"</span><span class="token punctuation">,</span> sum_0<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 0</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 0</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 5</span><span class="token comment" spellcheck="true"># 6</span><span class="token comment" spellcheck="true"># The sum of Lists: 34</span></code></pre></li><li><p>使用句柄遍历二维列表</p><pre class=" language-python"><code class="language-python">sum_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> lists<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">:</span>        sum_1 <span class="token operator">+=</span> j<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The sum_1 of Lists:"</span><span class="token punctuation">,</span> sum_1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># The sum_1 of Lists: 34</span></code></pre><p>转自：cloud&amp;ken —— <a href="https://www.cnblogs.com/cloud-ken/p/10019253.html" target="_blank" rel="noopener">python创建与遍历List二维列表</a></p><h3 id="使用元组"><a href="#使用元组" class="headerlink" title="使用元组"></a>使用元组</h3><p>Python 的元组与列表类似，不同之处在于元组的元素不能修改</p><pre class=" language-python"><code class="language-python">     <span class="token comment" spellcheck="true"># 定义元组</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'老黄'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'大连'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取元组中的元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历元组中的值</span>    <span class="token keyword">for</span> member <span class="token keyword">in</span> t<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 重新给元组赋值</span>    <span class="token comment" spellcheck="true"># t[0] = '王大锤'  # TypeError</span>    <span class="token comment" spellcheck="true"># 变量t重新引用了新的元组原来的元组将被垃圾回收</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'老王'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'湖南'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将元组转换成列表</span>    person <span class="token operator">=</span> list<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 列表是可以修改它的元素的</span>    person<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'李小龙'</span>    person<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将列表转换成元组</span>    fruits_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span>    fruits_tuple <span class="token operator">=</span> tuple<span class="token punctuation">(</span>fruits_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fruits_tuple<span class="token punctuation">)</span></code></pre></li></ul></li></ul><h2 id="1-8-yield关键字"><a href="#1-8-yield关键字" class="headerlink" title="1.8 yield关键字"></a>1.8 yield关键字</h2><ul><li><p>Python关键字yield的解释</p><ul><li><p>可迭代对象</p><p>一个列表，可以逐项地读取，这叫做一个可迭代对象:</p><pre class=" language-python"><code class="language-python">list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre></li><li><p>生成器</p><p>生成器是可以迭代的，但是你 <strong>只可以读取它一次</strong> ，因为它并不把所有的值放在内存中，它是实时地生成数据:</p><pre class=" language-python"><code class="language-python">mygenerator <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> mygenerator<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre></li></ul><p>看起来除了把 <code>[]</code> 换成 <code>()</code> 外没什么不同。但是，你不可以再次使用 <code>for i inmygenerator</code> , 因为生成器只能被迭代一次：先计算出0，然后继续计算1，然后计算4，一个跟一个的…</p><ul><li><p>yield关键字</p><p><code>yield</code> 是一个类似 <code>return</code> 的关键字，<strong>只是这个函数返回的是个生成器</strong>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">createGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    mylist <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> mylist <span class="token punctuation">:</span>        <span class="token keyword">yield</span> i<span class="token operator">*</span>imygenerator <span class="token operator">=</span> createGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mygenerator<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># mygenerator 是一个对象</span><span class="token operator">&lt;</span>generator object createGenerator at <span class="token number">0x000001D74701D8C8</span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> mygenerator<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>这个例子没什么用途，但是它让你知道，这个函数会返回一大批你只需要读一次的值.</p></li></ul></li></ul><h2 id="1-9-类的使用"><a href="#1-9-类的使用" class="headerlink" title="1.9 类的使用"></a>1.9 类的使用</h2><ul><li><p>定义类</p><p>在Python中可以使用<code>class</code>关键字定义类，然后在类中通过之前学习过的函数来定义方法，这样就可以将对象的动态特征描述出来，代码如下所示。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span>    <span class="token comment" spellcheck="true"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">study</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> course_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s正在学习%s.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> course_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span>    <span class="token comment" spellcheck="true"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span>    <span class="token keyword">def</span> <span class="token function">watch_movie</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s只能观看《熊出没》.'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s正在观看岛国爱情大电影.'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><blockquote><p><strong>说明：</strong> 写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息。</p></blockquote></li><li><p>创建和使用对象</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建学生对象并指定姓名和年龄</span>    stu1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 给对象发study消息</span>    stu1<span class="token punctuation">.</span>study<span class="token punctuation">(</span><span class="token string">'Python程序设计'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 给对象发watch_av消息</span>    stu1<span class="token punctuation">.</span>watch_movie<span class="token punctuation">(</span><span class="token punctuation">)</span>    stu2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'王大锤'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>    stu2<span class="token punctuation">.</span>study<span class="token punctuation">(</span><span class="token string">'思想品德'</span><span class="token punctuation">)</span>    stu2<span class="token punctuation">.</span>watch_movie<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><p>  if <strong>name</strong> == ‘<strong>main</strong>‘:<br>      main()</p><pre><code>+ 访问的可见性  在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头，下面的代码可以验证这一点。  ```python  class Test:      def __init__(self, foo):          self.__foo = foo      def __bar(self):          print(self.__foo)          print('__bar')  def main():      test = Test('hello')      # AttributeError: 'Test' object has no attribute '__bar'      test.__bar()      # AttributeError: 'Test' object has no attribute '__foo'      print(test.__foo)  if __name__ == "__main__":      main()</code></pre><p>  但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来“妨碍”对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们，下面的代码就可以验证这一点。之所以这样设定，可以用这样一句名言加以解释，就是“We are all consenting adults here”。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。</p><pre class=" language-python"><code class="language-python">  <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">:</span>          self<span class="token punctuation">.</span>__foo <span class="token operator">=</span> foo      <span class="token keyword">def</span> <span class="token function">__bar</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__foo<span class="token punctuation">)</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__bar'</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      test <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>      test<span class="token punctuation">.</span>_Test__bar<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>_Test__foo<span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>      main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>  在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问。所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻。</p><h2 id="2-0-文件操作"><a href="#2-0-文件操作" class="headerlink" title="2.0 文件操作"></a>2.0 文件操作</h2><ul><li>操作模式</li></ul><table><thead><tr><th align="center">操作模式</th><th align="left">具体含义</th></tr></thead><tbody><tr><td align="center"><code>'r'</code></td><td align="left">读取 （默认）</td></tr><tr><td align="center"><code>'w'</code></td><td align="left">写入（会先截断之前的内容）</td></tr><tr><td align="center"><code>'x'</code></td><td align="left">写入，如果文件已经存在会产生异常</td></tr><tr><td align="center"><code>'a'</code></td><td align="left">追加，将内容写入到已有文件的末尾</td></tr><tr><td align="center"><code>'b'</code></td><td align="left">二进制模式</td></tr><tr><td align="center"><code>'t'</code></td><td align="left">文本模式（默认）</td></tr><tr><td align="center"><code>'+'</code></td><td align="left">更新（既可以读又可以写）</td></tr></tbody></table><h3 id="读写文本文件"><a href="#读写文本文件" class="headerlink" title="读写文本文件"></a>读写文本文件</h3><ul><li><p>使用<code>open()</code>函数</p><ul><li><p>文件名 (指定路径)</p></li><li><p>文件模式 </p></li><li><p>编码参数</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'mahoo.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><p>  if <strong>name</strong> == ‘<strong>main</strong>‘:<br>      main()</p><pre><code>## </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那个深秋的夜晚——与ADC的浪漫邂逅</title>
      <link href="/stm32-4.html"/>
      <url>/stm32-4.html</url>
      
        <content type="html"><![CDATA[<p>注：本文属博主学习时所作笔记，内容源大参考于野火的《零死角玩转STM32F103》以及部分网络资料，笔记内容仅作为自己参考，免去频繁查询参考手册的麻烦，如有错误，还请指出！</p><h2 id="ADC简介"><a href="#ADC简介" class="headerlink" title="ADC简介"></a>ADC简介</h2><p>STM32f103 系列有 3 个 ADC，精度为 12 位，每个 ADC 最多有 16 个外部通道，可测量16个外部和2个内部信号源。其中ADC1 和 ADC2 都有 16 个外部通道，ADC3 根据 CPU 引脚的不同通道数也不同，一般都有8 个外部通道。</p><p>ADC的结果可以左对齐或右对齐方式存储在16位数据寄存器中。</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/adc.png" alt="单个ADC框图"></p><h3 id="电压输入范围"><a href="#电压输入范围" class="headerlink" title="电压输入范围"></a>电压输入范围</h3><p>输入电压：$V_{REF-} \leq V_{IN} \leq V_{REF+}$，决定输入电压的引脚：$V_{REF-}, V_{REF+},VDDA,VSSA$，把$VSSA$和$V_{REF-}$接地，$V_{REF+}$和$VDDA$接$3.3V$，得到ADC的输入电压范围为：==0~3.3V==。</p><blockquote><p> VDD： D即device 表示器件的意思，是器件内部的工作电压。 </p><p> VDDA(A表示 Analog 【模拟】)是模拟电源，当使用到模拟信号的时候，比如AD（模数）或者DA（数模）的时候，系统会使用VDDA的电压作为参考电压来。不要求精准使用的话，可以直接把VDDA和VDD同时接入$3.3V$就行。如果要求精准，则需要做一个稳压电路，再接入VDDA 。</p><p> VSS：S即series 表示公共连接的意思，通常指电路公共接地端电压 ，VSSA同理为模拟部分的电源。</p><p>对于数字电路来说，VCC是电路的供电电压,VDD是芯片的工作电压(通常$VCC&gt;VDD$)，$VSS$是接地点。<br>例如，对于ARM单片机来说，其供电电压$VCC$一般为5V，一般经过稳压模块将其转换为单片机工作电压$VDD = 3.3V$。</p></blockquote><h4 id="定制电压范围"><a href="#定制电压范围" class="headerlink" title="定制电压范围"></a>定制电压范围</h4><p>例如将电压范围设成$-10V$~ $10V$，可以通过下图的附加扩展电路实现：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/-10~10.png" alt="附加电路"></p><p>根据基尔霍夫定律（KCL），即节点流入的电流等于流出的电流可以得到：<br>$$<br>{(V_{IN}-V_{OUT})\over 2 } + {(3.3V-V_{OUT})\over R_1 } = {V_{OUT} \over R_3}<br>$$<br>解得：                                                                                                                                             $V_{OUT}={(V_{IN}+ 10)\over 6}$</p><p>在附加电路的条件下，当$V_{IN}=-10V$时，$V_{OUT}=0$；当$V_{IN}=10V$时，$V_{OUT}=3.3V$。以此达到测量$-10V$~ $10V$电压的目的。</p><h3 id="输入通道"><a href="#输入通道" class="headerlink" title="输入通道"></a>输入通道</h3><p>输入通道，顾名思义为将电压输入到ADC的通道，STM32 的 ADC 多达 18 个通道，具体参考下图：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/%E8%BE%93%E5%85%A5%E9%80%9A%E9%81%93.png" alt="输入通道"></p><p>外部的 16 个通道在转换的时候又分为规则通道和注入通道，其中规则通道最多有 16路，注入通道最多有 4 路。</p><ul><li>规则通道：也就是一般情况下用到的通道；</li><li>注入通道：可以在规则通道转换的时候强行插入转换，享有转换特权，有点像中断的操作。</li></ul><h3 id="转换顺序"><a href="#转换顺序" class="headerlink" title="转换顺序"></a>转换顺序</h3><ul><li><p>规则序列</p><p>转换的优先级并不是根据通道的编号来确定的，需要操作规则序列寄存器<code>SQRx</code>(x=1,2,3)，例如将通道六设置为第十个转换，SQ10这个位写6即可。SQL1中SQL位用于设置转换通道的数量，具体的操作都可以库函数代劳。</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/%E8%BD%AC%E6%8D%A2%E9%A1%BA%E5%BA%8F_%E8%A7%84%E5%88%99.png" alt="规则序列"></p></li><li><p>注入序列</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/%E8%BD%AC%E6%8D%A2%E9%A1%BA%E5%BA%8F_%E6%B3%A8%E5%85%A5.png" alt="注入序列"></p><p>注入序列的转换顺序稍有不一样，当<code>JL</code>的值小于<code>4</code>时，第一次转的顺序是<code>JSQx</code>(x=4-JL)；当JL等于4时，与SQR一致。</p></li></ul><h3 id="触发源"><a href="#触发源" class="headerlink" title="触发源"></a>触发源</h3><p>触发源可以看作是系统给ADC这个外设的一个信号，当触发源激活时，ADC就开始进行转换。触发源一般有两种：软件触发和外部事件触发（包括内部定时器和外部IO）；</p><ul><li><p>软件触发</p><p>在<code>ADC_CR2</code>的<code>ADON</code>位写1，开始转换；</p></li><li><p>外部事件触发</p><p>外部触发源很多，不在此详叙，主要经过<code>EXTSEL[2:0]</code>和 <code>JEXTSEL[2:0]</code>位来选择，<code>EXTTRIG</code> 和<code>JEXTTRIG</code>这两位来激活。</p></li></ul><h3 id="转换时间"><a href="#转换时间" class="headerlink" title="转换时间"></a>转换时间</h3><h4 id="ADC时钟"><a href="#ADC时钟" class="headerlink" title="ADC时钟"></a>ADC时钟</h4><p>ADC 输入时钟 ADC_CLK 由 PCLK2 经过分频产生，最大是 14M，分频因子由 RCC 时钟配置寄存器<code>RCC_CFGR</code> 的位 15:14 <code>ADCPRE[1:0]</code>设置，可以是 2/4/6/8 分频，注意这里没有 1 分频。一般我们设置 $PCLK2=HCLK=72M$。</p><h4 id="采样时间"><a href="#采样时间" class="headerlink" title="采样时间"></a>采样时间</h4><p>ADC 使用若干个 <code>ADC_CLK</code> 周期对输入的电压进行采样，采样的周期数可通过 ADC 采样时间寄存器 <code>ADC_SMPR1</code> 和 <code>ADC_SMPR2</code> 中的 <code>SMP[2:0]</code>位设置，ADC_SMPR2 控制的是通道 0<sub>9，<code>ADC_SMPR1</code>控制的是通道 10</sub>17。每个通道可以分别用不同的时间采样。其中采样周期最小是 1.5 个，即如果我们要达到最快的采样，那么应该设置采样周期为 1.5个周期，这里说的周期就是$ 1\over ADC_{CLK}$。</p><p>ADC 的转换时间跟 ADC 的输入时钟和采样时间有关，公式为：<br>$$<br>Tconv = 采样时间 + 12.5 个周期。<br>$$<br>当 $ADCLK = 14MHZ$ （最高），采样时间设置为 1.5 周期（最快），那么总的转换时间（最短）$T_{conv}$ = 1.5 周期 + 12.5 周期 = 14 周期 = 1us。一般我们设置 $PCLK2=72M$，经过 ADC 预分频器能分频到最大的时钟只能是 12M，采样周期设置为 1.5 个周期，算出最短的转换时间为 1.17us，这个才是最常用的。</p><h3 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h3><p>ADC转换后，规则组数据存放在<code>ADC_DR</code>寄存器中，注入组在<code>JDRx</code>。</p><h4 id="规则数据寄存器"><a href="#规则数据寄存器" class="headerlink" title="规则数据寄存器"></a>规则数据寄存器</h4><p>ADC 规则组数据寄存器 <code>ADC_DR</code> 只有一个，是一个 32 位的寄存器，低 16 位在单 ADC时使用，高 16 位是在 ADC1 中双模式下保存 ADC2 转换的规则数据，双模式就是 ADC1 和ADC2 同时使用。在单模式下，ADC1/2/3 都不使用高 16 位。因为 ADC 的精度是 12 位，<br>无论<code>ADC_DR</code> 的高 16 或者低 16 位都放不满，只能左对齐或者右对齐，具体是以哪一种方式存放，由 <code>ADC_CR2</code> 的 11 位 <code>ALIGN</code>设置。</p><p>由于数据寄存器只有一个，而通道却有多个，<strong>多通道转换时为了避免数据被覆盖，转换完成时应立刻将数据取走</strong>，一般开启<code>DMA</code>传输模式，直接将数据传输给变量。</p><h4 id="注入数据寄存器"><a href="#注入数据寄存器" class="headerlink" title="注入数据寄存器"></a>注入数据寄存器</h4><p>ADC 注入组最多有 4 个通道，刚好注入数据寄存器也有 4 个，每个通道对应着自己的寄存器，不会跟规则寄存器那样产生数据覆盖的问题。<code>ADC_JDRx</code> 是 32 位的，低 16 位有效，高 16 位保留，数据同样分为左对齐和右对齐，具体是以哪一种方式存放，由<br><code>ADC_CR2</code> 的 11 位<code>ALIGN</code> 设置。</p><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><h4 id="转换结束中断"><a href="#转换结束中断" class="headerlink" title="转换结束中断"></a>转换结束中断</h4><p>数据转换结束后，可以产生中断，中断分为三种：</p><ul><li><p><em>规则通道转换结束中断，</em>对应中断位：<code>ADC_IT_EOC</code>;</p></li><li><p><em>注入转换通道转换结束中断，</em>对应中断位：<code>ADC_IT_JEOC</code>;</p></li><li><p><em>模拟看门狗中断</em>，对应中断位：<code>ADC_IT_AWD</code>。</p></li></ul><h4 id="模拟看门狗中断"><a href="#模拟看门狗中断" class="headerlink" title="模拟看门狗中断"></a>模拟看门狗中断</h4><p>当被 ADC 转换的模拟电压低于低阈值或者高于高阈值时，就会产生中断，<strong>前提是我们开启了模拟看门狗中断</strong>，其中低阈值和高阈值由 <code>ADC_LTR</code> 和 <code>ADC_HTR</code> 设置。例如我们设置的电压高阈值为3.3V，若接入的模拟电压高于3.3V时，即产生中断。</p><h4 id="DMA-请求"><a href="#DMA-请求" class="headerlink" title="DMA 请求"></a>DMA 请求</h4><p>规则和注入通道转换结束后，除了产生中断外，还可以产生 DMA 请求，把转换好的数据直接存储在内存里面。要注意的是<strong>只有 ADC1 和 ADC3 可以产生 DMA 请求</strong>。</p><h3 id="双-ADC-模式"><a href="#双-ADC-模式" class="headerlink" title="双 ADC 模式"></a>双 ADC 模式</h3><p>AD 转换包括采样阶段和转换阶段，在采样阶段才对通道数据进行采集；而在转换阶段只是将采集到的数据进行转换为数字量输出，此刻通道数据变化不会改变转换结果。独立模式的 ADC 采集需要在一个通道采集并且转换完成后才会进行下一个通道的采集。而双重 ADC 的机制就是使用两个 ADC 同时采样一个或者多个通道。双重 ADC 模式较独立模式一个最大的优势就是提高了采样率，弥补了单个 ADC 采样不够快的缺点。</p><p>启用双 ADC 模式的时候，通过配置 <code>ADC_CR1</code>寄存器的<code>DUALMOD[3:0]</code>位，可以有几种不同的模式：</p><table><thead><tr><th align="center">模式</th><th align="left">简介</th></tr></thead><tbody><tr><td align="center">同步注入模式</td><td align="left">ADC1 和 ADC2 同时转换一个注入通道组，其中 ADC1 为主，ADC2 为从。转换的数据存储在每个 ADC 接口的<code>ADC_JDRx</code>寄存器中。</td></tr><tr><td align="center">同步规则模式</td><td align="left">ADC1 和 ADC2 同时转换一个规则通道组，其中 ADC1 为主，ADC2 为从。ADC1 转换的结果放在 <code>ADC1_DR</code> 的低 16 位，ADC2 转换的结果放在 <code>ADC1_DR</code> 的高十六位。</td></tr><tr><td align="center">快速交叉模式</td><td align="left">ADC1 和 ADC2 交替采集一个规则通道组（通常为一个通道）。当ADC2 触发之后，ADC1 需要等待 ==7==个<code>ADCCLK</code> 之后才能触发。</td></tr><tr><td align="center">慢速交叉模式</td><td align="left">ADC1 和 ADC2 交替采集一个规则通道组（只能为一个通道）。当ADC2 触发之后，ADC1 需要等待 ==14== 个<code>ADCCLK</code> 之后才能触发。</td></tr><tr><td align="center">交替触发模式</td><td align="left">ADC1 和 ADC2 轮流采集注入通道组，当 ADC1 所有通道采集完毕之后再采集 ADC2 的通道，如此循环。跟交叉采集不一样。</td></tr><tr><td align="center">混合的规则/注入同步模式</td><td align="left">规则组同步转换被中断，以启动注入组的同步转换。分开两个模式来理解就可以了，区别就是注入组可以中断规则组的转换。</td></tr><tr><td align="center">混 合 的 同 步 规则+交替触发模式</td><td align="left">规则组同步转换被中断，以启动注入组交替触发转换。分开两个模式来理解就可以了，区别就是注入组可以中断规则组的转换。</td></tr><tr><td align="center">混合同步注入+交叉模式</td><td align="left">交叉转换可以被同步注入模式中断。这种情况下，交叉转换被中断，注入转换被启动。</td></tr></tbody></table><h2 id="例程设计"><a href="#例程设计" class="headerlink" title="例程设计"></a>例程设计</h2><p>STM32 的 ADC 功能繁多，以下通过三个基础例程尽量展示ADC的功能，代码中均没有使用宏定义，是为了看得更直观。</p><h3 id="独立模式单通道"><a href="#独立模式单通道" class="headerlink" title="独立模式单通道"></a>独立模式单通道</h3><p>*<em>1) *</em>初始 ADC 用到的 GPIO，这里我们以<code>GPIOC1</code>为例：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ADCx_GPIO_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打开 ADC IO 端口时钟</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置 ADC IO 引脚模式</span>    <span class="token comment" spellcheck="true">// 必须为模拟输入</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_1<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AIN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 ADC IO</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p><strong>2)</strong> 设置 ADC 的工作参数并初始化（以ADC1为例）；</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ADCx_Mode_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ADC_InitTypeDef ADC_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打开 ADC 时钟</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_ADC1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ADC 模式配置</span>    <span class="token comment" spellcheck="true">// 只使用一个 ADC，属于独立模式</span>    ADC_InitStructure<span class="token punctuation">.</span>ADC_Mode <span class="token operator">=</span> ADC_Mode_Independent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 禁止扫描模式，多通道才要，单通道不需要</span>    ADC_InitStructure<span class="token punctuation">.</span>ADC_ScanConvMode <span class="token operator">=</span> DISABLE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 连续转换模式</span>    ADC_InitStructure<span class="token punctuation">.</span>ADC_ContinuousConvMode <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不用外部触发转换，软件开启即可</span>    ADC_InitStructure<span class="token punctuation">.</span>ADC_ExternalTrigConv <span class="token operator">=</span> ADC_ExternalTrigConv_None<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 转换结果右对齐</span>    ADC_InitStructure<span class="token punctuation">.</span>ADC_DataAlign <span class="token operator">=</span> ADC_DataAlign_Right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 转换通道 1 个</span>    ADC_InitStructure<span class="token punctuation">.</span>ADC_NbrOfChannel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 ADC</span>    <span class="token function">ADC_Init</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ADC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置ADC时钟为PCLK2的8分频，即9MHz</span>    <span class="token function">RCC_ADCCLKConfig</span><span class="token punctuation">(</span>RCC_PCLK2_Div8<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 配置 ADC 通道转换顺序和采样时间</span>    <span class="token function">ADC_RegularChannelConfig</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ADC_Channel_13<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> ADC_SampleTime_55Cycles5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**      * @param1 ADC 外设      * @param2 通道选择      * @param3 转换顺序 1~16      * @param4 采样周期      */</span>    <span class="token comment" spellcheck="true">// ADC 转换结束产生中断，在中断服务程序中读取转换值</span>    <span class="token function">ADC_ITConfig</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ADC_IT_EOC<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开启ADC，并开始转换</span>    <span class="token function">ADC_Cmd</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化ADC 校准寄存器  </span>    <span class="token function">ADC_ResetCalibration</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待校准寄存器初始化完成</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">ADC_GetResetCalibrationStatus</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ADC开始校准</span>    <span class="token function">ADC_StartCalibration</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待校准完成</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">ADC_GetCalibrationStatus</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 由于没有采用外部触发，所以使用软件触发ADC转换 </span>    <span class="token function">ADC_SoftwareStartConvCmd</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>*<em>3) *</em>配置中断源和中断优先级；</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ADC_NVIC_Config</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 优先级分组</span>    <span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 配置中断优先级</span>     NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> ADC1_2_IRQn<span class="token punctuation">;</span>      NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>      <span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>4)</strong> 中断服务函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ADC1_2_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ADC_GetITStatus</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span>ADC_IT_EOC<span class="token punctuation">)</span><span class="token operator">==</span>SET<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 读取ADC的转换值</span>        ADC_ConvertedValue <span class="token operator">=</span> <span class="token function">ADC_GetConversionValue</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ADC_ConvertedValue为转换值，定义原型为：__IO uint16_t ADC_ConvertedValue;</span>    <span class="token punctuation">}</span>    <span class="token function">ADC_ClearITPendingBit</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span>ADC_IT_EOC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>5)</strong> main()函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">extern</span> __IO uint16_t ADC_ConvertedValue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 局部变量，用于保存转换计算后的电压值      </span><span class="token keyword">float</span> ADC_ConvertedValueLocal<span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 默认已经完成了串口配置</span>    <span class="token function">USART_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADCx_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADCx_Mode_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADC_NVIC_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\n ----这是一个串口发送实验----\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ADC_ConvertedValueLocal <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> ADC_ConvertedValue<span class="token operator">/</span><span class="token number">4096</span><span class="token operator">*</span><span class="token number">3.3</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n The current AD value = 0x%04X \r\n"</span><span class="token punctuation">,</span>ADC_ConvertedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n The current AD value = %f V \r\n"</span><span class="token punctuation">,</span>ADC_ConvertedValueLocal<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="独立模式多通道"><a href="#独立模式多通道" class="headerlink" title="独立模式多通道"></a>独立模式多通道</h3><p>因为与单通道大多配置都相同，因此只列出差异部分。</p><p>*<em>1) *</em>初始 ADC 用到的 GPIO；</p><pre class=" language-c"><code class="language-c">GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span>     ADC_PIN1 <span class="token operator">|</span> ADC_PIN2 <span class="token operator">|</span> ADC_PIN3 <span class="token operator">|</span> ADC_PIN4 <span class="token operator">|</span> ADC_PIN5 <span class="token operator">|</span> ADC_PIN6<span class="token punctuation">;</span></code></pre><p><strong>2)</strong> 设置 ADC 的工作参数并初始化，还需要对DMA进行配置；</p><pre class=" language-c"><code class="language-c">    DMA_InitTypeDef DMA_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_AHBPeriphClockCmd</span><span class="token punctuation">(</span>RCC_AHBPeriph_DMA1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 打开 DMA 时钟</span>    DMA_InitStructure<span class="token punctuation">.</span>DMA_PeripheralBaseAddr <span class="token operator">=</span> <span class="token punctuation">(</span>u32<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>ADC_x<span class="token operator">-></span>DR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 外设基址为：ADC 数据寄存器地址</span>    DMA_InitStructure<span class="token punctuation">.</span>DMA_MemoryBaseAddr <span class="token operator">=</span> <span class="token punctuation">(</span>u32<span class="token punctuation">)</span>ADC_ConvertedValue<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 存储器地址,用户自定义变量（数组名）</span>    DMA_InitStructure<span class="token punctuation">.</span>DMA_DIR <span class="token operator">=</span> DMA_DIR_PeripheralSRC<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 数据源来自外设</span>    DMA_InitStructure<span class="token punctuation">.</span>DMA_BufferSize <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 缓冲区大小，应该等于数据目的地的数目大小</span>    DMA_InitStructure<span class="token punctuation">.</span>DMA_PeripheralInc <span class="token operator">=</span> DMA_PeripheralInc_Disable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 外设寄存器只有一个，地址不用递增</span>    DMA_InitStructure<span class="token punctuation">.</span>DMA_MemoryInc <span class="token operator">=</span> DMA_MemoryInc_Enable<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 存储器地址递增</span>    <span class="token comment" spellcheck="true">// 外设数据大小为半字，即两个字节</span>    DMA_InitStructure<span class="token punctuation">.</span>DMA_PeripheralDataSize <span class="token operator">=</span> DMA_PeripheralDataSize_HalfWord<span class="token punctuation">;</span>        DMA_InitStructure<span class="token punctuation">.</span>DMA_MemoryDataSize <span class="token operator">=</span> DMA_MemoryDataSize_HalfWord<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内存数据大小也为半字，跟外设数据大小相同</span>    DMA_InitStructure<span class="token punctuation">.</span>DMA_Mode <span class="token operator">=</span> DMA_Mode_Circular<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 循环传输模式</span>    <span class="token comment" spellcheck="true">// DMA 传输通道优先级为高，当使用一个DMA通道时，优先级设置不影响</span>    DMA_InitStructure<span class="token punctuation">.</span>DMA_Priority <span class="token operator">=</span> DMA_Priority_High<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 禁止存储器到存储器模式，因为是从外设到存储器</span>    DMA_InitStructure<span class="token punctuation">.</span>DMA_M2M <span class="token operator">=</span> DMA_M2M_Disable<span class="token punctuation">;</span>                        <span class="token function">DMA_Init</span><span class="token punctuation">(</span>DMA1_Channel1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>DMA_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 初始化DMA    </span>    <span class="token function">DMA_Cmd</span><span class="token punctuation">(</span>DMA1_Channel1 <span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// 使能 DMA 通道</span><span class="token comment" spellcheck="true">/* -------------------------------------------------------------------------------------------------------*/</span>    ADC_InitStructure<span class="token punctuation">.</span>ADC_ScanConvMode <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 扫描模式 多通道</span>    ADC_InitStructure<span class="token punctuation">.</span>ADC_NbrOfChannel <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 转换通道个数</span>    <span class="token comment" spellcheck="true">// 配置ADC 通道的转换顺序和采样时间</span>    <span class="token function">ADC_RegularChannelConfig</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ADC_Channel_10<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> ADC_SampleTime_55Cycles5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADC_RegularChannelConfig</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ADC_Channel_11<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> ADC_SampleTime_55Cycles5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADC_RegularChannelConfig</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ADC_Channel_12<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> ADC_SampleTime_55Cycles5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADC_RegularChannelConfig</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ADC_Channel_13<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> ADC_SampleTime_55Cycles5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADC_RegularChannelConfig</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ADC_Channel_14<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> ADC_SampleTime_55Cycles5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADC_RegularChannelConfig</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ADC_Channel_15<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> ADC_SampleTime_55Cycles5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADC_DMACmd</span><span class="token punctuation">(</span>ADC1<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment" spellcheck="true">// 使能ADC DMA 请求</span></code></pre><p><strong>3)</strong> main()函数</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// ADC1转换的电压值通过DMA方式传到SRAM</span><span class="token keyword">extern</span> __IO uint16_t ADC_ConvertedValue<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 局部变量，用于保存转换计算后的电压值      </span><span class="token keyword">float</span> ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 默认已经完成了串口配置</span>    <span class="token function">USART_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADCx_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ADCx_Mode_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t\n ----这是一个串口发送实验----\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> ADC_ConvertedValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">4096</span><span class="token operator">*</span><span class="token number">3.3</span><span class="token punctuation">;</span>    ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> ADC_ConvertedValue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">4096</span><span class="token operator">*</span><span class="token number">3.3</span><span class="token punctuation">;</span>    ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> ADC_ConvertedValue<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">4096</span><span class="token operator">*</span><span class="token number">3.3</span><span class="token punctuation">;</span>    ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> ADC_ConvertedValue<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">4096</span><span class="token operator">*</span><span class="token number">3.3</span><span class="token punctuation">;</span>    ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> ADC_ConvertedValue<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">4096</span><span class="token operator">*</span><span class="token number">3.3</span><span class="token punctuation">;</span>    ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> ADC_ConvertedValue<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">4096</span><span class="token operator">*</span><span class="token number">3.3</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n CH0 value = %f V \r\n"</span><span class="token punctuation">,</span>ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n CH1 value = %f V \r\n"</span><span class="token punctuation">,</span>ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n CH2 value = %f V \r\n"</span><span class="token punctuation">,</span>ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n CH3 value = %f V \r\n"</span><span class="token punctuation">,</span>ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n CH4 value = %f V \r\n"</span><span class="token punctuation">,</span>ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n CH5 value = %f V \r\n"</span><span class="token punctuation">,</span>ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="双ADC同步规则"><a href="#双ADC同步规则" class="headerlink" title="双ADC同步规则"></a>双ADC同步规则</h3><p>*<em>1) *</em>初始 ADC 用到的 GPIO；</p><pre class=" language-c"><code class="language-c">    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_1<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_4<span class="token punctuation">;</span></code></pre><p><strong>2)</strong> 设置 ADC 的工作参数并初始化，还需要对DMA进行配置；</p><pre class=" language-C"><code class="language-C">    ADC_InitStructure.ADC_Mode = ADC_Mode_RegSimult;            // 双ADC的规则同步    ADC_InitStructure.ADC_ScanConvMode = ENABLE ;                 // 扫描模式    ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;            // 连续转换模式    // 不用外部触发转换，软件开启即可    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;        // 转换结果右对齐    ADC_InitStructure.ADC_NbrOfChannel = 1;                           // 转换通道个数        ADC_Init(ADCx_1, &ADC_InitStructure);                        // 初始化ADC                RCC_ADCCLKConfig(RCC_PCLK2_Div8);                             // 配置ADC时钟PCLK2的8分频，即9MHz    // 配置ADC1 通道的转换顺序和采样时间    ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 1, ADC_SampleTime_239Cycles5);    ADC_DMACmd(ADC1, ENABLE);                                    // 使能ADC DMA 请求    // 由于没有采用外部触发，所以使用软件触发ADC转换     ADC_SoftwareStartConvCmd(ADCx_1, ENABLE);    ADC_Init(ADC2, &ADC_InitStructure);        // 配置ADC2 通道的转换顺序和采样时间    ADC_RegularChannelConfig(ADC2, ADC_Channel_14, 1, ADC_SampleTime_239Cycles5);      ADC_ExternalTrigConvCmd(ADC2, ENABLE);                        // 使能ADC2的外部触发转换</code></pre><p><strong>3)</strong> main()函数</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// ADC1转换的电压值通过MDA方式传到SRAM</span><span class="token keyword">extern</span> __IO uint32_t ADC_ConvertedValue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 局部变量，用于保存转换计算后的电压值      </span><span class="token keyword">float</span> ADC_ConvertedValueLocal<span class="token punctuation">[</span>NOFCHANEL<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            uint16_t temp0<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">,</span>temp1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">USART_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 默认已经完成了串口配置</span>    <span class="token function">ADCx_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// GPIO 初始化</span>    <span class="token function">ADCx_Mode_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// ADC 初始化</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n ----这是一个双ADC规则同步采集实验----\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取出ADC1数据寄存器的高16位，这个是ADC2的转换数据</span>    temp0 <span class="token operator">=</span> <span class="token punctuation">(</span>ADC_ConvertedValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0XFFFF0000</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取出ADC1数据寄存器的低16位，这个是ADC1的转换数据</span>    temp1 <span class="token operator">=</span> <span class="token punctuation">(</span>ADC_ConvertedValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0XFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> temp0<span class="token operator">/</span><span class="token number">4096</span><span class="token operator">*</span><span class="token number">3.3</span><span class="token punctuation">;</span>    ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> temp1<span class="token operator">/</span><span class="token number">4096</span><span class="token operator">*</span><span class="token number">3.3</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n ADCx_1 value = %f V \r\n"</span><span class="token punctuation">,</span> ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n ADCx_2 value = %f V \r\n"</span><span class="token punctuation">,</span> ADC_ConvertedValueLocal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10子系统Ubuntu使用经验</title>
      <link href="/other-1.html"/>
      <url>/other-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="Win10-子系统-Ubuntu-安装-Apache2-错误"><a href="#Win10-子系统-Ubuntu-安装-Apache2-错误" class="headerlink" title="Win10 子系统 Ubuntu 安装 Apache2 错误"></a>Win10 子系统 Ubuntu 安装 Apache2 错误</h2><p>安装好 Apache2 后，通过命令<code>service apache2 start</code>启动，报错为：</p><pre class=" language-shell"><code class="language-shell">AH00076: Failed to enable APR_TCP_DEFER_ACCEPT</code></pre><p>解决办法在 stackoverflow 上有，方法如下：</p><p><code>sudo vi</code> 打开 <code>/etc/apache2/apache2.conf</code>，在文件的最底部加上一行以下内容：</p><pre><code>AcceptFilter http none</code></pre><p>然后重启 Apache2 问题解决。</p><p>常用指令：</p><pre class=" language-shell"><code class="language-shell">update-rc.d apache2 defaults</code></pre><p>将apache2服务添加到自动启动程序组。</p><h2 id="通过源代码安装软件"><a href="#通过源代码安装软件" class="headerlink" title="通过源代码安装软件"></a>通过源代码安装软件</h2><ul><li><p>使用压缩包管理工具解压缩软件包</p></li><li><p>进入到解压缩文件所在的目录</p></li><li><p>执行指令：</p><pre class=" language-shell"><code class="language-shell">./configuremakeinstall</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10子系统Ubuntu下配置Jupyter Notebook并实现内网穿透</title>
      <link href="/jupyter.html"/>
      <url>/jupyter.html</url>
      
        <content type="html"><![CDATA[<p>之前看到有朋友在服务器上，搭建了<a href="https://jupyter.org/" target="_blank" rel="noopener">Jupyter Notebook</a>（一个笔记本，支持多种编程语言），觉得挺好的，自己也想弄个用用，无奈没有服务器，只好另寻他径。</p><h2 id="启用Win10子系统"><a href="#启用Win10子系统" class="headerlink" title="启用Win10子系统"></a>启用Win10子系统</h2><p>网络上有很多教程，就不赘述了:</p><ul><li><a href="手把手教你启用Win10的Linux子系统">手把手教你启用Win10的Linux子系统</a></li><li><a href="https://www.jianshu.com/p/c3025989c28c" target="_blank" rel="noopener">Win10上体验Linux子系统–Linux虚拟机的完美替代方案</a></li></ul><h2 id="安装Jupyter-Notebook"><a href="#安装Jupyter-Notebook" class="headerlink" title="安装Jupyter Notebook"></a>安装Jupyter Notebook</h2><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在子系统中选择用python来安装jupyter，因为Ubuntu自带了python3</p><ol><li><p>将pip升级到最新版本</p><pre class=" language-python"><code class="language-python">pip3 install <span class="token operator">-</span><span class="token operator">-</span>upgrade pip</code></pre></li><li><p>安装Jupyter Notebook</p><pre><code>pip3 install jupyter</code></pre></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置的过程中如有疑问，请查阅官方文档，命令如下：</p><pre class=" language-shell"><code class="language-shell">jupyter notebook --help</code></pre><h4 id="默认端口启动"><a href="#默认端口启动" class="headerlink" title="默认端口启动"></a>默认端口启动</h4><p>安装完成后，在终端输入命令：</p><pre class=" language-shell"><code class="language-shell">jupyter notebook</code></pre><p>执行命令后，在终端中会有一些提示信息：</p><pre class=" language-shell"><code class="language-shell">[I 00:09:44.222 NotebookApp] Serving notebooks from local directory: /home/mahoo12138[I 00:09:44.223 NotebookApp] The Jupyter Notebook is running at:[I 00:09:44.224 NotebookApp] http://localhost:8888/[I 00:09:44.225 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).</code></pre><ul><li>注意：之后在Jupyter Notebook的所有操作，都请保持终端<strong>不要关闭</strong>，因为一旦关闭终端，就会断开与本地服务器的链接，jupyter notebook也就关闭了。</li><li>此时在浏览器中打开<strong><code>http://localhost:8888</code></strong>，即可看到jupyter notebook</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/jupyter/localhost.png" alt=""></p><h4 id="指定端口启动"><a href="#指定端口启动" class="headerlink" title="指定端口启动"></a>指定端口启动</h4><p>如果你想指定端口启动，可输入以下命令：</p><pre class=" language-shell"><code class="language-shell">jupyter notebook --port <port_number></code></pre><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><ul><li><p>终端修改</p><ul><li><p>生成配置文件</p><pre class=" language-shell"><code class="language-shell">jupyter notebook --generate-config</code></pre></li><li><p>生成密码</p><pre class=" language-shell"><code class="language-shell">jupyter notebook password</code></pre><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/jupyter/password.png" alt=""></p></li></ul></li><li><p>文件修改</p><ul><li>Win10子系统Ubuntu的目录在<em>C:\Users\用户名\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\home</em></li></ul><p>在<strong>home</strong>中打开<em>Ubuntu用户名</em> \ .jupyter\jupyter_notebook_config.py文件，如果你准备远程访问，可以定位到<em>c.NotebookApp.allow_remote_access</em>，删除<strong>#</strong>，修改值为<strong>True</strong></p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/jupyter/allow_amote_access.png" alt=""></p></li></ul><h2 id="远程访问Jupyter-Notebook"><a href="#远程访问Jupyter-Notebook" class="headerlink" title="远程访问Jupyter Notebook"></a>远程访问Jupyter Notebook</h2><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>由于是在本地搭建的jupyter Notebook，在外网上是访问不了的，如果想远程访问的话，需要内网穿透，这里推荐使用<strong><a href="https://natapp.cn/" target="_blank" rel="noopener">NATAPPP</a></strong>，注册后会有两条免费的隧道使用，配置如图：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/jupyter/natapp.png" alt=""></p><ul><li><p>之后下载客户端：<a href="https://natapp.cn/#download" target="_blank" rel="noopener">直达链接</a></p></li><li><p>打开客户端，输入<em>natapp -authtoken=(之前复制的字符)</em>，回车</p><pre><code>natapp -authtoken=255bf538d7b773f6</code></pre><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/jupyter/natapp_ok.png" alt=""></p></li></ul><p>图中的地址就是外网访问地址了，当然要保持Ubuntu子系统客户端和Natapp客户端同时运行，jupyter notebook才能打开，还有一个体验极差的设置，免费的内网穿透隧道会不定时更换地址，如果真的需要长时间运行，付费版才是王道。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter Notebook </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盘点C语言中你不知道的小细节</title>
      <link href="/c-cpp-3.html"/>
      <url>/c-cpp-3.html</url>
      
        <content type="html"><![CDATA[<h2 id="0UL-1UL"><a href="#0UL-1UL" class="headerlink" title="0UL/1UL"></a>0UL/1UL</h2><p><strong>0UL 表示 无符号长整型     0<br>1UL 表示 无符号长整型     1</strong></p><p>一般的 <strong>1</strong> 没有后缀，系统默认指定的类型为<code>int</code>，即有符号的整型数。</p><p>除此之外还可以将<code>l</code>，<code>u</code>自由组合形成多种后缀（不区分大小写），单独添加也没问题，例如：==2u，3lu，4Lu==。</p><p>主要的作用，我只在keil编译中遇到过，在宏定义中将<code>1 &lt;&lt; 16</code>这类操作，默认的是有符号的，需要将 1 改成 1ul 无符号长整型。</p><p>参考自：<a href="https://blog.csdn.net/qq1987924/article/details/11369063" target="_blank" rel="noopener">c语言中的0UL或1UL是什么意思</a></p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>首先我们来看volatile在维基百科中的一些简介，有个大概的了解：</p><blockquote><p> 在程序设计中，尤其是在C语言、C++、C#和Java语言中，使用volatile关键字声明的变量或对象通常具有与优化、多线程相关的特殊属性。通常，<strong>volatile</strong>关键字用来阻止（伪）编译器认为的无法“被代码本身”改变的代码（变量/对象）进行优化。如在C语言中，<strong>volatile</strong>关键字可以用来提醒编译器它后面所定义的变量随时有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，都会直接从变量地址中读取数据。如果没有volatile关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，如果这个变量由别的程序更新了的话，将出现不一致的现象。 </p></blockquote><p>当用volatile声明变量时，则表示该变量随时可能发生变化，避免因为编译器对代码优化导致读脏数据，例如</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> 一个执行优化的编译器会提示没有代码能修改<code>a</code>的值，并假设它永远都只会是<code>0</code>。因此编译器将用类似==while (true);==的无限循环替换函数体；但是<code>a</code>可能指向一个随时都能被计算机系统其他部分修改的地址，例如CPU的硬件寄存器， 上面的代码永远检测不到这样的修改。如果不使用volatile关键字，编译器将假设当前程序是系统中唯一能改变这个值部分。 为了阻止编译器像上面那样优化代码，需要使用volatile关键字： </p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span></code></pre><p> 这样修改以后循环条件就不会被优化掉，当值改变的时候系统将会检测到。</p><h3 id="参考自：Volatile变量"><a href="#参考自：Volatile变量" class="headerlink" title="参考自：Volatile变量"></a>参考自：<a href="https://zh.wikipedia.org/zh-hans/Volatile变量" target="_blank" rel="noopener">Volatile变量</a></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32的SysTick定时器初体验</title>
      <link href="/stm32-3.html"/>
      <url>/stm32-3.html</url>
      
        <content type="html"><![CDATA[<p>注：本文属博主学习时所作笔记，内容源大参考于野火的《零死角玩转STM32F103》以及部分网络资料，笔记内容仅作为自己参考，免去频繁查询参考手册的麻烦，如有错误，还请指出！</p><h2 id="SysTick介绍"><a href="#SysTick介绍" class="headerlink" title="SysTick介绍"></a>SysTick介绍</h2><p>SysTick 属于CM3内核的外设，它可以产生非常精确的延时，一般用于操作系统，用于产生一个单独的时钟节拍，相当于操作系统的心脏。</p><p>SysTick是一个24bit的向下递减的计数器，计数器每计数一次的时间为$1 \over SYSCLK$，Stm32中一般设置系统时钟为72M。当重载数值寄存器递减到0时，系统定时器则会产生中断。</p><p>SysTick—系统定时器有 4 个寄存器，一般配置时，大多操作前三个。</p><table><thead><tr><th align="center">寄存器名称</th><th align="center">寄存器描述</th></tr></thead><tbody><tr><td align="center">CTRL</td><td align="center">SysTick 控制及状态寄存器</td></tr><tr><td align="center">LOAD</td><td align="center">SysTick 重装载数值寄存器</td></tr><tr><td align="center">VAL</td><td align="center">SysTick 当前数值寄存器</td></tr><tr><td align="center">CALIB</td><td align="center">SysTick 校准数值寄存器</td></tr></tbody></table><ul><li><p><font size="4"><strong>CTRL</strong></font></p><table><thead><tr><th align="center">位段</th><th align="center">名称</th><th align="center">类型</th><th align="center">复位值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">16</td><td align="center">COUNTFLAG</td><td align="center">R/W</td><td align="center">0</td><td align="left">如果在上次读取本寄存器后， SysTick 已经计到了 0，则该位为 1。</td></tr><tr><td align="center">2</td><td align="center">CLKSOURCE</td><td align="center">R/W</td><td align="center">0</td><td align="left">时钟源选择位，0=AHB/8，1=处理器时钟 AHB</td></tr><tr><td align="center">1</td><td align="center">TICKINT</td><td align="center">R/W</td><td align="center">0</td><td align="left">1=SysTick 倒数计数到 0 时产生 SysTick 异常请<br>求，0=数到 0 时无动作。也可以通过读取<br>COUNTFLAG 标志位来确定计数器是否递减到0。</td></tr><tr><td align="center">0</td><td align="center">ENABLE</td><td align="center">R/W</td><td align="center">0</td><td align="left">SysTick 定时器的使能位</td></tr></tbody></table></li><li><p><font size="4"><strong>LOAD</strong></font></p><table><thead><tr><th align="center">位段</th><th align="center">名称</th><th align="center">类型</th><th align="center">复位值</th><th>描述</th></tr></thead><tbody><tr><td align="center">23:0</td><td align="center">RELOAD</td><td align="center">R/W</td><td align="center">0</td><td>当倒数计数至零时，将被重装载的值</td></tr></tbody></table></li><li><p><font size="4"><strong>VAL</strong></font></p><table><thead><tr><th align="center">位段</th><th align="center">名称</th><th align="center">类型</th><th align="center">复位值</th><th>描述</th></tr></thead><tbody><tr><td align="center">23:0</td><td align="center">CURRENT</td><td align="center">R/W</td><td align="center">0</td><td>读取时返回当前倒计数的值，写它则使之清零，<br>同时还会清除在 SysTick 控制及状态寄存器中的 COUNTFLAG 标志。</td></tr></tbody></table></li></ul><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> __INLINE uint32_t <span class="token function">SysTick_Config</span><span class="token punctuation">(</span>uint32_t ticks<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>ticks <span class="token operator">></span> SysTick_LOAD_RELOAD_Msk<span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true">/* 重装载值判断 */</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 SysTick<span class="token operator">-></span>LOAD  <span class="token operator">=</span> <span class="token punctuation">(</span>ticks <span class="token operator">&amp;</span> SysTick_LOAD_RELOAD_Msk<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* 设置重装载寄存器 */</span>  <span class="token function">NVIC_SetPriority</span> <span class="token punctuation">(</span>SysTick_IRQn<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>__NVIC_PRIO_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 设置中断优先级 __NVIC_PRIO_BITS为4 */</span>  SysTick<span class="token operator">-></span>VAL   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                           <span class="token comment" spellcheck="true">/* 设置当前数值寄存器 */</span>  SysTick<span class="token operator">-></span>CTRL  <span class="token operator">=</span> SysTick_CTRL_CLKSOURCE_Msk <span class="token operator">|</span>                 <span class="token comment" spellcheck="true">/* 设置系统定时器的时钟源为 AHBCLK=72M */</span>                   SysTick_CTRL_TICKINT_Msk   <span class="token operator">|</span>                 <span class="token comment" spellcheck="true">/* 使能系统定时器中断 */</span>                   SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/* 使能定时器 */</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                 <span class="token punctuation">}</span></code></pre><p>固件库编程时，我们通过<code>SysTick_Config()</code>配置系统定时器，形参 ticks 用来设置重装载寄存器的值，最大不能超过重装载寄存器的值$2^{24}$，固件库中的宏定义提供了我们参考值：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SYSCLK_FREQ_72MHz  72000000</span>uint32_t SystemCoreClock <span class="token operator">=</span> SYSCLK_FREQ_72MHz<span class="token punctuation">;</span><span class="token function">SysTick_Config</span><span class="token punctuation">(</span>SystemFrequency <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1ms中断一次</span><span class="token function">SysTick_Config</span><span class="token punctuation">(</span>SystemFrequency <span class="token operator">/</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//10us中断一次</span><span class="token function">SysTick_Config</span><span class="token punctuation">(</span>SystemFrequency <span class="token operator">/</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//1us中断一次</span></code></pre><h2 id="延时函数设计"><a href="#延时函数设计" class="headerlink" title="延时函数设计"></a>延时函数设计</h2><ul><li><p>无中断函数类型延时</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//微秒级延时</span><span class="token keyword">void</span> <span class="token function">Systick_Delay_us</span><span class="token punctuation">(</span>uint32_t us<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t i<span class="token punctuation">;</span>    <span class="token function">SysTick_Config</span><span class="token punctuation">(</span>SystemFrequency <span class="token operator">/</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1us中断一次</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>us<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SysTick<span class="token operator">-></span>CTRL<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取16位COUNTFLAG，定时器一个中断周期1us结束while循环</span>    <span class="token punctuation">}</span>     SysTick<span class="token operator">-></span>CTRL <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭SysTick定时器</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//毫秒级延时</span><span class="token keyword">void</span> <span class="token function">Systick_Delay_ms</span><span class="token punctuation">(</span>uint32_t ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint32_t i<span class="token punctuation">;</span>    <span class="token function">SysTick_Config</span><span class="token punctuation">(</span>SystemFrequency <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1us中断一次</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>us<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SysTick<span class="token operator">-></span>CTRL<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取16位COUNTFLAG，定时器一个中断周期1ms结束while循环</span>    <span class="token punctuation">}</span>     SysTick<span class="token operator">-></span>CTRL <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭SysTick定时器</span><span class="token punctuation">}</span></code></pre></li><li><p>含中断函数类型延时</p></li></ul><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//固件库宏定义</span><span class="token macro property">#<span class="token directive keyword">define</span>    __IO    volatile        </span><span class="token comment" spellcheck="true">/*!&lt; defines 'read / write' permissions   */</span><span class="token keyword">static</span> __IO uint32_t TimingDelay<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Delay_us</span><span class="token punctuation">(</span>__IO uint32_t nTime<span class="token punctuation">)</span><span class="token punctuation">{</span>     TimingDelay <span class="token operator">=</span> nTime<span class="token punctuation">;</span>           SysTick<span class="token operator">-></span>CTRL <span class="token operator">|</span><span class="token operator">=</span>  SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使能SysTick定时器</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>TimingDelay <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">SysTick_Config</span><span class="token punctuation">(</span>SystemCoreClock <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//1ms中断一次,计数周期为1ms</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">//防止定时器配置错误产生一些未知的连锁的错误</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TimingDelay_Decrement</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TimingDelay <span class="token operator">!=</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断是否计时结束</span>          TimingDelay<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//文件stm32f10x_it.c内</span><span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">TimingDelay_Decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><blockquote><p>有关<strong>volatile</strong>的细节可参考我的这篇博文：<a href="">盘点C语言中你不知道的小细节</a>，技术尚浅，仅供参考</p></blockquote><p>  需要延时的时候，我们可以调用函数<code>Delay_us()</code>并传入具体的参数， 当然之前还需要对SysTick进行初始化，将参数传给全局变量<code>TimingDelay</code>，当一个计数递减周期完成，产生异常（中断），自动调用中断服务函数<code>SysTick_Handler(void)</code>，这个函数我们可以在文件==stm32f10x_it.c==中编程，再声明一个函数用于控制多少个计时周期，每完成一个计时周期减一，直至延时完成。</p><p>  延时实例：</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">SysTick_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计时器初始化</span>      <span class="token function">Delay_us</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//延时1000ms，1s</span>      <span class="token punctuation">{</span>    <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//用户代码</span>  <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo个人博客SEO优化指南</title>
      <link href="/hexo-2.html"/>
      <url>/hexo-2.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装sitemap"><a href="#安装sitemap" class="headerlink" title="安装sitemap"></a>安装sitemap</h2><ol><li><p>Windows环境下直接在博客根目录打开<code>Git Bash</code>，运行命令：</p><pre class=" language-shell"><code class="language-shell"> npm install hexo-generator-sitemap --save  # sitemap.xml    提交给谷歌搜素引擎 npm install hexo-generator-baidu-sitemap --save  # baidusitemap.xml    提交百度搜索引擎</code></pre></li><li><p>在站点配置文件<code>_config.yml</code>中添加以下代码：</p><pre><code>Plugins:- hexo-generator-baidu-sitemap- hexo-generator-sitemapbaidusitemap:   path: baidusitemap.xmlsitemap:   path: sitemap.xml</code></pre></li><li><p>修改站点配置文件<code>_config.yml</code>，添加<code>url</code>，其次就是Hexo文章默认的链接是<code>:year/:month/:day/:title/</code>这样的链接对SEO十分不友好，所以应改成<code>title.html</code>格式：</p><pre class=" language-shell"><code class="language-shell"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://mahoo12138.github.iopermalink: :title.htmlpermalink_defaults:</code></pre></li><li><p>Hexo编译，提交站长平台</p><p><code>Hexo g &amp;&amp; hexo d</code>后会在/public目录下生成<code>sitemap.xml</code>和<code>baidusitemap.xml</code>，这就是站点地图。 之后就可以提交到各大站长平台了。</p></li></ol><h2 id="添加关键词"><a href="#添加关键词" class="headerlink" title="添加关键词"></a>添加关键词</h2><h3 id="站点关键词"><a href="#站点关键词" class="headerlink" title="站点关键词"></a>站点关键词</h3><p> 在博客根目录下找到<code>_config.yml</code>文件，在所示地方添加<code>keywords: 关键字1,关键字2,关键字3…</code>，采用<code>英文逗号</code>隔开，注意<code>keywords</code>与<code>关键词</code>之间的<code>空格</code>。 </p><pre><code>title: Mahoo Blogsubtitle: 记录技术成长的每一瞬间description: 一切的恐惧都来源于无知！keywords: 老黄博客,Mahoo Blog,Stm32,Mahoo,Mahoo12138author: Mahoo Huanglanguage: zh-CN</code></pre><h3 id="文章关键词"><a href="#文章关键词" class="headerlink" title="文章关键词"></a>文章关键词</h3><p> 打开主题路径内的<code>head.ejs</code>文件，不同主题所在路径和文件都可能不同，Next主题是 <code>head.swig</code>，我的主题是<code>head.ejs</code>，添加如下代码：</p><pre class=" language-html"><code class="language-html"># next theme   head.swig{% if page.keywords %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ page.keywords }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{% elif page.tags and page.tags.length %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% for tag in page.tags %}{{ tag.name }},{% endfor %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{% elif theme.keywords %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ theme.keywords }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{% endif %}# matery theme    head.ejs <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(page.keywords){</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- page.keywords %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">else</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.keywords){</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- theme.keywords %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>添加上述代码后，主要是检测文章内是否有关键词，之后还要在<code>\scaffolds\post.md</code>中 添加：</p><pre><code>keywords: </code></pre><p> 就可以在新写的文件里添加keyword，格式为[keyword1,keyword2,keyword3] 。</p><h2 id="配置robots-txt"><a href="#配置robots-txt" class="headerlink" title="配置robots.txt"></a>配置robots.txt</h2><blockquote><p> <strong>robots.txt</strong>（统一小写）是一种存放于<a href="https://zh.wikipedia.org/wiki/网站" target="_blank" rel="noopener">网站</a>根目录下的<a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII</a>编码的<a href="https://zh.wikipedia.org/wiki/文本文件" target="_blank" rel="noopener">文本文件</a>，它通常告诉网络<a href="https://zh.wikipedia.org/wiki/搜索引擎" target="_blank" rel="noopener">搜索引擎</a>的漫游器（又称<a href="https://zh.wikipedia.org/wiki/网络蜘蛛" target="_blank" rel="noopener">网络蜘蛛</a>），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots<a href="https://zh.wikipedia.org/wiki/元数据" target="_blank" rel="noopener">元数据</a>（Metadata，又称元资料） 。</p></blockquote><p>简单来说，它就是网站和爬虫之间的协议，规定了哪些文件可以访问，哪些文件禁止访问。</p><p>在博客根目录下的<code>source</code>新建<code>robots.txt</code>写入：</p><pre><code>User-agent: *Allow: /Allow: /home/Allow: /archives/Allow: /about/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Sitemap: http://lansus.coding.me/sitemap.xmlSitemap: http://lansus.coding.me/baidusitemap.xml</code></pre><p> 在编译后这个文件会出现在<code>blog/public</code>中 ，控制的就是该目录下的文件。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小记C语言中的宏定义及条件编译</title>
      <link href="/c-cpp-5.html"/>
      <url>/c-cpp-5.html</url>
      
        <content type="html"><![CDATA[<h2 id="普通宏定义"><a href="#普通宏定义" class="headerlink" title="普通宏定义"></a>普通宏定义</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> PI 3.14</span><span class="token macro property">#<span class="token directive keyword">define</span> a (1+2)                </span><span class="token comment" spellcheck="true">//添加括号使语义表达更清楚</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s:%d"</span><span class="token punctuation">,</span><span class="token string">"PI"</span><span class="token punctuation">,</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//引号中的宏定义不会被替换，输出：PI:3.14</span><span class="token macro property">#<span class="token directive keyword">undef</span> PI                    </span><span class="token comment" spellcheck="true">//取消PI的宏定义</span><span class="token macro property">#<span class="token directive keyword">define</span> 1111 F                </span><span class="token comment" spellcheck="true">//报错，宏定义起始位不能为数字</span><span class="token macro property">#<span class="token directive keyword">define</span> word "apple            </span><span class="token comment" spellcheck="true">//宏定义中引号必须成对出现</span><span class="token macro property">#<span class="token directive keyword">define</span> char ‘a</span></code></pre><h2 id="带参数的宏定义"><a href="#带参数的宏定义" class="headerlink" title="带参数的宏定义"></a>带参数的宏定义</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAX(a,b)    (a>b ? a:b)</span><span class="token macro property">#<span class="token directive keyword">define</span> MIN(a,b)    (a&lt;b ? a:b)</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当宏定义需要多行的代码时，可以用<code>\</code>来连接：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SWAP(a,b)   {\    int t = 0;  \    t = a;  \    a = b;  \    b = t;  \}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">SWAP</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="宏定义中的特殊符号"><a href="#宏定义中的特殊符号" class="headerlink" title="宏定义中的特殊符号"></a>宏定义中的特殊符号</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> TOSTRING(a)        #a</span><span class="token macro property">#<span class="token directive keyword">define</span> CONNECT(a,b)    a##b</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str0 <span class="token operator">=</span> <span class="token function">TOSTRING</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str1 <span class="token operator">=</span> <span class="token function">CONNECT</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="宏定义实现条件编译"><a href="#宏定义实现条件编译" class="headerlink" title="宏定义实现条件编译"></a>宏定义实现条件编译</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a><strong>基本用法</strong></h3><p>条件编译的控制与<code>if-else</code>语句相似，只不过控制的是是否将其后的代码段进行编译。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">if</span> (判断条件)</span>    <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">if</span> (判断条件1)</span>    <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">elif</span> (判断条件2)</span>    <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><p><code>if define</code>等价于<code>ifdef</code>，<code>ifndef</code>等价于<code>if !define()</code>：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">if</span> defined(PI)  </span><span class="token comment" spellcheck="true">//  如果前面已经定义过PI这个宏，就将code编译进去。</span>    <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">if</span> defined(PI)  </span><span class="token comment" spellcheck="true">//  如果前面没有定义过PI这个宏，就将code编译进去。</span>    <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h3 id="防止头文件重复引入"><a href="#防止头文件重复引入" class="headerlink" title="防止头文件重复引入"></a>防止头文件重复引入</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _HEADER        </span><span class="token comment" spellcheck="true">//_HEADER为自定义的名称</span><span class="token macro property">#<span class="token directive keyword">define</span> _HEADER</span>    <span class="token comment" spellcheck="true">/*头文件其余内容*/</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解STM32的八种输入输出模式</title>
      <link href="/stm32-1.html"/>
      <url>/stm32-1.html</url>
      
        <content type="html"><![CDATA[<p>注：本文属博主学习时所作笔记，内容源大参考于野火的《零死角玩转STM32F103》以及部分网络资料，笔记内容仅作为自己参考，免去频繁查询参考手册的麻烦，如有错误，还请指出！</p><h2 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h2><ul><li><p><strong>上拉输入（GPIO_Mode_IPU）</strong></p><p>上拉即把电位提高，也就是在信号进入芯片后加上一个上拉电阻，将不确定的信号锁在高电位，同时电阻还起到了限流的作用。</p></li><li><p><strong>下拉输入（GPIO_Mode_IPD）</strong></p><p>下拉同理</p></li><li><p><strong>模拟输入（GPIO_Mode_AIN）</strong></p><p> 信号进入后不经过上拉电阻或者下拉电阻，关闭施密特触发器，经由另一线路把电压信号传送到片上外设模块。 </p></li><li><p><strong>浮空输入（GPIO_Mode_IN_FLOATING）</strong></p><p>信号进入芯片内部后，既没有接上拉电阻也没有接下拉电阻，经由触发器输入。</p><p>配置成这个模式后，用电压变量引脚电压为1点几伏，<strong>这是个不确定值</strong>，完全由外部的输入决定，一般接按键的时候用的是这个模式。由于其输入阻抗比较大，一般也可以把这种模式用于标准的通讯协议，比如IIC、USART等。  如果在该引脚悬空（在无信号输入）的情况下，读取该端口的电平是不确定的。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/GPIO.png" alt=""></p><h2 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h2><ul><li><p><strong>普通推挽输出（GPIO_Mode_Out_PP）</strong></p><p>推挽输出模式下，通过配置<code>位设置/清除寄存器</code>或者输出数据寄存器的值，途经P-MOS管和N-MOS管，最终输出到I/O端口。这里要注意P-MOS管和N-MOS管，</p><p>当设置输出的值为高电平的时候，P-MOS管处于开启状态，N-MOS管处于关闭状态，此时I/O端口的电平就由P-MOS管决定：高电平；</p><p>当设置输出的值为低电平的时候，P-MOS管处于关闭状态，N-MOS管处于开启状态，此时I/O端口的电平就由N-MOS管决定：低电平。</p><p><u>同时，I/O端口的电平也可以通过输入电路进行读取；注意，此时I/O端口的电平一定是输出的电平。</u></p></li><li><p><strong>复用推挽输出（GPIO_Mode_AF_PP）</strong></p><p>推挽复用输出模式，与推挽输出模式很是类似。只是输出的高低电平的来源，不是让CPU直接写输出数据寄存器，取而代之利用片上外设模块的复用功能输出来决定的。 </p></li><li><p><strong>普通开漏输出（GPIO_Mode_Out_OD）</strong></p><p>开漏输出模式下，通过配置<code>位设置/清除寄存器</code>或者输出数据寄存器的值，途经N-MOS管，最终输出到I/O端口。这里要注意N-MOS管，当设置输出的值为高电平的时候，N-MOS管处于关闭状态，此时I/O端口的电平就不会由输出的高低电平决定，而是由I/O端口外部的上拉或者下拉决定；当设置输出的值为低电平的时候，N-MOS管处于开启状态，此时I/O端口的电平就是低电平。同时，I/O端口的电平也可以通过输入电路进行读取；注意，I/O端口的电平不一定是输出的电平。</p></li><li><p><strong>复用开漏输出（GPIO_Mode_AF_OD）</strong></p><p>开漏复用输出模式，与开漏输出模式很是类似。只是输出的高低电平的来源，不是让CPU直接写输出数据寄存器，取而代之利用片上外设模块的复用功能输出来决定的。 </p></li></ul><h2 id="难点分析"><a href="#难点分析" class="headerlink" title="难点分析"></a>难点分析</h2><ul><li><p>推挽结构和推挽电路</p><p> 推挽结构一般是指<strong>两个参数相同的三极管或MOS管分别受两互补信号的控制，总是在一个三极管或MOS管导通的时候另一个截止。高低电平由输出电平决定。</strong> </p><p> 推挽电路是两个参数相同的三极管或MOSFET，以推挽方式存在于电路中，各负责正负半周的波形放大任务。电路工作时，两只对称的功率开关管每次只有一个导通，所以导通损耗小、效率高。输出既可以向负载灌电流，也可以从负载抽取电流。推拉式输出级既提高电路的负载能力，又提高开关速度。 </p></li><li><p>开漏输出和推挽输出的区别 </p><ul><li><strong>开漏输出：只可以输出强低电平，高电平得靠外部电阻拉高。输出端相当于三极管的集电极。适合于做电流型的驱动，其吸收电流的能力相对强(一般20ma以内)；</strong></li><li><strong>推挽输出:可以输出强高、低电平，连接数字器件。</strong></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/Push-Pull.png" alt=""></p><p> 该图中左边的便是推挽输出模式，其中比较器输出高电平时下面的PNP三极管截止，而上面NPN三极管导通，输出电平VS+；当比较器输出低电平时则恰恰相反，PNP三极管导通，输出和地相连，为低电平。右边的则可以理解为开漏输出形式，需要接上拉。</p><ul><li>STM32中选用怎样选择I/O模式<ul><li>浮空输入IN_FLOATING ——浮空输入，可以做KEY识别，RX1_</li><li>带上拉输入IPU——IO内部上拉电阻输入</li><li>带下拉输入IPD—— IO内部下拉电阻输入</li><li>模拟输入AIN ——应用ADC模拟输入，或者低功耗下省电</li><li>开漏输出OUT_OD ——IO输出0接GND，IO输出1，悬空，需要外接上拉电阻，才能实现输出高电平。当输出为1时，IO口的状态由上拉电阻拉高电平，但由于是开漏输出模式，这样IO口也就可以由外部电路改变为低电平或不变。可以读IO输入电平变化，实现C51的IO双向功能</li><li>推挽输出OUT_PP ——IO输出0-接GND， IO输出1 -接VCC，读输入值是未知的</li><li>复用功能的推挽输出_AF_PP ——片内外设功能（I2C的SCL、SDA）</li><li>复用功能的开漏输出_AF_OD——片内外设功能（TX1、MOSI、MISO.SCK.SS）</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32的中断优先级及中断编程</title>
      <link href="/stm32-2.html"/>
      <url>/stm32-2.html</url>
      
        <content type="html"><![CDATA[<p>注：本文属博主学习时所作笔记，内容源大参考于野火的《零死角玩转STM32F103》以及部分网络资料，笔记内容仅作为自己参考，免去频繁查询参考手册的麻烦，如有错误，还请指出！</p><h2 id="中断优先级"><a href="#中断优先级" class="headerlink" title="中断优先级"></a>中断优先级</h2><p>在STM32中，由内核外设<code>NVIC（嵌套向量中断控制器）</code>控制着整个芯片中断的相关功能，在 NVIC 中有一个<code>IPR寄存器</code>用来配置外部中断的优先级，宽度为8bit，在F103只使用了高4bit。</p><p>优先级分组由另一个内核外设<code>SCB（系统控制块）</code>的<code>AIRCR（应用程序中断及复位寄存器）</code>的PRIGROUP的[10:8]位决定，</p><table><thead><tr><th align="center">组</th><th align="center">AIRCR</th><th align="center">分配情况[7:4]</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">111</td><td align="center">0 : 4</td><td align="center">抢占优先级0位，4位响应优先级</td></tr><tr><td align="center">1</td><td align="center">110</td><td align="center">1 : 3</td><td align="center">抢占优先级1位，3位响应优先级</td></tr><tr><td align="center">2</td><td align="center">101</td><td align="center">2 : 2</td><td align="center">抢占优先级2位，2位响应优先级</td></tr><tr><td align="center">3</td><td align="center">100</td><td align="center">3 : 1</td><td align="center">抢占优先级3位，1位响应优先级</td></tr><tr><td align="center">4</td><td align="center">011</td><td align="center">4 : 0</td><td align="center">抢占优先级4位，0位响应优先级</td></tr></tbody></table><p>从上表来看，当设置为组3时，每个中断优先寄存器的高四位中，前高三位为抢占优先级，低一位是响应优先级。即可设置抢占优先级别为0~7，响应优先级别为1/0。</p><p>当然，抢占优先级是高于响应优先级的，数值越小所代表的优先级也越高；抢占优先级顾名思义为级别高的优先级可以打断级别低的，而抢占优先级相同的情况下，响应优先级高的，则先响应，但是不能打断低的响应优先级，响应表现的是响应的速度。</p><p>当两个优先级都相同的时候，这时候就根据中断向量表中编号判断优先级。</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/it_list.png" alt="it_list"></p><h2 id="中断例程"><a href="#中断例程" class="headerlink" title="中断例程"></a>中断例程</h2><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/STM32/interupt.png" alt="原理图"></p><p>例程规划的是设置KEY1，KEY2为外部中断，当触发中断后，中断服务函数将两个LED的状态反转，</p><h3 id="初始化GPIO"><a href="#初始化GPIO" class="headerlink" title="初始化GPIO"></a>初始化GPIO</h3><p>首先将LED所在的GPIO初始化，具体操作封装在函数<code>LED_GPIO_Config()</code>内：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*定义一个GPIO_InitTypeDef类型的结构体*/</span>GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*开启LED相关的GPIO外设时钟*/</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span> LED1_GPIO_CLK <span class="token operator">|</span> LED2_GPIO_CLK <span class="token operator">|</span> LED3_GPIO_CLK<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*选择要控制的GPIO引脚*/</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_5<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*设置引脚模式为通用推挽输出*/</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*设置引脚速率为50MHz */</span>   GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*调用库函数，初始化GPIO*/</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*选择要控制的GPIO引脚*/</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*调用库函数，初始化GPIO*/</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*选择要控制的GPIO引脚*/</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*调用库函数，初始化GPIOF*/</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 关闭所有led灯    */</span><span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="初始化EXTI"><a href="#初始化EXTI" class="headerlink" title="初始化EXTI"></a>初始化EXTI</h3><p>具体的操作都封装在函数<code>EXTI_Key_Config()</code>内：</p><pre class=" language-c"><code class="language-c">GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span> EXTI_InitTypeDef EXTI_InitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*开启按键GPIO口的时钟*/</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token operator">|</span>RCC_APB2Periph_AFIO<span class="token punctuation">)</span><span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 配置 NVIC 中断*/</span><span class="token function">NVIC_Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*--------------------------KEY1配置-----------------------------*/</span><span class="token comment" spellcheck="true">/* 选择按键用到的GPIO */</span>     GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 配置为浮空输入 */</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 选择EXTI的信号源 */</span><span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>GPIO_PortSourceGPIOA<span class="token punctuation">,</span> GPIO_PinSource0<span class="token punctuation">)</span><span class="token punctuation">;</span> EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line <span class="token operator">=</span> EXTI_Line0<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* EXTI为中断模式 */</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode <span class="token operator">=</span> EXTI_Mode_Interrupt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 上升沿中断 */</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger <span class="token operator">=</span> EXTI_Trigger_Rising<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使能中断 */</span>    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span><span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*--------------------------KEY2配置-----------------------------*/</span><span class="token comment" spellcheck="true">/* 选择按键用到的GPIO */</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_13<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 配置为浮空输入 */</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IN_FLOATING<span class="token punctuation">;</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 选择EXTI的信号源 */</span><span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>GPIO_PortSourceGPIOC<span class="token punctuation">,</span> GPIO_PinSource13<span class="token punctuation">)</span><span class="token punctuation">;</span> EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line <span class="token operator">=</span> EXTI_Line13<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* EXTI为中断模式 */</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode <span class="token operator">=</span> EXTI_Mode_Interrupt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 下降沿中断 */</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger <span class="token operator">=</span> EXTI_Trigger_Falling<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使能中断 */</span>    EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span><span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="配置NVTI中断"><a href="#配置NVTI中断" class="headerlink" title="配置NVTI中断"></a>配置NVTI中断</h4><p>==NVIC_Configuration()==</p><pre class=" language-c"><code class="language-c">NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 配置NVIC为优先级组1 */</span><span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 配置中断源：按键1 */</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> EXTI0_IRQn<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 配置抢占优先级 */</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 配置子优先级 */</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使能中断通道 */</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span><span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 配置中断源：按键2，其他使用上面相关配置 */</span>  NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> EXTI15_10_IRQn<span class="token punctuation">;</span><span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="中断服务函数"><a href="#中断服务函数" class="headerlink" title="中断服务函数"></a>中断服务函数</h3><p>上述初始化操作完成后，则在文件<code>stm32f10x_it.c</code>中编写中断服务函数了，编写中断服务函数，要对应其中断信号源，例如按键key1的中断源为<code>EXTI0_IRQn</code>，对应的中断服务函数则为<code>EXTI0_IRQHandler</code>。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* 定义控制IO的宏 */</span><span class="token macro property">#<span class="token directive keyword">define</span> digitalToggle(p,i) {p->ODR ^=i;} </span><span class="token comment" spellcheck="true">//输出反转状态</span><span class="token macro property">#<span class="token directive keyword">define</span> LED1_TOGGLE         digitalToggle(GPIOB,GPIO_Pin_5)</span><span class="token macro property">#<span class="token directive keyword">define</span> LED2_TOGGLE         digitalToggle(GPIOB,GPIO_Pin_0)</span><span class="token keyword">void</span> <span class="token function">EXTI0_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//确保是否产生了EXTI Line中断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EXTI_GetITStatus</span><span class="token punctuation">(</span>EXTI_Line0<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// LED1 取反        </span>        LED1_TOGGLE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清除中断标志位</span>        <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>EXTI_Line0<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">EXTI15_10_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//确保是否产生了EXTI Line中断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">EXTI_GetITStatus</span><span class="token punctuation">(</span>EXTI_Line13<span class="token punctuation">)</span> <span class="token operator">!=</span> RESET<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// LED2 取反        </span>        LED2_TOGGLE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清除中断标志位</span>        <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>EXTI_Line13<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main()函数"></a>main()函数</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* LED 端口初始化 */</span>    <span class="token function">LED_GPIO_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 初始化EXTI中断，按下按键会触发中断，      *  触发中断会进入stm32f4xx_it.c文件中的函数    *  EXTI0_IRQHandler和EXTI15_10_IRQHandler，处理中断，反转LED灯。    */</span>    <span class="token function">EXTI_Key_Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* 等待中断，由于使用中断方式，CPU不用轮询按键 */</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++再学习之基础语法</title>
      <link href="/c-cpp-4.html"/>
      <url>/c-cpp-4.html</url>
      
        <content type="html"><![CDATA[<h2 id="define宏定义"><a href="#define宏定义" class="headerlink" title="#define宏定义"></a>#define宏定义</h2><pre class=" language-c++"><code class="language-c++">#include <iostream>void fun1(){#define a 10    ;}void fun2(){    int b = a;}int main() {    std::cout <<"hello world";    return 0;}</code></pre><p>上述代码并不会报错，C++是支持在函数内宏定义，并且全局可以使用，这是因为<code>#define</code>是在预编译阶段处理的，相当于直接的<strong>文本替换</strong>。</p><p>而在fun_1函数内卸载宏定义，则会出现报错了：</p><pre class=" language-c++"><code class="language-c++">void fun1(){#define a 10#undef a    ;}</code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用，可以看作是一个已定义变量的别名，也就是相当于两个变量指向同一个内存地址。</p><pre class=" language-c++"><code class="language-c++">int a = 1;int &b = a;std::cout << a << " " << b;        //1 1std::cout << &a << " " << &b;    //0x61fe14 0x61fe14</code></pre><p>当给任意一个变量赋值时，另一个也会随之改变。</p><pre class=" language-c++"><code class="language-c++">b = 0;std::cout << "a=" << a;        //a=0a = 1;std::cout << "b=" << b;        //b=1</code></pre><p>还有一个需要注意的是，普通引用必须要初始化。</p><pre class=" language-c++"><code class="language-c++">int a = 0;int &b;        //error</code></pre><p>关于引用的作用，我们可以看一个c++老师必说的例子：</p><pre class=" language-c++"><code class="language-c++">//function swap two numbersvoid NumSwap(int a,int b){    int c = 0;    c = a;    a = b;    b = c;}</code></pre><p>当然，这个函数并不能完成所期望的功能，通常的做法是将参数换为指针：</p><pre class=" language-c++"><code class="language-c++">//function swap two numbers by using pointervoid NumSwap(int *a,int *b){    int c = 0;    c = *a;    *a = *b;    *b = c;}//calling the functionint a = 1,b = 2;NumSwap(&a,&b);</code></pre><p>而用引用的话也是相当的便捷的：</p><pre class=" language-c++"><code class="language-c++">//function swap two numbers by using referencevoid NumSwap(int &a,int &b){    int c = 0;    c = a;    a = b;    b = c;}//calling the functionint x = 1,y = 2;NumSwap(x,y);</code></pre><p>因为<strong>引用作函数参数时不需要初始化</strong>，这里其实是相当于进行了<code>int &amp;a =x; int &amp;b = y;</code>的操作，函数里的a，b则是x， y的引用。</p><ul><li><p>引用的本质</p><p>在C++中的内部实现是一个常指针，即<code>Type &amp;name</code>等价于<code>Type *const name</code>，</p><p>C++编译器在编译过程中使用常指针作为引用的内部实现，因此引用所占内存大小与指针相同。</p><p>当引用作为参数时，实际上编译器帮助我们为实参取了地址。</p></li><li><p>引用作为返回值</p></li></ul><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p>static定义的类成员，会被这个类创建的所有对象共享。且静态变量在类内声明后需要在外部进行定义初始化。</p><p>静态成员函数同样会被这个类创建的所有对象共享，注意<strong>在静态成员函数内不能调用非静态的变量和函数</strong>，且没有<code>this操作</code>。</p><pre class=" language-c++"><code class="language-c++">class A{    static int num;        //定义静态成员public:    void Add(){        num++;    };    void ShowNum(){      std::cout<<num<<std::endl;    };    static void GetNum(){        //声明静态成员函数       std::cout<<num<<std::endl;    }};int A::num = 0;        //初始化静态成员int main() {    A a,b;    a.ShowNum();    a.Add();    b.ShowNum();    std::cout << a.GetNum() << std::endl;    //对象调用静态成员函数    std::cout << A::GetNum();                //类调用静态成员函数    return 0;}//0  1     1     1</code></pre><h3 id="继承中的static"><a href="#继承中的static" class="headerlink" title="继承中的static"></a>继承中的static</h3><ul><li>基类中的静态成员变量，将被所有派生类共享</li><li>static定义的变量仍然遵循派生类的访问控制</li></ul><h2 id="C-类的模型"><a href="#C-类的模型" class="headerlink" title="C++类的模型"></a>C++类的模型</h2><pre class=" language-c++"><code class="language-c++">#include "iostream"class C1{public:    int i;  //4    int j;  //4    int k;  //4}; class C2{public:    int i;    int j;    int k;    static int m; public:    int getK() const { return k; }     void setK(int val) { k = val; }  }; struct S1{    int i;    int j;    int k;}; struct S2{    int i;    int j;    int k;    static int m;}; int main(){    std::cout<<sizeof(C1);    std::cout<<sizeof(C2);    std::cout<<sizeof(S1);    std::cout<<sizeof(S2);    return 0;}</code></pre><p>首先上面三个输出都是12，我们可以得出：</p><ul><li><p>C++类中的成员函数和成员变量是分开存储的</p><ul><li>普通的成员变量存储在对象中，与struct结构体有相同的内存布局和字节对齐方式</li><li>静态成员变量存储在全局数据区</li><li>成员函数则存储在代码段中</li></ul></li><li><p>C++编译器对普通成员函数的内部处理</p><pre class=" language-c++"><code class="language-c++">class Test{private:    int m;public:    Test(int i){        m = i;    }    int getM(){        return m;    }    static void Print(){        std::cout<<"Test";    }}Test a(10);a.getM();Test::Print();</code></pre><pre class=" language-c++"><code class="language-c++">struct Test{    int m;}void Test_initialize(Test *pThis,int i){    pThis -> m = i;}int Test_getM(Test *pThis){    return pThis -> m;}void Test_Print(){    std::cout<<"Test";}Test a;Test_initialize(&a,10);Test_getM(&a);Test_Print();</code></pre></li></ul><p>对比上述两段代码我们可以发现C++类的模型是基于结构体的，  面向对象本质还是面向过程的，成员变量与成员函数之间通过<code>this指针</code>连接起来，而静态函数没有该指针。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Cloud Studio为博客搭建免费图床</title>
      <link href="/tutorial-2.html"/>
      <url>/tutorial-2.html</url>
      
        <content type="html"><![CDATA[<p>Cloud Studio 已更新，教程失效</p><p>搭建的静态博客利用Markdown码字，必然少不了图片，所以需要另外的图床作为辅助，网上有很多优秀的图床程序，不过大多都功能复杂，而且图片放在别人那，让我总感觉不是很放心（万一哪天就跑路了呢？），而自己来搭建图床程序的话，需要自备服务器或者是虚拟主机，这个可是要付费的，毕竟自己的博客都是利用免费的Pages服务搭建的，而再为了托管图片去付费就有些得不偿失了，所以我想了半天，折腾了半天，可以利用腾讯云旗下的Cloud Studio的WebIDE及代码托管平台来搭建图床，步骤如下：</p><h2 id="使用Git创建本地存储库"><a href="#使用Git创建本地存储库" class="headerlink" title="使用Git创建本地存储库"></a>使用Git创建本地存储库</h2><p>搭建的图床是利用Git及远程存储库的模式进行传输和存储的，我主要是在Windows平台上使用，而Win10是没有预装Git的，所以首先需要安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>；</p><ul><li><p>在你想要存储图片的路径，创建一个文件夹，例如我的<code>D:\Mahoo\Pictures\Blog</code>;</p></li><li><p>创建本地存储库（以<code>Blog</code>目录为例）</p><p>在<code>Blog</code>目录下，右击选择<code>Git Bash</code></p><pre class=" language-shell"><code class="language-shell">git init</code></pre></li></ul><p>在此文件夹内，可创建多个文件夹存储你的不同图片。</p><h2 id="使用Cloud-Studio创建远程存储库"><a href="#使用Cloud-Studio创建远程存储库" class="headerlink" title="使用Cloud Studio创建远程存储库"></a>使用Cloud Studio创建远程存储库</h2><ul><li><p>创建账号</p><p>腾讯云开发者平台：<a href="https://dev.tencent.com/" target="_blank" rel="noopener"> https://dev.tencent.com/ </a></p></li><li><p>新建一个项目</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/pic_cs/new.png" alt="新建项目"></p><p>项目名称，地址自定义，是否公开勾选。</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/pic_cs/new1.png" alt="新建项目"></p></li></ul><p>进入新建项目界面，打开右侧<code>代码 -&gt;代码浏览</code>，复制该项目的HTTPS地址。</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/pic_cs/new2.png" alt="项目界面"></p><h2 id="连接本地存储库和远程存储库"><a href="#连接本地存储库和远程存储库" class="headerlink" title="连接本地存储库和远程存储库"></a>连接本地存储库和远程存储库</h2><p>当你往本地存储库添加图片后，使用指令：</p><pre class=" language-shell"><code class="language-shell">git add .git commit -m "自定义内容"git remote add origin 刚才复制的的HTTPS地址git push origin master</code></pre><p>这样的话，图片已经同步到远程存储库了，当然你对<code>git</code>相当熟悉的话，以上全是废话，此教程仅针对刚搭建博客的小白。</p><h2 id="开启Pages服务绑定域名"><a href="#开启Pages服务绑定域名" class="headerlink" title="开启Pages服务绑定域名"></a>开启Pages服务绑定域名</h2><p>打开此界面，按提示绑定域名即可</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/pic_cs/pages.png" alt=""></p><h2 id="通过直链引用图片"><a href="#通过直链引用图片" class="headerlink" title="通过直链引用图片"></a>通过直链引用图片</h2><p>这里我举例来说明比较好懂，在写博客的过程中，当你引入一张图片时，例如是这样的：</p><pre class=" language-shell"><code class="language-shell">D:\Mahoo\Pictures\Blog\test.png</code></pre><p>这时该图片的本地地址，在已经开启Pages服务并且绑定域名的情况下，你绑定的域名直接指向了git本地存储库的根目录，也就是<code>Blog</code>，所以则可以将本地地址改成网络直链：</p><pre class=" language-shell"><code class="language-shell">http://你的域名/test.png</code></pre><p>你可以通过文本编辑器的替换功能，也可以用代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> ref <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'D:/Mahoo/BLog/source/_posts/Cloud_studio.md'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>string <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>key <span class="token operator">=</span> r<span class="token string">'D:\\Mahoo\\Pictures\\Blog\\hexo_images\\Tutorials\\pic_cs\\'</span>new <span class="token operator">=</span> <span class="token string">'https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/pic_cs/'</span><span class="token comment" spellcheck="true"># result = re.compile(key).findall(string)</span><span class="token comment" spellcheck="true"># print(result)</span>string <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>key<span class="token punctuation">,</span> new<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(string)</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'D:/Mahoo/BLog/source/_posts/Cloud_studio.md'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>string<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>一个文件的链接替换当然是编辑器的替换方便的多，但如果需要替换域名，对所有博客文章进行替换时，文本编辑器就显得有些力不从心了，这里也贴出来我的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">'D:/Mahoo/BLog/source/_posts/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>files<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'D:/Mahoo/BLog/source/_posts/'</span> <span class="token operator">+</span> files<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    string <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'http://airlife.club/'</span>        <span class="token comment" spellcheck="true">#旧域名</span>    new <span class="token operator">=</span> <span class="token string">'https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/'</span>        <span class="token comment" spellcheck="true">#新域名</span>    string <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>key<span class="token punctuation">,</span> new<span class="token punctuation">,</span> string<span class="token punctuation">)</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'D:/Mahoo/BLog/source/_posts/'</span> <span class="token operator">+</span> files<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>string<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免费图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机学习之串口通信</title>
      <link href="/51mcu-2.html"/>
      <url>/51mcu-2.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="通信知识"><a href="#通信知识" class="headerlink" title="通信知识"></a>通信知识</h3><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E4%BF%A1.png" alt="通信分类"></p><ul><li>串行通信：数据字节一位一位在一条传输线上逐个传输；</li><li>并行通信：多位数据字节同时传输，控制简单，传输速度快。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E5%B9%B6%E8%A1%8C%E4%BC%A0%E8%BE%93%E5%92%8C%E4%B8%B2%E8%A1%8C%E4%BC%A0%E8%BE%93.png" alt=""></p><ul><li><p>异步通信：是指通信的发送与接收设备使用各自的时钟控制数据的发送和接收过程。为使双方的收发协调，要求发送和接受设备的时钟尽可能一致。  <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1%E6%97%B6%E9%92%9F.png" alt="异步通信时钟"> </p><p>异步通信是以字符（构成的帧）为单位进行传输，字符与字符之间的间隙（时间间隔）是任意的，但每个字符中的各位是以固定的时间传送的，即字符之间不一定有“位间隔”的整数倍的关系，但同一字符内的各位之间的距离均为“位间隔”的整数倍。 </p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E5%AD%97%E7%AC%A6%E5%B8%A7.png" alt="字符帧"> </p><p>异步通信的特点：不要求收发双方时钟的严格一致，实现容易，设备开销较小，但每个字符要附加2～3位用于起止位，各帧之间还有间隔，因此传输效率不高。 </p></li><li><p>同步通信 ： 同步通信时要建立发送方时钟对接收方时钟的直接控制，使双方达到完全同步。此时，传输数据的位之间的距离均为“位间隔”的整数倍，同时传送的字符间不留间隙，即保持位同步关系，也保持字符同步关系。发送方对接收方的同步可以通过两种方法实现。 </p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95.png" alt="左为字符同步，右为位同步"> </p></li></ul><h4 id="串行通信的传输方向"><a href="#串行通信的传输方向" class="headerlink" title="串行通信的传输方向"></a>串行通信的传输方向</h4><ul><li>单工：指数据传输仅能沿一个方向，不能实现反向传输；</li><li>半双工：指数据传输可以沿2个方向，但需要分时进行；</li><li>全双工：指数据可以同时双向传输。</li></ul><h4 id="信号的调制和解调"><a href="#信号的调制和解调" class="headerlink" title="信号的调制和解调"></a>信号的调制和解调</h4><p>简单来说，调制就是利用调制器把数字信号转换成模拟信号，然后送到通信线路上去；而解调则是通过解调器把通信线路上收到的模拟信号转换成数字信号。</p><h4 id="串行通信的错误校验"><a href="#串行通信的错误校验" class="headerlink" title="串行通信的错误校验"></a>串行通信的错误校验</h4><h5 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h5><p>在发送数据时，数据位的最后一位为<strong>奇偶校验位</strong>（1或0）。奇校验时，数据中“1”的个数与校验位“1”的个数之和应为奇数；偶校验时，数据中“1”的个数与校验位“1”的个数之和则为偶数；</p><p>接受字符时，对“1”的个数进行校验，如发现不一致，则说明数据传输过程中出现了差错。</p><h5 id="代码和校验"><a href="#代码和校验" class="headerlink" title="代码和校验"></a>代码和校验</h5><p>代码和校验是发送方将所发数据块求和（或各字节异或），产生1个字节的校验字符（校验和）附加到数据块末尾。接收方接收数据，同时对比数据块（除校验字节外）求和（或各字节异或），将所得的结果与发送方的“校验和”进行比较，相符，则无差错；否则，即在传输过程中出现了差错。</p><h5 id="循环冗余校验"><a href="#循环冗余校验" class="headerlink" title="循环冗余校验"></a>循环冗余校验</h5><p>循环冗余校验通过某种数学运算，实现有效信息与校验位之间的循环校验，常用于对磁盘信息的传输，存储区的完整性校验等。这种校验方法纠错能力强，广泛应用于同步通信。</p><h4 id="传输速率与传输距离的关系"><a href="#传输速率与传输距离的关系" class="headerlink" title="传输速率与传输距离的关系"></a>传输速率与传输距离的关系</h4><p>传输速率分为两种，即<strong>比特率</strong>和<strong>波特率</strong>：</p><ul><li><p>比特率：每秒传输二级制代码的位数；</p></li><li><p>波特率：每秒调制信号变化的次数，即每秒发送的符号数（码元）；</p><p>举个简单的例子，例如一串数据<code>01010101</code>，若比特率是8b/s（每秒传输8位），假设这串数据经过调制，我们认定每两个比特作为一个符号（码元），那么每秒传输了4个符号（码元），波特率即为4波特；</p></li><li><p>只有基带传输的比特率和波特率是相同的；</p></li><li><p>传输距离随着传输速率的增加而减小。</p></li></ul><h3 id="51串行口"><a href="#51串行口" class="headerlink" title="51串行口"></a>51串行口</h3><h4 id="串行口结构"><a href="#串行口结构" class="headerlink" title="串行口结构"></a>串行口结构</h4><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E4%B8%B2%E5%8F%A3%E7%BB%93%E6%9E%84.png" alt="串口结构"> </p><p>该结构中有两个物理上独立的接收、发送缓冲器SBUF属于特殊功能寄存器，可同时发送、接收数据。它们占用同一地址（99H）；接收器是双缓冲结构；发送缓冲器，因为发送时CPU是主动的，不会产生重叠错误。</p><h4 id="状态寄存器"><a href="#状态寄存器" class="headerlink" title="状态寄存器"></a>状态寄存器</h4><ul><li><p>工作发生寄存器 SCON</p><table><thead><tr><th align="center">位</th><th align="center">7</th><th align="center">6</th><th align="center">5</th><th align="center">4</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">功能</td><td align="center">SM0</td><td align="center">SM1</td><td align="center">SM2</td><td align="center">REN</td><td align="center">TB8</td><td align="center">RB8</td><td align="center">TI</td><td align="center">RI</td></tr></tbody></table><ul><li><p>RI： 接收中断标志位。在方式0时，当串行接收第8位数据结束时，或在其它方式，串行接收停止位的中间时，由内部硬件使RI置1，向CPU发中断申请。也必须在中断服务程序中，用软件将其清0，取消此中断申请。 </p></li><li><p>TI： 发送中断标志位。在方式0时，当串行发送第8位数据结束时，或在其它方式，串行发送停止位的开始时，由内部硬件使TI置1，向CPU发中断申请。在中断服务程序中，必须用软件将其清0，取消此中断申请。 </p></li><li><p>TB8： 在方式2或方式3中，是发送数据的第九位，可以用软件规定其作用。可以用作数据的奇偶校验位，或在多机通信中，作为地址帧/数据帧的标志位。 在方式0和方式1中，该位未用。 </p></li><li><p>RB8： 在方式2或方式3中，是接收到数据的第九位，作为奇偶校验位或地址帧/数据帧的标志位。在方式1时，若SM2=0，则RB8是接收到的停止位。 </p></li><li><p>REN： 允许串行接收位。由软件置REN=1，则启动串行口接收数据；若软件置REN=0，则禁止接收。 </p><p>SM0和SM1为工作方式选择位，可选择四种工作方式： </p></li></ul><table><thead><tr><th align="center">SM0</th><th align="center">SM1</th><th align="center">方式</th><th align="center">说明</th><th align="center">波特率</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">移位寄存器</td><td align="center">$f_{osc}/12$[^1]</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">10位异步收发器（8位数据）</td><td align="center">可变</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">2</td><td align="center">11位异步收发器（9位数据）</td><td align="center">$f_{osc}/64$或$f_{osc}/12$</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">3</td><td align="center">11位异步收发器（9位数据）</td><td align="center">可变</td></tr></tbody></table><ul><li><p>SM2：多级通信控制位。 主要用于方式2和方式3。当接收机的SM2=1时可以利用收到的RB8来控制是否激活RI（RB8＝0时不激活RI，收到的信息丢弃；RB8＝1时收到的数据进入SBUF，并激活RI，进而在中断服务中将数据从SBUF读走）。当SM2=0时，不论收到的RB8为0和1，均可以使收到的数据进入SBUF，并激活RI（即此时RB8不具有控制RI激活的功能）。通过控制SM2，可以实现多机通信。 </p><p>在方式0时，SM2必须是0。在方式1时，如果SM2=1，则只有接收到有效停止位时，RI才置1。</p><p>当SM2 = 0，不论接收到的第九位是0还是1，都接受数据，产生中断；</p><p>当SM2 = 1，只有接受的第九位为1时，才接受数据，并产生中断；而如果接受到的第九位为0时，则将接收到的数据丢弃，不会产生中断。 </p></li></ul></li><li><p>工作方式寄存器 PCON</p><p>PCON中只有一位SMOD与串行口工作有关：</p><table><thead><tr><th align="center">位</th><th align="center">7</th><th align="center">6</th><th align="center">5</th><th align="center">4</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">功能</td><td align="center">SMOD</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><p>PCON是没有位寻址的，也就是说不能直接操作SMOD，要直接操作PCON寄存器。</p><blockquote><p> 对字节地址中的位地址进行寻址的寻址方式称为位寻址。 </p></blockquote><p>SMOD为波特率倍增位：（在串口方式1，2，3时，波特率与SMOD有关）</p><ul><li>当SMOD = 1，波特率增加一倍；反之，不加倍</li><li>复位时，SMOD = 0</li></ul></li></ul><h4 id="串行口的工作方式"><a href="#串行口的工作方式" class="headerlink" title="串行口的工作方式"></a>串行口的工作方式</h4><ol><li><p>方式0</p><p>方式0时，串行口为<strong>同步移位寄存器</strong>的输入输出方式。主要用于扩展并行输入或输出口。数据由RXD（P3.0）引脚输入或输出，同步移位脉冲由TXD（P3.1）引脚输出。发送和接收均为8位数据，<u>低位在先，高位在后</u>。波特率固定为$f_{osc}/12$。 </p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E4%B8%B2%E5%8F%A3_%E6%96%B9%E5%BC%8F0_%E8%BE%93%E5%87%BA.png" alt="输出"> </p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E4%B8%B2%E5%8F%A3_%E6%96%B9%E5%BC%8F0_%E8%BE%93%E5%85%A5.png" alt="输入"> </p></li><li><p>方式1</p><p>方式1是10位数据的异步通信口。TXD为数据发送引脚，RXD为数据接收引脚，传送一帧数据的格式如图所示。其中1位起始位，8位数据位，1位停止位。 </p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E4%B8%B2%E5%8F%A3_%E6%96%B9%E5%BC%8F1.png" alt="方式1"> </p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E4%B8%B2%E5%8F%A3_%E6%96%B9%E5%BC%8F1_%E8%BE%93%E5%87%BA.png" alt="输出"> </p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E4%B8%B2%E5%8F%A3_%E6%96%B9%E5%BC%8F1_%E8%BE%93%E5%85%A5.png" alt="输入"> </p><p>用软件置REN为1时，接收器以所选择波特率的16倍速率采样RXD引脚电平，检测到RXD引脚输入电平发生负跳变时，则说明起始位有效，将其移入输入移位寄存器，并开始接收这一帧信息的其余位。接收过程中，数据从输入移位寄存器右边移入，起始位移至输入移位寄存器最左边时，控制电路进行最后一次移位。当RI=0，且SM2=0（或接收到的停止位为1）时，将接收到的9位数据的前8位数据装入接收SBUF，第9位（停止位）进入RB8，并置RI=1，向CPU请求中断。 </p></li><li><p>方式2和方式3</p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E4%B8%B2%E5%8F%A3_%E6%96%B9%E5%BC%8F2%E5%92%8C%E6%96%B9%E5%BC%8F3.png" alt="方式2和方式3"> </p></li></ol><p>方式2和方式3时起始位1位，数据9位（含1位附加的第9位，发送时为SCON中的TB8，接收时为RB8），停止位1位，一帧数据为11位。方式2的波特率固定为晶振频率的1/64或1/32，方式3的波特率由定时器T1的溢出率决定。 </p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E4%B8%B2%E5%8F%A3_%E6%96%B9%E5%BC%8F2%E5%92%8C%E6%96%B9%E5%BC%8F3_%E8%BE%93%E5%87%BA.png" alt="输出"> </p><p>发送开始时，先把起始位0输出到TXD引脚，然后发送移位寄存器的输出位（D0）到TXD引脚。每一个移位脉冲都使输出移位寄存器的各位右移一位，并由TXD引脚输出。 第一次移位时，停止位“1”移入输出移位寄存器的第9位上 ，以后每次移位，左边都移入0。当停止位移至输出位时，左边其余位全为0，检测电路检测到这一条件时，使控制电路进行最后一次移位，并置TI=1，向CPU请求中断。 </p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E4%B8%B2%E5%8F%A3_%E6%96%B9%E5%BC%8F2%E5%92%8C%E6%96%B9%E5%BC%8F3_%E8%BE%93%E5%85%A5.png" alt="输入"> </p><p>接收时，数据从右边移入输入移位寄存器，在起始位0移到最左边时，控制电路进行最后一次移位。当RI=0，且SM2=0（或接收到的第9位数据为1）时，接收到的数据装入接收缓冲器SBUF和RB8（接收数据的第9位），置RI=1，向CPU请求中断。如果条件不满足，则数据丢失，且不置位RI，继续搜索RXD引脚的负跳变。 </p><h4 id="波特率的计算"><a href="#波特率的计算" class="headerlink" title="波特率的计算"></a>波特率的计算</h4><p>在串行通信中，收发双方对发送或接收数据的速率要有约定。 通过软件可对单片机串行口编程为四种工作方式，其中方式0和方式2的波特率是固定的，而方式1和方式3的波特率是可变的， <strong>由定时器T1的溢出率来决定</strong>。 </p><p>串行口的四种工作方式对应三种波特率。由于输入的移位时钟的来源不同，所以，各种方式的波特率计算公式也不相同。 </p><ul><li><p>方式0的波特率 = $f_{osc}/12$</p></li><li><p>方式2的波特率 =$(2^{SMOD}/64)· f_{osc}$</p></li><li><p>方式1的波特率 =$(2^{SMOD}/32)·(T1溢出率)$</p></li><li><p>方式3的波特率 =$(2^{SMOD}/32)·(T1溢出率)$</p></li></ul><p>当T1作为波特率发生器时，最典型的用法是使T1工作在自动重装的8位定时器方式（即方式2，且TCON的TR1=1，以启动定时器）。这时溢出率取决于TH1中的计数值。 T1 溢出率 = $f_{osc} /{12×(256 －X)} $，X为定时器的初值。在单片机的应用中，常用的晶振频率为：12MHz和11.0592MHz。所以，选用的波特率也相对固定。常用的串行口波特率以及各参数的关系如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E6%B3%A2%E7%89%B9%E7%8E%87%E5%92%8CT1.png" alt="常用波特率与定时器T1的参数关系"></p><h4 id="串口的操作步骤"><a href="#串口的操作步骤" class="headerlink" title="串口的操作步骤"></a>串口的操作步骤</h4><p> 串行口工作之前，应对其进行初始化，主要是设置产生波特率的定时器T1、串行口控制和中断控制。 </p><ol><li>设置波特率<ul><li>确定定时器T1的工作方式（设置TMOD寄存器）</li><li>给计数器赋初值（工作方式2会自动重装）（设置TH1，TL1）</li></ul></li><li>设置串口工作方式<ul><li>设置SCON寄存器</li><li>打开中断</li><li>打开定时器T1（设置TR1），开始产生波特率</li></ul></li></ol><p>示例程序：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SCON <span class="token operator">=</span> <span class="token number">0X50</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置工作方式为1</span>    TMOD <span class="token operator">=</span> <span class="token number">0X20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置计数器工作方式2</span>    PCON <span class="token operator">=</span> <span class="token number">0X80</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SMOD = 1,波特率加倍</span>    TH1 <span class="token operator">=</span> <span class="token number">0XF3</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//计数器初始值设置，波特率为4.8Kb/s</span>    TL1 <span class="token operator">=</span> <span class="token number">0XF3</span><span class="token punctuation">;</span>    ES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//打开接收中断</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//打开总中断</span>    TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//打开计数器</span><span class="token punctuation">}</span></code></pre><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><p>以下代码将实现将PC发出的数据传送到单片机中，单片机再将收到的数据发送到PC上显示（在串口助手上显示）</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg52.h></span></span><span class="token keyword">void</span> <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    SCON <span class="token operator">=</span> <span class="token number">0X50</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置工作方式为1</span>    TMOD <span class="token operator">=</span> <span class="token number">0X20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置计数器工作方式2</span>    PCON <span class="token operator">=</span> <span class="token number">0X00</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SMOD = 0,波特率加倍</span>    TH1 <span class="token operator">=</span> <span class="token number">0Xfd</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//计数器初始值设置，波特率为4.8Kb/s</span>    TL1 <span class="token operator">=</span> <span class="token number">0Xfd</span><span class="token punctuation">;</span>    ES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//打开接收中断</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//打开总中断</span>    TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//打开计数器</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">UsartConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">uart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> _data<span class="token punctuation">;</span>    _data <span class="token operator">=</span> SBUF<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出接收到的数据</span>    RI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//清除接收中断标志位</span>    SBUF <span class="token operator">=</span> _data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将接受的数据</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>TI<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待数据传输完成</span>    TI <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//清除发送中断标志位</span><span class="token punctuation">}</span></code></pre><p>[^1]: frequency oscillate，在单片机中指的是晶振频率，而晶振频率有内部和外部之分。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机学习之中断系统</title>
      <link href="/51mcu-5.html"/>
      <url>/51mcu-5.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念基础"><a href="#概念基础" class="headerlink" title="概念基础"></a>概念基础</h2><h3 id="什么是中断"><a href="#什么是中断" class="headerlink" title="什么是中断"></a><strong><font size="5">什么是中断</font></strong></h3><p>当你正在看动漫时，突然手机来电话了，你暂停动漫，去接电话，在接电话的时候，又有人敲门，你暂时放下电话，去开门。我们可以把看动漫当作在执行主程序，那么电话就是<strong>中断源</strong>，电话铃响了就是<strong>中断请求</strong>，暂停动漫即是<strong>现场保护</strong>，接电话就是<strong>中断响应</strong>，有敲门声就是<strong>更高一级的中断请求</strong>，去开门则是<strong>中断嵌套</strong>，把门打开继续接电话就是<strong>中断返回</strong>，电话OK后继续看动漫则是<strong>现场恢复</strong>。</p><p>内核与外设之间的主要交互方式有两种<font color="red">轮询</font>和<font color="red">中断</font>，轮询工作效率极低，而且不具有响应紧急事件的功能；<u>中断系统则使内核具备了应对突发事件的能力。</u></p><p>中断既然可以处理紧急事件，也就是不知道中断什么时候发生，所以每个中断都需要一个中断入口地址，即为<strong>中断向量</strong>，这样的话，无论中断什么时候发生，它都有一个确定的程序执行初始点。中断响应之后，执行的那段程序称之为<strong>中断服务函数</strong>，顾名思义它是专门为这个中断服务的。</p><h3 id="51单片机的中断系统"><a href="#51单片机的中断系统" class="headerlink" title="51单片机的中断系统 "></a><font size="5"><strong>51单片机的中断系统</strong> </font></h3><p>80C51的中断系统有5个中断源 （忽略定时/计数器2） ，2个优先级，可实现二级中断嵌套。</p><table><thead><tr><th align="center">中断源</th><th align="center">中断标志</th><th align="center">中断向量（地址）</th><th align="center">优先级</th><th align="center">序号（C语言）</th></tr></thead><tbody><tr><td align="center">外部中断0 INT0</td><td align="center">IE0</td><td align="center">0003H</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">定时/计数器0 T0</td><td align="center">TF0</td><td align="center">000BH</td><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">外部中断1 INT1</td><td align="center">IE1</td><td align="center">0013H</td><td align="center">3</td><td align="center">2</td></tr><tr><td align="center">定时/计数器1 T1</td><td align="center">TF1</td><td align="center">001BH</td><td align="center">4</td><td align="center">3</td></tr><tr><td align="center">串口中断</td><td align="center">RI/TI</td><td align="center">0023H</td><td align="center">5</td><td align="center">4</td></tr></tbody></table><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/51%E4%B8%AD%E6%96%AD%E7%B3%BB%E7%BB%9F.jpg" alt="中断系统结构"> </p><p>从前面的介绍我们可以知道，不管主程序执行到什么地方，只要外部中断0产生请求，内核就要响应该中断，就回到0003H这个地址去执行代码。如果使用汇编语言，则要记住每个中断源对应的地址；C语言则需要记住序号即可。</p><h3 id="中断控制"><a href="#中断控制" class="headerlink" title="中断控制"></a><strong><font size="5">中断控制</font></strong></h3><p>4个特殊功能寄存器来实施中断控制：</p><ul><li>中断允许寄存器 IE (Interrupt Enable )</li><li>中断优先级寄存器 IP ( Interrupt Priority )</li><li>定时/计数器及外部中断控制寄存器 TCON</li><li>串口控制寄存器 SCON</li></ul><p><strong><font size="4">中断响应条件：</font></strong></p><ul><li>中断源有中断请求</li><li>此中断源的中断允许位为1</li><li>CPU中断允许位为1</li></ul><h4 id="中断允许寄存器-IE"><a href="#中断允许寄存器-IE" class="headerlink" title="中断允许寄存器 IE"></a>中断允许寄存器 IE</h4><table><thead><tr><th align="center">位序</th><th align="center">7</th><th align="center">6</th><th align="center">5</th><th align="center">4</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">名称</td><td align="center">EA</td><td align="center">-</td><td align="center">-</td><td align="center">ES</td><td align="center">ET1</td><td align="center">EX1</td><td align="center">ET0</td><td align="center">EX0</td></tr><tr><td align="center">控制位（0禁止，1允许）</td><td align="center">总开关</td><td align="center"></td><td align="center"></td><td align="center">串口</td><td align="center">定时器1</td><td align="center">外部中断1</td><td align="center">定时器0</td><td align="center">外部中断0</td></tr><tr><td align="center">位地址</td><td align="center">AFH</td><td align="center"></td><td align="center"></td><td align="center">ACH</td><td align="center">ABH</td><td align="center">AAH</td><td align="center">A9H</td><td align="center">A8H</td></tr></tbody></table><h4 id="中断优先级寄存器-IP"><a href="#中断优先级寄存器-IP" class="headerlink" title="中断优先级寄存器 IP"></a>中断优先级寄存器 IP</h4><table><thead><tr><th align="center">位序</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th></th></tr></thead><tbody><tr><td align="center">名称</td><td>-</td><td>-</td><td>-</td><td>PS</td><td>PT1</td><td>PX1</td><td>PT0</td><td>PX0</td></tr><tr><td align="center">优先级控制位（0低，1高）</td><td></td><td></td><td></td><td>串口</td><td>定时器1</td><td>外部中断1</td><td>定时器0</td><td>外部中断0</td></tr><tr><td align="center">位地址</td><td></td><td></td><td></td><td>BCH</td><td>BBH</td><td>BAH</td><td>B9H</td><td>B8H</td></tr></tbody></table><h4 id="定时-计数器的控制寄存器-TCON"><a href="#定时-计数器的控制寄存器-TCON" class="headerlink" title="定时/计数器的控制寄存器 TCON"></a>定时/计数器的控制寄存器 TCON</h4><table><thead><tr><th align="center">位序</th><th align="center">7</th><th align="center">6</th><th align="center">5</th><th align="center">4</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">位名称</td><td align="center">TF1</td><td align="center">TR1</td><td align="center">TF0</td><td align="center">TR0</td><td align="center">IE0</td><td align="center">IT1</td><td align="center">IE0</td><td align="center">IT0</td></tr></tbody></table><ul><li><strong>TF1</strong>：定时/计数器T1溢出中断请求位（0：无中断请求，1：有中断请求）</li><li><strong>TR1</strong>：定时/计数器T1启动位（0：停止定时/计数器，1：启动定时/计数器）</li><li><strong>TF0</strong>：定时/计数器T0溢出中断请求位</li><li><strong>TR0</strong>：定时/计数器T0启动位</li><li><strong>IE1</strong>：外部中断1请求标志位</li><li><strong>IT1</strong>：外部中断1触发方式控制位（0：低电平触发，1：下降沿触发）</li><li><strong>IE0</strong>：外部中断0请求标志位</li><li><strong>IT0</strong>：外部中断0触发方式控制位（0：低电平触发，1：下降沿触发）</li></ul><p><strong>下降沿</strong>：</p><blockquote><p> 电平从高电平（数字“1”）变为低电平（数字“0”）的那一瞬间叫作下降沿。 </p></blockquote><h4 id="串行口控制寄存器-SCON"><a href="#串行口控制寄存器-SCON" class="headerlink" title="串行口控制寄存器 SCON"></a>串行口控制寄存器 SCON</h4><table><thead><tr><th align="center">位序</th><th align="center">7</th><th align="center">6</th><th align="center">5</th><th align="center">4</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">位名称</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">TI</td><td align="center">RI</td></tr></tbody></table><ul><li><strong>TI</strong>：串行接口发送完成中断请求标志位（ 响应中断时需手动软件清除）</li><li><strong>RI</strong>：串行接口接收完成中断请求标志位（ 响应中断时需手动软件清除）</li></ul><h3 id="一次中断的完整步骤"><a href="#一次中断的完整步骤" class="headerlink" title="一次中断的完整步骤"></a>一次中断的完整步骤</h3><ol><li><p>中断请求</p><p>中断事件一旦发生，中断源提交中断请求（将中断标志位置为1），欲请求CPU暂停目前的工作，转向为该中断作专项服务；</p></li><li><p>中断使能</p><p>虽然中断源提交了中断请求，但是能否得到CPU的响应，还要取决于该中断请求能否通过若干的关卡送达CPU（中断使能位为1，关卡放行），关卡有两类：</p><ul><li>此中断源的中断允许位</li><li>全局中断允许位</li></ul></li><li><p>中断响应</p><p>如果一路通畅，则CPU响应该中断请求，记录断点，跳转到中断服务程序。对于INT和TMR中断，中断响应时中断标志位会被硬件自动清零。</p></li><li><p>中断处理</p><p>对中断源进行有针对性的服务；</p></li><li><p>中断返回</p><p>返回到主程序断点处，继续执行主程序；</p></li></ol><p>1，3，5由硬件自动完成，2，4由用户编程完成。中断响应条件为1，2同时满足。</p><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg52.h></span></span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> ms<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">112</span><span class="token punctuation">;</span> j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P1 <span class="token operator">=</span>   <span class="token number">0x0f</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//0000 1111</span>    EX1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//外部中断1 INT1 打开</span>    EA <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//全局中断打开</span>    IT1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置触发方式为下降沿触发</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//中断服务函数</span><span class="token keyword">void</span> <span class="token function">low</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">2</span><span class="token punctuation">{</span>    P1 <span class="token operator">=</span> <span class="token operator">~</span>P1<span class="token punctuation">;</span>    <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先设置P1管脚连接的排灯为后四个灯亮，把各个卡点开启（如外部中断1 和 全局中断），IT1（P3.3）设置触发方式为下降沿，之后可以将引脚P3.3与P3.6（按键）连接，如此一来就可以通过按键来触发中断；</p><p>当按键按下松手时即是一个下降沿，此时会触发中断，执行中断服务函数，转变为前四个灯亮。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机学习之定时器</title>
      <link href="/51mcu-6.html"/>
      <url>/51mcu-6.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念基础"><a href="#概念基础" class="headerlink" title="概念基础"></a>概念基础</h2><h3 id="单片机延时基础"><a href="#单片机延时基础" class="headerlink" title="单片机延时基础"></a>单片机延时基础</h3><p>之前的延时我们都使用的是利用C语言的多次的空循环进行延迟操作，这样的缺点是：CPU时间被占用无法进行其他任务，导致系统效率降低。而且延时时间越长，该缺点越明显，所以，这种延时操作只适用于短暂延时，或简单的项目。</p><p>而定时器/计数器的使用，实现了单片机对时间的有效控制。单片机中有多个定时/计数器，都可以实现定时和计数的功能。</p><h3 id="定时-计数器结构"><a href="#定时-计数器结构" class="headerlink" title="定时/计数器结构"></a>定时/计数器结构</h3><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E5%AE%9A%E6%97%B6%E8%AE%A1%E6%95%B0%E5%99%A8.png" alt="定时/计数器结构"></p><p>16位寄存器T0、T1分别由TH0、TL0和TH1、TL1四个8位计数器组成 ，其中两个定时器的区别为：</p><ul><li>T0（定时器0）可分成2个独立的8位定时器，而定时器1则不能； </li><li>T1（定时器1）可作为串口的波特率发生器，而定时器0则不能。 </li></ul><p>还有两个特殊功能寄存器用于控制定时/计数器：</p><ul><li>TMOD，工作方式控制寄存器，确定工作方式和功能；</li><li>TCON，工作状态控制寄存器，控制定时/计数器的启动、停止及溢出标志。</li></ul><h3 id="定时-计数器控制"><a href="#定时-计数器控制" class="headerlink" title="定时/计数器控制"></a>定时/计数器控制</h3><h4 id="工作方式寄存器TMOD"><a href="#工作方式寄存器TMOD" class="headerlink" title="工作方式寄存器TMOD"></a>工作方式寄存器TMOD</h4><p>低四位（0，1，2，3）用于T0，高四位用于T1：</p><table><thead><tr><th align="center">位</th><th align="center">7</th><th align="center">6</th><th align="center">5</th><th align="center">4</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">0</th></tr></thead><tbody><tr><td align="center">功能</td><td align="center">GATE</td><td align="center">$C/\overline{T}$</td><td align="center">M1</td><td align="center">M0</td><td align="center">GATE</td><td align="center">$C/\overline{T}$</td><td align="center">M1</td><td align="center">M0</td></tr></tbody></table><ul><li><p><strong>GATE</strong>：门控位，用于控制定时器的启动是否受外部中断源的影响。当GATE = 0时，只要使用软件将TCON中的TR0或TR1置为1，就可以启动定时/计数器工作；当GATE = 0时，要用软件将TCON中的TR0或TR1为1，同时外部中断的引脚INT0/1也为高电平，才可以启动定时/计数器。即此时多了一个启动条件：INT0/1引脚需为高电平。</p></li><li><p>$C/\overline{T}$：定时/计数器模式选择位，当$C/\overline{T}=0$ 为定时模式；$C/\overline{T}= 1$为计数模式。</p></li><li><p><strong>M1/M0</strong>：工作方式设置位，定时/计数器有四种工作方式：</p><table><thead><tr><th align="center">M1M0</th><th align="center">工作方式</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">方式0</td><td align="center">13位定时/计数器</td></tr><tr><td align="center">01</td><td align="center">方式1</td><td align="center">16位定时/计数器</td></tr><tr><td align="center">10</td><td align="center">方式2</td><td align="center">8位自动重装定时/计数器</td></tr><tr><td align="center">11</td><td align="center">方式3</td><td align="center">T0分成两个独立的定位/计数器，T1此方式停止计数</td></tr></tbody></table></li></ul><h5 id="定时-计数器工作方式"><a href="#定时-计数器工作方式" class="headerlink" title="定时/计数器工作方式"></a>定时/计数器工作方式</h5><ul><li><p><strong>方式0：为13位定时计数器</strong>：由TL0的低5位（高3位未用）和TH0的8位组成。TL0的低5位溢出时向TH0进位，TH0溢出时，置位TCON中的TF0标志，向CPU发出中断请求。</p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E6%96%B9%E5%BC%8F0.png" alt="方式0"> </p><p>计数个数与计数初值的关系：$X = 2^8-N$</p></li><li><p><strong>方式1：为16位定时计数器</strong>：由TL0作为低8位，TH0 作为高8位，组成了16位加1计数器 。</p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E6%96%B9%E5%BC%8F1.png" alt="方式1"></p><p>  计数个数与计数初值的关系为：$X=2^{16}－N$</p></li><li><p><strong>方式2：8位自动重装初值定时/计数器</strong></p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E6%96%B9%E5%BC%8F2.png" alt="方式2"></p><p> 计数个数与计数初值的关系为：$X=2^8－N$ </p></li><li><p><strong>方式3：只适用于定时/计数器T0</strong>，定时器T1处于方式3时相当于TR1=0，停止计数。</p><p> <img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/51mcu/%E6%96%B9%E5%BC%8F3.png" alt="方式3"> </p><p>  工作方式3将T0分成为两个独立的8位计数器TL0和TH0 。 </p></li></ul><h4 id="工作状态寄存器TCON"><a href="#工作状态寄存器TCON" class="headerlink" title="工作状态寄存器TCON"></a>工作状态寄存器TCON</h4><table><thead><tr><th align="center">位序</th><th align="center">D7</th><th align="center">D6</th><th align="center">D5</th><th align="center">D4</th><th align="center">D3</th><th align="center">D2</th><th align="center">D1</th><th align="center">D0</th></tr></thead><tbody><tr><td align="center">位名称</td><td align="center">TF1</td><td align="center">TR1</td><td align="center">TF0</td><td align="center">TR0</td><td align="center">IE1</td><td align="center">IT1</td><td align="center">IE0</td><td align="center">IT0</td></tr></tbody></table><ul><li><p>TF1：T1溢出标志位</p><p>当T1计数满溢出时，硬件将TF1置1，并申请中断。接入服务程序之后，其将自动清零；T1工作时，CPU可随时查询TF1的状态。所以，TF1可用作查询测试的标志。TF1也可以用软件置1或清0，同硬件的效果一样。</p></li><li><p>TR1：T1运行控制位</p><p>TR1 = 1：启动定时器；TR1 = 0：关闭计时器，由软件控制。</p></li><li><p>TF0：T0溢出标志位</p><p>功能同TF1，工作对象是T0。</p></li><li><p>TR0：T0运行控制位</p><p>功能同TF1，工作对象是T0。</p></li><li><p>IE1：外部中断1请求标志位</p></li></ul><ul><li>IT1：外部中断1触发方式选择位</li></ul><ul><li>IE0：外部中断0请求标志位</li></ul><ul><li>IT1：外部中断0触发方式选择位</li></ul><h3 id="定时-计数器原理"><a href="#定时-计数器原理" class="headerlink" title="定时/计数器原理"></a>定时/计数器原理</h3><p>定时/计数器的实质是<strong>加1计数器</strong>，由高8位和低8位2个寄存器组成。加1计数器有两个计数脉冲来源：一是由系统的时钟振荡输出脉冲经12分频后送来；二是由T0或T1引脚输入的外部脉冲源。</p><p>每来一个脉冲，计数器加1，当加到计数器全为1的时候，再输入一个脉冲使计数器归零，且计数器的溢出时TCON中的TF0或TF1置1，向CPU发出中断请求（定时/计数器中断允许时）。</p><p>如果定时/计数器处于定时模式，则表示定时时间结束；计数模式即计数值已满。所以，溢出时计数器的值减去计数器的初值即为加1计数器的计数值。</p><p>当设置为定时器模式时，加1计数器是对内部机器周期计数（1个机器周期相当于12个震荡周期，即<strong>计数频率为晶振频率的$1/12$</strong>）。计数个数乘以机器周期$T_{cy}$就是定时时间t。</p><p>设置为计数器模式时，外部事件计数脉冲由T0或T1引脚输入到计数器。在每个机器周期的S5P2期间采样T0，T1引脚电平。当某周期采样到一高电平输入，而下一周期又采样到一低电平时，则计数器加1，更新的计数值，在下一个周期的S3P1期间装入计数器。由于检测一个从1到0的下降沿需要两个机器周期，因此要求被采样的电平至少要维持一个机器周期。当晶振频率为12MHz时，最高计数频率不超过1/2MHz，即计数脉冲的周期要大于$2\mu{s}$。</p><h4 id="CPU-时序的有关知识"><a href="#CPU-时序的有关知识" class="headerlink" title="CPU 时序的有关知识"></a>CPU 时序的有关知识</h4><ul><li>S5P2： 代表第5状态中的第二节拍 </li></ul><blockquote><p>机器周期：一般也叫CPU周期。 表示从内存读取一条指令字的最短时间，它是指令周期的最小单位。它等于单指令的周期长度 。 在51单片机中 一个机器周期=6状态周期=12时钟周期。</p></blockquote><blockquote><p> 指令周期：一条指令包括1个或多个机器周期。所有的C语言代码最后都会编译成汇编代码来执行，而执行一条汇编指令需要的机器周期就叫做指令周期 </p></blockquote><blockquote><p> 状态周期：在8051单片机中把一个时钟周期定义为一个节拍（用P表示），二个节拍定义为一个状态周期（用S表示）。一个状态周期等于两个时钟周期。 </p></blockquote><blockquote><p> 时钟周期：又叫<strong>振荡周期</strong>， 是指为单片机提供时钟信号的振荡源的周期（ 晶振频率的倒数 ）。</p></blockquote><h3 id="定时-计数器操作"><a href="#定时-计数器操作" class="headerlink" title="定时/计数器操作"></a>定时/计数器操作</h3><ul><li><p>步骤：</p><ol><li>选择工作方式（设置M1，M0）</li><li>选择控制方式（设置GATE）</li><li>选择模式：定时器还是计数器（设置C/T）</li><li>给定时/计数器赋初值（设置$TH_X$和$TL_x$）</li><li>开启定时器中断（设置ET0和ET1）</li><li>开启总中断（设置EA）</li><li>打开计数器（设置TR1和TR0）</li></ol></li><li><p>配置计数器：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">TimerConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TMOD <span class="token operator">=</span> <span class="token number">0X01</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定时器T0工作方式1</span>    TH0 <span class="token operator">=</span> <span class="token number">0X3c</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置初始值</span>    TL0 <span class="token operator">=</span> <span class="token number">0X0B0</span><span class="token punctuation">;</span>        EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//打开总中断</span>    ET0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打开定时器T0中断</span>    TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动定时器T0</span><span class="token punctuation">}</span></code></pre></li><li><p>定时器T0初值计算（晶振为12MHz）</p><p> <strong>51单片机内部时钟频率是外部时钟的12分频</strong>， 也就是说当外部晶振的频率输入到单片机里面的时候要进行12分频。比如说你用的是12MHz的晶振，那么单片机内部的时钟频率就是$12MHz\over12$ = 1MHz，当你使用12MHz的外部晶振的时候，机器周期=$1 \over1MHz$=$1\mu{s}$。 </p><p>当我们需要定时50ms时，则计数值为${50ms}\over{1{\mu}s}$=50000，所以<strong>初值 = 最大值计数值 - 50000 = 15536</strong> (3cb0)，即$TH_x$ =0x3c，$TL_x$= 0xb0。 </p></li></ul><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><ul><li><p>LED按定时器T0设定的时间周期闪烁</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg52.h></span></span>sbit led <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">t0_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TMOD <span class="token operator">=</span> <span class="token number">0X01</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置定时器T0工作方式1    </span>    TH0 <span class="token operator">=</span> <span class="token number">0X3c</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置初始值</span>    TH0 <span class="token operator">=</span> <span class="token number">0Xb0</span><span class="token punctuation">;</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//打开总中断</span>    ET0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打开定时器T0中断</span>    TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动定时器T0</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    led <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">t0_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">t0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token punctuation">{</span>    TH0 <span class="token operator">=</span> <span class="token number">0X3c</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置初始值</span>    TL0 <span class="token operator">=</span> <span class="token number">0Xb0</span><span class="token punctuation">;</span>    led <span class="token operator">=</span> <span class="token operator">~</span>led<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li><li><p>LED按500ms/次的精确频率闪动</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg52.h></span></span>sbit led <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">t1_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TMOD <span class="token operator">=</span> <span class="token number">0X10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置定时器T1工作方式1    </span>    TH0 <span class="token operator">=</span> <span class="token number">0X3c</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置初始值</span>    TH0 <span class="token operator">=</span> <span class="token number">0Xb0</span><span class="token punctuation">;</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//打开总中断</span>    ET1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打开定时器T1中断</span>    TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动定时器T1</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    led <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">t1_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            led <span class="token operator">=</span> <span class="token operator">~</span>led<span class="token punctuation">;</span>            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">3</span><span class="token punctuation">{</span>    TH0 <span class="token operator">=</span> <span class="token number">0X3c</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置初始值</span>    TL0 <span class="token operator">=</span> <span class="token number">0Xb0</span><span class="token punctuation">;</span>       i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机学习之独立键盘输入</title>
      <link href="/51mcu-4.html"/>
      <url>/51mcu-4.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念基础"><a href="#概念基础" class="headerlink" title="概念基础"></a>概念基础</h2><h3 id="上拉电阻"><a href="#上拉电阻" class="headerlink" title="上拉电阻"></a>上拉电阻</h3><p>上拉电阻就是将一个不确定信号（高或低电平），通过一个电阻与电源VCC相连，固定在高电平，电阻同时起限流作用。下拉同理，也是将一个不确定信号（高或低电平），通过一个电阻与地GND相连，固定在低电平。上拉电阻和下拉电阻二者共同的作用是：</p><ul><li>避免电压的“悬浮”，否则会容易产生积累电荷，静电荷造成电路的不稳定；</li><li>在引脚电平不定的时候，让后面有一个稳定的电平；</li><li>提高输出引脚的驱动能力。</li></ul><h3 id="键盘防抖"><a href="#键盘防抖" class="headerlink" title="键盘防抖"></a>键盘防抖</h3><p>当按一次按键时，由于按键有反应时间，以及抖动，造成机器感应到多次按键操作，而<strong>防抖</strong>就是让按键在抖动的过程中（一般是5-10ms）仅让机器感应到按键的一次操作。</p><p><strong>软件防抖程序思路：</strong></p><p><img src="/51mcu-4/D:%5CMahoo%5CPictures%5CBlog%5Chexo_images%5CStudy%5C51mcu%5C%E8%BD%AF%E4%BB%B6%E9%98%B2%E6%8A%96.png" alt="软件防抖程序思路"></p><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg52.h></span></span>sbit led0 <span class="token operator">=</span> P1<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">;</span>sbit k1 <span class="token operator">=</span> P3<span class="token operator">^</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> ms<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">112</span><span class="token punctuation">;</span> j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P1 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断是否有按下按键的信号</span>            <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//延时5ms，防抖</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//再次判断是否按键按下</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>k1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//直到按键松开，之后后续代码</span>                led0 <span class="token operator">=</span> <span class="token operator">~</span>led0<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机学习之数码管</title>
      <link href="/51mcu-3.html"/>
      <url>/51mcu-3.html</url>
      
        <content type="html"><![CDATA[<h2 id="段选和位选"><a href="#段选和位选" class="headerlink" title="段选和位选"></a>段选和位选</h2><p>例如，你要控制四个数码管，依次是1，2，3，4，你要选择哪一个数码管（一个数码管即为一个“日”）这就是<strong>位选</strong>，顾名思义为选择位置；之后你要让选择的数码管显示某一个数字或符号，你就要控制数码管的a,b,c,d,e,f,g这七个发光二极管，让其亮或灭，这就是<strong>段选</strong>，顾名思义为选择数码管的哪一段。</p><h2 id="数据存储类型"><a href="#数据存储类型" class="headerlink" title="数据存储类型"></a>数据存储类型</h2><ul><li><p><strong>程序存储器（code）</strong></p><p>程序存储区（64KB），<u>可直接理解为ROM</u>，只读，可由汇编操作码<code>MOVC @A DPTR</code>访问，8051系列仅执行存储在code中的程序；</p></li><li><p><strong>内部数据存储</strong></p><p>对内部数据存储器的访问是非常快的，因为使用8位地址寻址；</p><ul><li><p><strong>data</strong></p><p>可直接寻址的内部数据存储器（128字节），<u>可直接理解为内部RAM</u>，读写速度最快；</p></li><li><p><strong>idata</strong></p><p>间接可寻址内部数据存储器（256字节），其中前128字节和data的128字节完全相同，只是访问方法不一样；</p></li><li><p><strong>bdata</strong></p><p>可位寻址的内部数据存储器（<code>20h to 2Fh</code> 16字节），支持混合位和字节访问。</p></li></ul></li><li><p><strong>外部数据存储</strong></p><p>可读写，由于外部数据存储器是通过指针寄存器间接访问的，所以访问速度要比内部数据存储器慢，</p><ul><li><p><strong>xdata</strong></p><p>外部数据存储器（64KB），<u>可直接理解外部RAM</u>，可由汇编操作码<code>MOVX @DPTR</code>访问，Large Memory Model在此内存空间中定义变量；</p></li><li><p><strong>pdata</strong></p><p>分页寻址外部数据存储器，其指定外部存储器中的一页（256字节），由操作码<code>MOVX @Rn</code>访问；Compact Memory Model在此内存空间中定义变量。</p></li></ul></li></ul><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"reg52.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"intrins.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> uint unsigned int</span>sbit a <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span>sbit b <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">;</span>sbit c <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">6</span><span class="token punctuation">;</span>sbit d <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">7</span><span class="token punctuation">;</span>sbit fm <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义数码管段选的方式</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code sz<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**延迟函数*/</span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span>uint ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint i <span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> ms<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">112</span><span class="token punctuation">;</span> j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**位选数码管函数*/</span><span class="token keyword">void</span> <span class="token function">Led</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">Led</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        P1 <span class="token operator">=</span> <span class="token number">0xfe</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">Led</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            P0 <span class="token operator">=</span> sz<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>            fm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fm <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            P1 <span class="token operator">=</span> <span class="token function">_crol_</span><span class="token punctuation">(</span>P1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看看这个数组定义：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code sz<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x39</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>其中code是一个域修饰符，它指定该数组存储在程序存储区，写入后不可更改。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机学习之流水灯蜂鸣器</title>
      <link href="/51mcu-1.html"/>
      <url>/51mcu-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="流水灯"><a href="#流水灯" class="headerlink" title="流水灯"></a>流水灯</h2><p>在代码中的延时均使用软件延时，即函数嵌套循环体进行延时；</p><h3 id="位输出实现"><a href="#位输出实现" class="headerlink" title="位输出实现"></a>位输出实现</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;reg52.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> uint unsigned int</span><span class="token macro property">#<span class="token directive keyword">define</span> on 1</span><span class="token macro property">#<span class="token directive keyword">define</span> off 0</span>sbit led_0 <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">0</span><span class="token punctuation">;</span>sbit led_1 <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span>sbit led_2 <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">;</span>sbit led_3 <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span>sbit led_4 <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span>sbit led_5 <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">;</span>sbit led_6 <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">6</span><span class="token punctuation">;</span>sbit led_7 <span class="token operator">=</span> P1 <span class="token operator">^</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延时函数</span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span>uint ms<span class="token punctuation">)</span><span class="token punctuation">{</span>    uint i <span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> ms<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">112</span><span class="token punctuation">;</span> j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            led_0 <span class="token operator">=</span> on<span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        led_0 <span class="token operator">=</span> off<span class="token punctuation">;</span>        led_1 <span class="token operator">=</span> on<span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        led_1 <span class="token operator">=</span> off<span class="token punctuation">;</span>        led_2 <span class="token operator">=</span> on<span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        led_2 <span class="token operator">=</span> off<span class="token punctuation">;</span>        led_3 <span class="token operator">=</span> on<span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        led_3 <span class="token operator">=</span> off<span class="token punctuation">;</span>        led_4 <span class="token operator">=</span> on<span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        led_4 <span class="token operator">=</span> off<span class="token punctuation">;</span>        led_5 <span class="token operator">=</span> on<span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        led_5 <span class="token operator">=</span> off<span class="token punctuation">;</span>        led_6 <span class="token operator">=</span> on<span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        led_6 <span class="token operator">=</span> off<span class="token punctuation">;</span>        led_7 <span class="token operator">=</span> on<span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        led_7 <span class="token operator">=</span> off<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="循环位移实现"><a href="#循环位移实现" class="headerlink" title="循环位移实现"></a>循环位移实现</h3><pre class=" language-c"><code class="language-c">P1 <span class="token operator">=</span> <span class="token number">0xfe</span>    <span class="token comment" spellcheck="true">//1111 1110</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P1 <span class="token operator">=</span> <span class="token function">_crol_</span><span class="token punctuation">(</span>P1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将P1左移一位</span><span class="token punctuation">}</span></code></pre><p>_crol_()函数的使用，必须要加上<code>#include "intrins.h"</code>，引入头文件，该函数的原型为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">_crol_</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> val<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>函数功能</strong>：以位形式将 <code>val</code> 左移 n 位，该函数与8051“RLA”指令相关。如果二进制数为 01010101 那么 _crol_(1) 左移1位后将高位补低位，结果10101010。</p><h3 id="移位操作实现"><a href="#移位操作实现" class="headerlink" title="移位操作实现"></a>移位操作实现</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    P1 <span class="token operator">=</span> <span class="token number">0xfe</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        P1 <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        P1 <span class="token operator">=</span> P1 <span class="token operator">|</span> <span class="token number">0X01</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过每次位移一位，再与<code>0x01</code>进行或操作，这样每次都有一位是低电位，从而实现流水灯。</p><h2 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用的不完全填坑指南</title>
      <link href="/hexo-1.html"/>
      <url>/hexo-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="在内容里-不要与-紧挨着"><a href="#在内容里-不要与-紧挨着" class="headerlink" title="在内容里 # 不要与 { 紧挨着"></a>在内容里 # 不要与 { 紧挨着</h2><p>例如我的问题：</p><pre><code>$\color{black}{red}$</code></pre><p>出现错误时，黑色我用的是<code>#000</code>而不是<code>black</code>，然后在执行<code>hexo g</code>会有如下报错：</p><pre class=" language-shell"><code class="language-shell">Template render error: (unknown path)  Error: expected end of comment, got end of file  ...</code></pre><p>我的解决方法很特殊，一般只在{ 与 # 之间添加一个空格即可。</p><h2 id="尽量不要将-和-连接在一起"><a href="#尽量不要将-和-连接在一起" class="headerlink" title="尽量不要将{和{连接在一起"></a>尽量不要将<code>{和{</code>连接在一起</h2><ul><li><p>报错信息</p><pre class=" language-shell"><code class="language-shell">Template render error: (unknown path) [Line XX, Column XX]  expected variable end  ...</code></pre><p>后面还会附带文章的html代码，指出错误所在的准确位置；</p></li><li><p>报错原因</p><pre class=" language-markdown"><code class="language-markdown">机器周期=$12\times{ {1}\over{12}}MHz$=$1\mu{s}$。 </code></pre><p>经过查阅后发现， hexo 的文章渲染使用的是 <code>Nunjucks</code> ，因为在使用<code>mathjax</code>公式，造成了<code>{ {</code>重叠，而它会在生成文章时将那几个大括号识别成自己的语法，这样就会报错。。</p></li><li><p>解决方法</p><p>我的解决方法很弱智，但是有用，<strong>在<code>{和{</code>间添加空格</strong>，OK！</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 spacedesk 连接多个副屏</title>
      <link href="/tutorial-1.html"/>
      <url>/tutorial-1.html</url>
      
        <content type="html"><![CDATA[<p>因为最近一直在学习安卓，在开发过程中，需要查看开源项目的文档，笔记本的15.6的显示屏就完全不够用了，想着自己还有一块连接台式主机的显示器，就差一根VGA数据线了。</p><h2 id="连接显示器"><a href="#连接显示器" class="headerlink" title="连接显示器"></a>连接显示器</h2><ul><li>闲置显示屏</li><li>VGA或HDMI等连接线</li></ul><p>连接好后，在<strong>设置-&gt;系统-&gt;显示</strong>中，设置为<code>将桌面扩展到此显示器</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/pc/fp.png" alt=""></p><p>并且可以调节显示器的位置：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/pc/fp2.png" alt=""></p><h2 id="连接安卓手机"><a href="#连接安卓手机" class="headerlink" title="连接安卓手机"></a>连接安卓手机</h2><p>首先主机和客户端需要在同一局域网内，其他的交给软件实现就行了，<strong>spacedesk</strong>官方下载：<a href="http://www.spacedesk.net/" target="_blank" rel="noopener">http://www.spacedesk.net/</a></p><p>网盘下载：</p><ul><li>主机：<a href="https://pan.baidu.com/s/17DU1eGAXyKC7m2RJrsFlGw" target="_blank" rel="noopener">https://pan.baidu.com/s/17DU1eGAXyKC7m2RJrsFlGw</a></li><li>客户端：<a href="https://pan.baidu.com/s/1XJxupSaaymkjzbdDPAwREw" target="_blank" rel="noopener">https://pan.baidu.com/s/1XJxupSaaymkjzbdDPAwREw</a></li></ul><p>笔记本上开启主机端后，手机客户端，打开后点击已有的主机端即可：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Tutorials/pc/fp3.jpg" alt="img"></p><p>最后放一张效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn/hexo_images/Tutorials/pc/fp4.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 副屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习及开发中的Java语法及理论学习</title>
      <link href="/android-1.html"/>
      <url>/android-1.html</url>
      
        <content type="html"><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><h3 id="理解java回调机制"><a href="#理解java回调机制" class="headerlink" title="理解java回调机制"></a>理解java回调机制</h3><h3 id="android开发中的同步和异步区别的理解"><a href="#android开发中的同步和异步区别的理解" class="headerlink" title="android开发中的同步和异步区别的理解"></a>android开发中的同步和异步区别的理解</h3><ul><li><p>同步执行的话，就是程序会呆板地从头执行到尾，耗时间的东西不执行完，程序不会继续往下走，等待时间长的话，有时候就会造成失去响应了。</p><p>异步的好处，就是把一些东西，特别是耗时间的东西扔到后台去运行了(doInBackground)，程序可以继续做自己的事情，防止程序卡在那里失去响应。</p></li><li><p>同步是指两个线程的运行是相关的，其中一个线程要阻塞等待另外一个线程的运行。<br>异步的意思是两个线程毫无相关，自己运行自己的。</p></li><li><p>同步是指：发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式。<br>异步是指：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式。</p></li><li><p>同步：提交请求-&gt;等待服务器处理-&gt;处理完毕返回 这个期间客户端浏览器不能干任何事<br>异步: 请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕</p></li><li><p>同步就是你叫我去吃饭，我听到了就和你去吃饭；如果没有听到，你就不停的叫，直到我告诉你听到了，才一起去吃饭。</p><p>异步就是你叫我，然后自己去吃饭，我得到消息后可能立即走，也可能等到下班才去吃饭。  </p></li><li><p><strong>个人理解</strong>：</p><ul><li>同步就是两个人一起工作，必须前一个人把手上的活干完，第二个人才能开始干</li><li>异步则是两个人分开各自闷声发大财，相互没影响</li></ul></li></ul><h2 id="indexOf-和-lastIndexOf"><a href="#indexOf-和-lastIndexOf" class="headerlink" title="indexOf 和 lastIndexOf"></a>indexOf 和 lastIndexOf</h2><p>从名字上来看，二者都是索引，区别是：</p><ul><li>indexOf 是查询某个字符子串在字符串中<strong>首次</strong>出现的位置（索引值）</li><li>lastIndexOf 有四种重载：<ul><li><strong>public int lastIndexOf(int ch):</strong> 返回指定字符在此字符串中最后一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</li><li><strong>public int lastIndexOf(int ch, int fromIndex):</strong> 返回指定字符在此字符串中最后一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</li><li><strong>public int lastIndexOf(String str):</strong> 返回指定字符在此字符串中最后一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</li><li><strong>public int lastIndexOf(String str, int fromIndex):</strong> 返回指定字符在此字符串中最后一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</li></ul></li></ul><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String Str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"mahoo12138"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String SubStr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"oo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String SubStr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"12138"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"查找字符 o 最后出现的位置 :"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span> <span class="token string">'o'</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"从第4个位置查找字符 o 最后出现的位置 :"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"子字符串 SubStr1 最后出现的位置:"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> Str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span> SubStr1 <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"从第2个位置开始搜索子字符串 SubStr1 最后出现的位置 :"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> Str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span> SubStr1<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"子字符串 SubStr2 最后出现的位置 :"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span> SubStr2 <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="System-out-println-方法和toString-方法"><a href="#System-out-println-方法和toString-方法" class="headerlink" title="System.out.println()方法和toString()方法"></a>System.out.println()方法和toString()方法</h2><p>Object有个toString实例方法。Object类的 toString 方法返回一个字符串，该字符串由类名（对象是该类的一个实例）、at标记符“@”和此对象哈希码的无符号十六进制表示组成。换句话说，该方法返回一个字符串，它的值等于：</p><pre class=" language-java"><code class="language-java"><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token string">'@'</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>而在Java中，所有的对象都是继承自Object，因此所有的Java对象都具有<code>toString</code>方法。</p><p>但很多类都重写了Object类的<code>toString</code>方法，用于返回可以表述该对象信息的字符串。</p><p>当程序使用<code>System.out.println()</code>方法输出一个对象，或者把某个对象和字符串进行连接运算时，系统会自动调用该对象的<code>toString</code>方法返回该对象的字符串表示。</p><p>当然，空引用变量调用toString方法，会引起空指针异常。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android学习之MD设计模式</title>
      <link href="/android-3.html"/>
      <url>/android-3.html</url>
      
        <content type="html"><![CDATA[<h2 id="添加库依赖"><a href="#添加库依赖" class="headerlink" title="添加库依赖"></a>添加库依赖</h2><pre class=" language-java"><code class="language-java">implementation <span class="token string">'com.android.support:design:28.0.0'</span></code></pre><h2 id="Snackbar控件"><a href="#Snackbar控件" class="headerlink" title="Snackbar控件"></a>Snackbar控件</h2><p>提供一个可供响应的通知提醒</p><pre class=" language-java"><code class="language-java">Snackbar<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token string">"这是一个Snackbar"</span><span class="token punctuation">,</span>Snackbar<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"点击事件"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"点击事件发生"</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Snackbar<span class="token punctuation">.</span>Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDismissed</span><span class="token punctuation">(</span>Snackbar transientBottomBar<span class="token punctuation">,</span> <span class="token keyword">int</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDismissed</span><span class="token punctuation">(</span>transientBottomBar<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"onDismissed - 消失"</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onShown</span><span class="token punctuation">(</span>Snackbar sb<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onShown</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>               Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"onShown - 出现"</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="TextInputLayout控件"><a href="#TextInputLayout控件" class="headerlink" title="TextInputLayout控件"></a>TextInputLayout控件</h2><p>作为editText的容器，当点击EditText时，hint字符会自动移到EditText的左上角。常用来做登录界面的帐号密码输入。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.google.android.material.textfield.TextInputLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">app:</span>counterEnabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name">是否开启计数器</span>                                                   <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>drawableStart</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span>        <span class="token attr-name">显示一个提示图片</span>              <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.google.android.material.textfield.TextInputLayout</span><span class="token punctuation">></span></span></code></pre><h2 id="Tablayout控件"><a href="#Tablayout控件" class="headerlink" title="Tablayout控件"></a>Tablayout控件</h2><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.google.android.material.tabs.TabLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorPrimary<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tab_layout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>com.google.android.material.tabs.TabLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.viewpager.widget.ViewPager</span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FFF<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/view_page<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>layout_behavior</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/appbar_scrolling_view_behavior<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.viewpager.widget.ViewPager</span><span class="token punctuation">></span></span></code></pre><h3 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h3><pre><code>app:tabIndicatorColor ：指示线的颜色app:tabIndicatorHeight ：指示线的高度app:tabSelectedTextColor ： tab选中时的字体颜色app:tabMode="scrollable" ： 默认是fixed，固定的；scrollable：可滚动的</code></pre><h2 id="CardView控件"><a href="#CardView控件" class="headerlink" title="CardView控件"></a>CardView控件</h2><p>实质为带有圆角背景和阴影的FrameLayout</p><h3 id="常见属性-1"><a href="#常见属性-1" class="headerlink" title="常见属性"></a>常见属性</h3><pre><code>android：cardBackgroundColor ：设置背景android：cardCornerRadius ：设置圆角app：cardElevation ：设置阴影大小app：cardMaxElevation ：设置阴影的最大高度app：contentPadding ：内容距离边界的距离app：contentPaddingXXX ：设置局部的内边距，替换Padding的，在CardView中设置Padding是不起作用的。app：cardUseCompatPadding ：如果您需要将CardView与其他视图对齐，可能在21以下，可以将此标志设置为真，CardView将在21之后的平台上添加相同的填充值。app：cardPreventCornerOverlap ：是否裁剪边界以防止重叠</code></pre><h2 id="DrawerLayout控件"><a href="#DrawerLayout控件" class="headerlink" title="DrawerLayout控件"></a>DrawerLayout控件</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Material Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android学习之实现启动页面</title>
      <link href="/android-2.html"/>
      <url>/android-2.html</url>
      
        <content type="html"><![CDATA[<h2 id="实现一个启动页面"><a href="#实现一个启动页面" class="headerlink" title="实现一个启动页面"></a>实现一个启动页面</h2><p>在res/drawable下，创建一个xml文件，即为启动页面的效果：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layer-list</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/colorPrimary<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bitmap</span>            <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layer-list</span><span class="token punctuation">></span></span></code></pre><p>这里关于layer-list的使用可以移步：</p><ul><li><a href="https://blog.csdn.net/north1989/article/details/53485729/" target="_blank" rel="noopener"> layer-list的基本使用介绍</a></li></ul><p>例子使用的启动页为两层，第一层为程序的主色调，第二层为程序的图标，并且位于中间位置；</p><h2 id="绑定到活动"><a href="#绑定到活动" class="headerlink" title="绑定到活动"></a>绑定到活动</h2><p>在values/style.xml内新建一个主题：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SplashTheme<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.AppCompat.Light.NoActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        &lt;item name=<span class="token string">"android:windowBackground"</span>>@drawable/splash&lt;/item>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span></code></pre><p>主题选择继承<code>Theme.AppCompat.Light.NoActionBar</code>，并且指定背景为刚才创建的界面；</p><p>新建一个SplashActivity活动，在AndroidManifest.xml内设置为启动活动，并为其设置上一步的主题：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.SplashActivity<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/SplashTheme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span></code></pre><h2 id="正确的打开页面"><a href="#正确的打开页面" class="headerlink" title="正确的打开页面"></a>正确的打开页面</h2><p>编辑SplashActivity代码，设置启动逻辑：</p><pre class=" language-java"><code class="language-java">Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果页面跳转过快，可以设置程序休眠：</p><pre class=" language-java"><code class="language-java">Thread mythread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>mythread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>到这里就大功告成了：</p><iframe height="576" width="324" src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/Android/splash.gif"></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android学习之掉坑记录</title>
      <link href="/android-4.html"/>
      <url>/android-4.html</url>
      
        <content type="html"><![CDATA[<h2 id="Android8-0及以上版本自定义广播无法接收问题"><a href="#Android8-0及以上版本自定义广播无法接收问题" class="headerlink" title="Android8.0及以上版本自定义广播无法接收问题"></a>Android8.0及以上版本自定义广播无法接收问题</h2><p>今天在学习广播过程中发现，自定义广播无效，由于使用的学习参考书是基于Android7.0的，所以，很自然的想到了可能由于版本问题，网上一查，果然。</p><p><strong>原因</strong>：Android8在静态广播的使用上做了一些限制</p><blockquote><p><a href="https://developer.android.google.cn/about/versions/oreo/background#broadcasts" target="_blank" rel="noopener">广播限制</a>：除了有限的例外情况，应用程序无法使用其清单注册隐式广播。他们仍然可以在运行时注册这些广播，并且他们可以使用清单注册专门针对其应用的显式广播。</p></blockquote><p><a href="https://developer.android.google.cn/about/versions/oreo/background" target="_blank" rel="noopener">https://developer.android.google.cn/about/versions/oreo/background</a></p><p><strong>解决方法：</strong></p><ul><li><p>保留原来的静态广播，但是加入Component参数</p><pre class=" language-java"><code class="language-java">Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.mahoo.broadcast.MY_BROADCAST #自定义广播"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token string">"com.mahoo.broadcasttest #包名"</span><span class="token punctuation">,</span><span class="token string">"com.mahoo.broadcasttest.MyBroadcastReceiver #广播接收器地址"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>使用动态注册广播接收器代替静态注册广播接收器</p><pre class=" language-java"><code class="language-java"># 暂时不会</code></pre></li></ul><h2 id="Android8-0及以上系统通知栏的适配"><a href="#Android8-0及以上系统通知栏的适配" class="headerlink" title="Android8.0及以上系统通知栏的适配"></a>Android8.0及以上系统通知栏的适配</h2><p>还是一样原因由于参考书较老旧，出现通知栏适配无效的问题，详细地说是方法已被弃用：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/Study/Android/notification.png" alt=""></p><p>从Android 8.0系统开始，Google引入了<strong>通知渠道</strong>这个概念。</p><blockquote><p>通知渠道，顾名思义，就是每条通知都要属于一个对应的渠道。每个App都可以自由地创建当前App拥有哪些通知渠道，但是这些通知渠道的控制权都是掌握在用户手上的。用户可以自由地选择这些通知渠道的重要程度，是否响铃、是否振动、或者是否要关闭这个渠道的通知。</p></blockquote><p><strong>解决方法：</strong></p><p>创建通知渠道，在构建通知对象的时候，多传入一个通知渠道ID</p><pre class=" language-java"><code class="language-java">NotificationCompat<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String channelId<span class="token punctuation">)</span></code></pre><p>例如：</p><pre class=" language-java"><code class="language-java">String channelId <span class="token operator">=</span> <span class="token string">"chat"</span><span class="token punctuation">;</span>String channelName <span class="token operator">=</span> <span class="token string">"聊天消息"</span><span class="token punctuation">;</span><span class="token keyword">int</span> importance <span class="token operator">=</span> NotificationManager<span class="token punctuation">.</span>IMPORTANCE_HIGH<span class="token punctuation">;</span>NotificationChannel channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationChannel</span><span class="token punctuation">(</span>channelId<span class="token punctuation">,</span> channelName<span class="token punctuation">,</span>importance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向系统注册通知渠道，注册后不能改变重要性以及其他通知行为</span>NotificationManager notificationmanager <span class="token operator">=</span> <span class="token punctuation">(</span>NotificationManager<span class="token punctuation">)</span> <span class="token function">getSystemService</span><span class="token punctuation">(</span>NOTIFICATION_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构建通知渠道</span>notificationManager<span class="token punctuation">.</span><span class="token function">createNotificationChannel</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>Notification notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotificationCompat<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"chat"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setContentTitle</span><span class="token punctuation">(</span><span class="token string">"收到一条聊天消息"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setContentText</span><span class="token punctuation">(</span><span class="token string">"通知栏适配成功了"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setWhen</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSmallIcon</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>icon<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setLargeIcon</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>icon<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAutoCancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//设置点击取消通知</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>manager<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注：</strong>例子参考于<a href="https://blog.csdn.net/guolin_blog/article/details/79854070" target="_blank" rel="noopener">Android通知栏微技巧，8.0系统中通知栏的适配</a></p><h2 id="Android9-0无法加载http的url"><a href="#Android9-0无法加载http的url" class="headerlink" title="Android9.0无法加载http的url"></a>Android9.0无法加载http的url</h2><p>因为从Android 9.0（API级别28）开始，默认情况下限制了明文流量的网络请求，对未加密流量不再信任，直接放弃请求。即http的url均无法在webview中加载，且报错为<code>net::ERR_CLEARTEXT_NOT_PERMITTED</code>。</p><p><strong>解决方法：</strong></p><ul><li><p><sub></sub>在<code>AndroidManifest.xml</code>中打开开关<sub></sub></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name">...</span>        <span class="token attr-name"><span class="token namespace">android:</span>usesCleartextTraffic</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">...</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre></li><li><p>res 下新建 xml 目录，创建文件：<code>network_security_config.xml</code> ，内容如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-config</span> <span class="token attr-name">cleartextTrafficPermitted</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">></span></span></code></pre><p>在 AndroidManifest.xml 的 <code>application</code> 标签添加配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name">...</span>        <span class="token attr-name"><span class="token namespace">android:</span>networkSecurityConfig</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@xml/network_security_config<span class="token punctuation">"</span></span>        <span class="token attr-name">...</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="安卓8-0以上前台服务通知栏常驻"><a href="#安卓8-0以上前台服务通知栏常驻" class="headerlink" title="安卓8.0以上前台服务通知栏常驻"></a>安卓8.0以上前台服务通知栏常驻</h2><p>这里有个小坑，在9.0中前台服务必须授予FOREGROUND_SERVICE权限：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.FOREGROUND_SERVICE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>具体直接查看代码：<a href="https://github.com/Mahoo12138/android_learn_demo/tree/master/ServiceTest" target="_blank" rel="noopener">Android_Service_Demo</a></p><h2 id="在webview中唤醒QQ实现程序的反馈"><a href="#在webview中唤醒QQ实现程序的反馈" class="headerlink" title="在webview中唤醒QQ实现程序的反馈"></a>在webview中唤醒QQ实现程序的反馈</h2><p>重载<code>shouldOverrideUrlLoading</code>方法，因为网页一般调用QQ使用<em><a href="http://wpa.qq.com/msgrd?v=3&amp;uin=QQ号&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener">http://wpa.qq.com/msgrd?v=3&amp;uin=QQ号&amp;site=qq&amp;menu=yes</a></em>，通过抓包发现，实际还发送了一个这样的请求<em>mqqwpa://im/chat</em>，此时用一个intent调用QQ即可。</p><pre class=" language-java"><code class="language-java">webView<span class="token punctuation">.</span><span class="token function">setWebViewClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebViewClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldOverrideUrlLoading</span><span class="token punctuation">(</span>WebView view<span class="token punctuation">,</span> WebResourceRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span> <span class="token operator">||</span>request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shouldOverrideUrlLoading</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">,</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu使用笔记</title>
      <link href="/linux-1.html"/>
      <url>/linux-1.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul><li><code>ls</code>：列举当前目录<ul><li>-a ：显示所有的文件，包括隐藏文件</li><li>-b ：把文件名中不可输出的字符用反斜杠加字符编号形式输出</li><li>-l ：显示文件详细信息（命令<code>ll</code>相当于<code>ls -l</code>）</li></ul></li><li><code>cd</code>：回到当前用户工作目录<ul><li><strong>.</strong>：当前目录</li><li>*<em>.. *</em>：父目录</li><li><strong>/</strong>：根目录</li></ul></li><li><code>pwd</code>：查看当前目录</li><li><code>clear</code>：清屏</li></ul><h1 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h1><ul><li><p><strong>step 1：</strong>编辑<em>/etc/apt/sources.list</em>，将默认的<strong><a href="http://archive.ubuntu.com/ubuntu/" target="_blank" rel="noopener">http://archive.ubuntu.com/ubuntu/</a></strong>，修改为：</p><ul><li>阿里云源: <a href="http://mirrors.aliyun.com/ubuntu/" target="_blank" rel="noopener">http://mirrors.aliyun.com/ubuntu/</a></li><li>清华源: <a href="http://mirrors.tuna.tsinghua.edu.cn/ubuntu/" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a></li></ul></li><li><p><strong>step 2：</strong>更新源</p><pre class=" language-shell"><code class="language-shell">sudo apt-get update</code></pre></li><li><p><strong>step 3：</strong>更新软件</p><pre class=" language-shell"><code class="language-shell">sudo apt-get dist-upgradesudo apt-get upgrade</code></pre></li></ul><h1 id="安装和使用Screen"><a href="#安装和使用Screen" class="headerlink" title="安装和使用Screen"></a>安装和使用Screen</h1><ul><li><p>安装Screen</p><pre class=" language-shell"><code class="language-shell">apt-get install screen</code></pre></li><li><p>创建一个名为<code>Test</code>的会话：</p><pre class=" language-shell"><code class="language-shell">screen -S Test</code></pre></li><li><p>使用<code>Ctrl + A + D</code>退出回话</p></li><li><p>查看所有会话：</p><pre class=" language-shell"><code class="language-shell">screen -ls</code></pre></li><li><p>重新连接会话：</p><pre class=" language-shell"><code class="language-shell">screen -r Test</code></pre></li></ul><h1 id="配置Python3环境"><a href="#配置Python3环境" class="headerlink" title="配置Python3环境"></a>配置Python3环境</h1><ul><li><p>安装<code>python3</code></p><pre class=" language-shell"><code class="language-shell">apt-get install python3</code></pre></li><li><p>安装<code>pip</code></p><pre class=" language-shell"><code class="language-shell">apt-get install python3-pip</code></pre><ul><li><p>升级<code>pip</code></p><pre class=" language-shell"><code class="language-shell">pip3 install --upgrade pip</code></pre></li></ul></li><li></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin语言基础学习</title>
      <link href="/android-5.html"/>
      <url>/android-5.html</url>
      
        <content type="html"><![CDATA[<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><h2 id="定义包"><a href="#定义包" class="headerlink" title="定义包"></a>定义包</h2><p>包的声明应处于源文件顶部：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">package</span> my<span class="token punctuation">.</span>demo<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token operator">*</span><span class="token comment" spellcheck="true">//...</span></code></pre><p>目录与包的结构无需匹配：源代码可以放在文件系统的任意位置。</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>带有两个<code>Int</code>参数，返回<code>Int</code>函数：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sum</span> <span class="token punctuation">(</span>a<span class="token operator">:</span>Int<span class="token punctuation">,</span>b<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span>Int<span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">}</span></code></pre><a id="more"></a><p>将表达式作为函数体，返回值类型自动推送的函数：</p><pre class=" language-Kotlin"><code class="language-Kotlin">fun sum (a:Int,b:Int) = a + b</code></pre><p>函数返回无意义的值：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printSum</span><span class="token punctuation">(</span>a<span class="token operator">:</span>Int<span class="token punctuation">,</span>b<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum <span class="token interpolation variable">$a</span> and <span class="token interpolation variable">$b</span> is <span class="token interpolation"><span class="token delimiter variable">${</span>a<span class="token operator">+</span>b<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>Unit</code>返回类型可以省略：</p><pre class=" language-Kotlin"><code class="language-Kotlin">fun printSum(a:Int,b:Int){    println("sum of $a and $b is ${a+b}")}</code></pre><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>定义<strong>只读局部变量</strong>使用关键字<code>val</code>定义。只能为其赋值一次。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> a<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">//立即赋值</span><span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true">//自动推出‘Int’类型</span><span class="token keyword">val</span> c<span class="token operator">:</span>Int        <span class="token comment" spellcheck="true">//如果没有赋初值，则不能省略</span>c <span class="token operator">=</span> <span class="token number">2</span>            <span class="token comment" spellcheck="true">//明确赋值</span></code></pre><p>可重新赋值的变量使用<code>var</code>关键字：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span>x <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>顶层变量：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span></code></pre><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>正如Java，Kotlin支持行注释及块注释。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 这是一个行注释</span><span class="token comment" spellcheck="true">/* 这是一个多行的   块注释。*/</span></code></pre><p>与Java不同的是，Kotlin的块注释可以嵌套。</p><h2 id="使用字符串模板"><a href="#使用字符串模板" class="headerlink" title="使用字符串模板"></a>使用字符串模板</h2><p>使用字符串模板的符号为（<code>$</code>）。在<code>$</code>符号后面加上变量名或大括号中的表达式</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">val</span> s1 <span class="token operator">=</span> <span class="token string">"a is <span class="token interpolation variable">$a</span>"</span><span class="token comment" spellcheck="true">// 模板中的简单名称</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">val</span> s2 <span class="token operator">=</span> <span class="token string">"${s1.replace("</span><span class="token keyword">is</span><span class="token string">","</span>was<span class="token string">")},but now is <span class="token interpolation variable">$a</span>"</span><span class="token comment" spellcheck="true">//模板中的任意表达式</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span></code></pre><p>执行结果：</p><pre><code>a was 1, but now is 2</code></pre><h2 id="声明可空变量"><a href="#声明可空变量" class="headerlink" title="声明可空变量"></a>声明可空变量</h2><p>在Kotlin中当我们不确定某个属性或变量一定不为空时，我们就把它声明为<strong>可空变量</strong>.</p><p>可空变量的特点：</p><ul><li>在声明的时候一定要用标准的声明格式定义。不能用可推断类型的简写；</li><li>变量类型后面的<code>?</code>符号不能省略。不然就和普通的变量没区别了；</li><li>其初始化的值可以为<code>null</code>或确定的变量值。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Test<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//声明可空变量</span>    <span class="token keyword">var</span> a<span class="token operator">:</span>Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> b<span class="token operator">:</span>Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="常量的用法"><a href="#常量的用法" class="headerlink" title="常量的用法"></a>常量的用法</h2><p>在Kotlin中<code>val</code>修饰的还不是常量，他只是个不能修改的变量。常量的定义还需要再<code>val</code>关键字前加上<code>const</code>关键字。即：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">const</span> <span class="token keyword">val</span> NUM_A <span class="token operator">=</span> <span class="token number">6</span></code></pre><p>其特点：<strong><code>const</code>只能修饰<code>val</code>，不能修饰<code>var</code></strong>。</p><p>声明常量的三种方式：</p><ol><li>在顶层声明；</li><li>在<code>object</code>修饰的类中声明，在<code>kotlin</code>中称为<strong>对象声明</strong>；</li><li>在伴生对象中声明。</li></ol><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 1.顶层声明</span><span class="token keyword">const</span> <span class="token keyword">val</span> Str_A <span class="token operator">:</span>String <span class="token operator">=</span> <span class="token string">"顶层声明"</span><span class="token comment" spellcheck="true">// 2.在object修饰的类中</span><span class="token keyword">object</span> TestConst<span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">val</span> Str_B <span class="token operator">=</span> <span class="token string">"object修饰的类中"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3.在伴生对象中</span><span class="token keyword">class</span> TestClass<span class="token punctuation">{</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> Str_C <span class="token operator">=</span> <span class="token string">"在伴生对象中"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h3 id="1-数字的内置类型"><a href="#1-数字的内置类型" class="headerlink" title="1. 数字的内置类型"></a>1. 数字的内置类型</h3><ul><li><code>Byte</code> =&gt; 字节 =&gt; 8位</li><li><code>Short</code> =&gt; 短整型 =&gt; 16位</li><li><code>Int</code> =&gt; 整型 =&gt; 32位</li><li><code>Long</code> =&gt; 长整型 =&gt; 64位</li><li><code>Float</code> =&gt; 浮点型 =&gt; 32位</li><li><code>Double</code> =&gt; 双精度浮点型 =&gt; 64位</li></ul><p>注意：</p><ul><li>长整型在数值末用大写字母L标记</li><li>单精度浮点型由字母F（大写小写无妨）标记<h3 id="2-进制数"><a href="#2-进制数" class="headerlink" title="2. 进制数"></a>2. 进制数</h3></li></ul><p>Kotlin不支持八进制数</p><h3 id="3-数字类型字面常量的下划线"><a href="#3-数字类型字面常量的下划线" class="headerlink" title="3. 数字类型字面常量的下划线"></a>3. 数字类型字面常量的下划线</h3><p>作用：<strong>分割数字进行分组，使数字常量更易读</strong></p><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> oneMillion <span class="token operator">=</span> 1_000_000<span class="token keyword">val</span> phoneNum <span class="token operator">=</span> 155_0746_2014</code></pre><h3 id="4-装箱与拆箱"><a href="#4-装箱与拆箱" class="headerlink" title="4. 装箱与拆箱"></a>4. 装箱与拆箱</h3><p>装箱就是值类型转换为object类型，拆箱相反：object转化为值类型。在<code>kotlin</code>中，存在数字的装箱，但是没有拆箱。因为<code>kotlin</code>是没有基本数据类型的，<code>Kotlin</code>是万物皆对象的原则。</p><p>在<code>kotlin</code>中要实现装箱操作，首先要了解可空引用。即类似<code>Int?</code>(只限数值类型)此类的：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numValue<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// 装箱的过程，装箱后其值是没有变化的</span><span class="token keyword">val</span> numValueBox<span class="token operator">:</span>Int <span class="token operator">=</span> numValue</code></pre><h4 id="两个数值的比较"><a href="#两个数值的比较" class="headerlink" title="两个数值的比较"></a>两个数值的比较</h4><ul><li>判断两个数值是否相等<code>==</code></li><li>判断两个数值在内存中的地址是否相等<code>===</code></li></ul><h3 id="5-转换"><a href="#5-转换" class="headerlink" title="5. 转换"></a>5. 转换</h3><ul><li><p>显式转换</p><p>较小的类型不会被隐式转换位更大的类型，故而系统提供了显式转换：</p><ul><li><code>toByte()</code> =&gt; 转换为字节型</li><li><code>toShort()</code> =&gt; 转换为短整型</li><li><code>toInt()</code> =&gt; 转换为整型</li><li><code>toLong()</code> =&gt; 转换为长整型</li><li><code>toFloat()</code> =&gt; 转换为浮点型</li><li><code>toDouble()</code> =&gt; 转换为双精度浮点型</li><li><code>toChar()</code> =&gt; 转换为字符型</li><li><code>toString()</code> =&gt; 转换为字符串型</li></ul></li><li><p>隐式转换</p><p>类型是从上下文推断出来的，即算术运算则被重载为适当的转换：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> num <span class="token operator">=</span> <span class="token number">30L</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 30L + 12 -> Long + Int => Long</span></code></pre></li></ul><h3 id="6-位运算符"><a href="#6-位运算符" class="headerlink" title="6. 位运算符"></a>6. 位运算符</h3><p>// 。。。。。</p><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><h3 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1. 关键字"></a>1. 关键字</h3><p><code>Boolean</code>关键字表示布尔类型，并且其值有<code>ture</code>和<code>false</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> isNum<span class="token operator">:</span>BooleanisNum <span class="token operator">=</span> <span class="token boolean">false</span></code></pre><h3 id="2-逻辑操作符"><a href="#2-逻辑操作符" class="headerlink" title="2. 逻辑操作符"></a>2. 逻辑操作符</h3><ul><li>‘||’ =&gt; 逻辑或</li><li>‘&amp;&amp;’ =&gt; 逻辑与</li><li>‘ ! ’ =&gt; 逻辑非</li></ul><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><h3 id="1-关键字-1"><a href="#1-关键字-1" class="headerlink" title="1. 关键字"></a>1. 关键字</h3><p><code>Char</code>表示字符型，字符变量用单引号(‘’)表示。并且不能直接视为数字，不过可以通过显式转换为数字：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> char_1<span class="token operator">:</span>Charchar <span class="token operator">=</span> <span class="token string">'a'</span>char <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">//报错</span></code></pre><h3 id="2-显示转换为其他类型"><a href="#2-显示转换为其他类型" class="headerlink" title="2. 显示转换为其他类型"></a>2. 显示转换为其他类型</h3><p>字符型的变量不仅会可以转换为数字，同时也可转换为其他类型：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> var1 <span class="token operator">=</span> char_1<span class="token punctuation">.</span><span class="token function">toByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> var2 <span class="token operator">=</span> char_1<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//...</span></code></pre><p>除了类型转换，当变量为英文字母时还支持大小写转换：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> charA<span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">var</span> charB<span class="token operator">:</span>Char <span class="token operator">=</span> <span class="token string">'B'</span><span class="token keyword">var</span> result<span class="token operator">:</span>Charresult <span class="token operator">=</span> charA<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//转换为大写</span>result <span class="token operator">=</span> charB<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//转换为小写</span></code></pre><h3 id="3-字符转义"><a href="#3-字符转义" class="headerlink" title="3. 字符转义"></a>3. 字符转义</h3><ul><li><code>\t</code> =&gt; 制表符</li><li><code>\n</code> =&gt; 换行符</li><li><code>\b</code>=&gt; 退格键</li><li><code>\r</code>=&gt; 回车键</li><li><code>\\</code>=&gt; 反斜杠</li><li><code>\'</code>=&gt; 单引号</li><li><code>\$</code> =&gt; 美元符号</li><li>**其他的任何字符请使用Unicode转义序列语法，例如：’\uFF00’</li></ul><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><h3 id="1-关键字-2"><a href="#1-关键字-2" class="headerlink" title="1. 关键字"></a>1. 关键字</h3><p><code>String</code>表示字符串类型。其实不可变的。所以字符串的元素可以通过索引操作的字符：<code>str[index]</code>来访问。可以使用<code>for</code>循环迭代字符串：其中<code>str[index]</code>中的<code>str</code>要为目标字符串，<code>index</code>才能为索引：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> str<span class="token operator">:</span>Sting <span class="token operator">=</span> <span class="token string">"kotlin"</span><span class="token comment" spellcheck="true">//迭代</span><span class="token keyword">for</span> <span class="token punctuation">(</span>s <span class="token keyword">in</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="2-字符串字面量"><a href="#2-字符串字面量" class="headerlink" title="2. 字符串字面量"></a>2. 字符串字面量</h3><p>在<code>Kotlin</code>中，字符串字面量有两种类型：</p><ul><li>包含转义字符的字符串，转义包括（\t, \n等），不包括转义字符串的也同属此类型</li><li>包含任意字符的字符串，有三重引号（<code>"""..."""</code>）表示</li></ul><h2 id="数组型"><a href="#数组型" class="headerlink" title="数组型"></a>数组型</h2><ul><li><code>Kotlin中</code>数组由<code>Array&lt;T&gt;表示</code></li><li>创建数组的三个函数：<ul><li><code>arrayOf()</code></li><li><code>arrayOfNulls()</code></li><li>工厂函数（<code>Array()</code>）</li></ul></li></ul><h3 id="1-arrayOf"><a href="#1-arrayOf" class="headerlink" title="1. arrayOf()"></a>1. arrayOf()</h3><p>创建一个数组，参数是一个可变参数的泛型对象：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> arr1 <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token keyword">in</span> arr1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="2-arrayOfNulls"><a href="#2-arrayOfNulls" class="headerlink" title="2. arrayOfNulls()"></a>2. arrayOfNulls()</h3><p>用于创建一个指定数据类型且可以为空元素的，给定元素个数的数组：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arrayOfNulls<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 若不予数组赋值则arr3内元素皆为null</span></code></pre><h3 id="3-工厂函数"><a href="#3-工厂函数" class="headerlink" title="3. 工厂函数"></a>3. 工厂函数</h3><ul><li>使用工厂函数<code>Array()</code>，它使用数组大小和返回给定其索引的每个数组元素的初始值的函数。</li><li><code>Array()</code>=&gt; 第一个参数表示的个数，第二个参数则为使用其下标组成的表达式</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">{</span>index <span class="token operator">-></span> <span class="token punctuation">(</span>index<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token keyword">in</span> arr4<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>执行结果：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token number">0</span>    <span class="token number">2</span>    <span class="token number">4</span>    <span class="token number">6</span>    <span class="token number">8</span></code></pre><h3 id="4-原始类型数组"><a href="#4-原始类型数组" class="headerlink" title="4. 原始类型数组"></a>4. 原始类型数组</h3><p><code>kotlin</code>还有专门的类来表示原始类型的数组，没有装箱开销，它们分别是：</p><ul><li><code>ByteArray</code> =&gt; 表示字节型数组</li><li><code>ShortArray</code> =&gt; 表示短整型数组</li><li><code>IntArray</code> =&gt; 表示整型数组</li><li><code>LongArray</code> =&gt; 表示长整型数组</li><li><code>BooleanArray</code> =&gt; 表示布尔型数组</li><li><code>CharArray</code> =&gt; 表示字符型数组</li><li><code>FloatArray</code> =&gt; 表示浮点型数组</li><li><code>DoubleArray</code> =&gt; 表示双精度浮点型数组</li></ul><p><strong><code>Kotlin</code>不支持字符串类型这种原始类型的数组</strong></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> intArr<span class="token operator">:</span>IntArray <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">var</span> charArr<span class="token operator">:</span>CharArray <span class="token operator">=</span> <span class="token function">charArrayOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span></code></pre><h1 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p><code>kotlin</code>中的<code>if</code>语句很灵活，除了普通的判断，还可以实现表达式（实现三元运算符），及作为一个块的作用</p><h3 id="1-传统写法"><a href="#1-传统写法" class="headerlink" title="1. 传统写法"></a>1. 传统写法</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> numA <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">if</span> <span class="token punctuation">(</span>numA <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>$numA<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>$numA<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="2-Kotlin中的三元运算符"><a href="#2-Kotlin中的三元运算符" class="headerlink" title="2. Kotlin中的三元运算符"></a>2. <code>Kotlin</code>中的三元运算符</h3><p>在<code>Kotlin</code>中其实不存在三元运算符（<em>condition ？ then ： else</em>）这种运算，那是因为if语句的特性：<code>if</code>表达式会返回一个值，所以不需要三元运算符。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> numB<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numA <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">3</span> <span class="token keyword">else</span> <span class="token number">5</span><span class="token function">println</span><span class="token punctuation">(</span>numB<span class="token punctuation">)</span></code></pre><h3 id="3-作为一个块结构，并且最后一句表达式为块的值"><a href="#3-作为一个块结构，并且最后一句表达式为块的值" class="headerlink" title="3. 作为一个块结构，并且最后一句表达式为块的值"></a>3. 作为一个块结构，并且最后一句表达式为块的值</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> numA<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> numC<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>numA <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    numA <span class="token operator">=</span> <span class="token number">10</span>    numA<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numA <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    numA <span class="token operator">=</span> <span class="token number">20</span>    numA<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    numA <span class="token operator">=</span> <span class="token number">30</span>    numA<span class="token punctuation">}</span></code></pre><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><ul><li><code>for</code>循环提供迭代器用来遍历任何东西</li><li><code>for</code>循环数组被编译为一个基于索引的循环，它不会创建一个迭代器对象</li></ul><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li><p>递增</p><ul><li><p>关键字：<code>until</code></p></li><li><p>范围：<code>until[n,m]</code> =&gt; 大于等于n，小于m</p></li><li><p>例如：</p></li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 循环5次，且步长为1的递增</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>递减</p><ul><li>关键字：<code>downTo</code></li></ul><ul><li><p>范围：<code>downTo[n,m]</code> =&gt; 大于等于n，小于等于m，n &gt; m</p></li><li><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 循环5次，且步长为1的递减</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">15</span> downTo <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>符号(<code>..</code>)</p><p>表示递增循环的另外一种操作</p><ul><li><p>使用符号<code>..</code></p></li><li><p>范围：<code>..[n,m]</code> =&gt; 即<code>大于等于n,小于等于m</code></p></li><li><p>和<code>until</code>有区别，但更为简便，且范围不同</p></li><li><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">20</span><span class="token operator">..</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>设置步长</p><ul><li><p>关键字：<code>step</code></p></li><li><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">10</span> until <span class="token number">16</span> step <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h3 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h3><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token string">"asdfghjk"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arrayList <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> arrayList<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arrayList <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> arrayListTwo<span class="token punctuation">.</span>indices<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arrayList[<span class="token interpolation variable">$i</span>] => "</span> <span class="token operator">+</span> arrayList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arrayList <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> arrayList<span class="token punctuation">.</span><span class="token function">withIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"index => <span class="token interpolation variable">$index</span> \t value => <span class="token interpolation variable">$value</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="使用列表或数组的扩展函数遍历"><a href="#使用列表或数组的扩展函数遍历" class="headerlink" title="使用列表或数组的扩展函数遍历"></a>使用列表或数组的扩展函数遍历</h4><ul><li>数组或列表有一个成员或扩展函数<code>iterator()</code>实现了<code>Iterator&lt;T&gt;</code>接口，且该接口提供了<code>next()</code>与<code>hasNext()</code>两个成员或扩展函数</li><li>其一般和<code>while</code>循环一起使用</li></ul><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arrayList <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">var</span> iterator<span class="token operator">:</span> Iterator<span class="token operator">&lt;</span>Any<span class="token operator">></span> <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="when语句"><a href="#when语句" class="headerlink" title="when语句"></a>when语句</h2><p><code>when</code>语句类似于C类语言中的<code>switch</code>语句，不过比它更强大。</p><h3 id="实现switch语句功能"><a href="#实现switch语句功能" class="headerlink" title="实现switch语句功能"></a>实现switch语句功能</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">when</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token number">1</span> <span class="token operator">-></span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token number">2</span> <span class="token operator">-></span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    esle <span class="token operator">-></span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="与逗号结合"><a href="#与逗号结合" class="headerlink" title="与逗号结合"></a>与逗号结合</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">when</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 即值为1，2，3时都输出1</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token operator">-></span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="条件可以使用任意表达式"><a href="#条件可以使用任意表达式" class="headerlink" title="条件可以使用任意表达式"></a>条件可以使用任意表达式</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> num<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">when</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token boolean">true</span> <span class="token operator">-></span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"num > 5"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token boolean">false</span> <span class="token operator">-></span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"num &lt; 5"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"num = 5"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="检查值是否存在于集合或数组中"><a href="#检查值是否存在于集合或数组中" class="headerlink" title="检查值是否存在于集合或数组中"></a>检查值是否存在于集合或数组中</h3><ol><li><p>操作符</p><ul><li><code>in</code>在</li><li><code>!in</code>不在</li></ul></li><li><p>限定：只适用于数值类型</p></li></ol><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> arrayList <span class="token operator">=</span> <span class="token function">arayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">when</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">in</span> arrayList<span class="token punctuation">.</span><span class="token function">toIntArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 存在于arrayList数组中"</span><span class="token punctuation">)</span>    <span class="token keyword">in</span> <span class="token number">0</span> <span class="token operator">..</span> <span class="token number">10</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 属于0~10中"</span><span class="token punctuation">)</span>    <span class="token operator">!</span><span class="token keyword">in</span> <span class="token number">5</span> <span class="token operator">..</span><span class="token number">10</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 不属于5~10中"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"都错了！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="检查值是否为指定类型的值"><a href="#检查值是否为指定类型的值" class="headerlink" title="检查值是否为指定类型的值"></a>检查值是否为指定类型的值</h3><ol><li><p>操作符</p><ul><li>是<code>is</code></li><li>不是<code>!is</code></li></ul></li><li><p>注意：<code>kotlin</code>的智能转换可以访问类型的方法和属性</p></li></ol><p>例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">when</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">is</span> String <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是字符串"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是字符串"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//智能转换</span><span class="token keyword">var</span> a<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">when</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">!</span><span class="token keyword">is</span> Int <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$a</span> 不是一个整型的数"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">shl</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a => <span class="token interpolation variable">$a</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="不使用表达式的when语句"><a href="#不使用表达式的when语句" class="headerlink" title="不使用表达式的when语句"></a>不使用表达式的when语句</h3><p>表示为最简单的布尔表达式</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> array <span class="token operator">=</span> arrayOfNulls<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">when</span><span class="token punctuation">{</span>    <span class="token boolean">true</span> <span class="token operator">-></span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" <span class="token interpolation variable">$i</span> \t"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="其它语句"><a href="#其它语句" class="headerlink" title="其它语句"></a>其它语句</h2><ul><li><p>while语句</p></li><li><p>do while语句</p></li><li><p>跳转语句：return，break，continue</p></li></ul><p>与C类语言一致，不做赘述。</p><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><h3 id="简单一元"><a href="#简单一元" class="headerlink" title="简单一元"></a>简单一元</h3><table><thead><tr><th align="center">操作符</th><th align="center">重载</th></tr></thead><tbody><tr><td align="center">+a</td><td align="center">a.unaryPlus()</td></tr><tr><td align="center">-a</td><td align="center">a.unaryMinus()</td></tr><tr><td align="center">!a</td><td align="center">a.not()</td></tr></tbody></table><h3 id="复杂一元"><a href="#复杂一元" class="headerlink" title="复杂一元"></a>复杂一元</h3><table><thead><tr><th align="center">操作符</th><th align="center">重载</th><th align="center">表示</th></tr></thead><tbody><tr><td align="center">a++</td><td align="center">a.inc()</td><td align="center">a = a.also{ a.inc() }</td></tr><tr><td align="center">a–</td><td align="center">a.dec()</td><td align="center">a = a.also{ a.dec() }</td></tr><tr><td align="center">++a</td><td align="center">a.inc()</td><td align="center">a = a.inc().also{ a = it }</td></tr><tr><td align="center">–a</td><td align="center">a.dec()</td><td align="center">a = a.dec().also{ a = it }</td></tr></tbody></table><h2 id="二元操作符"><a href="#二元操作符" class="headerlink" title="二元操作符"></a>二元操作符</h2><h3 id="简单二元"><a href="#简单二元" class="headerlink" title="简单二元"></a>简单二元</h3><table><thead><tr><th align="center">操作符</th><th align="center">重载</th></tr></thead><tbody><tr><td align="center">a + b</td><td align="center">a.plus(b)</td></tr><tr><td align="center">a - b</td><td align="center">a.minus(b)</td></tr><tr><td align="center">a * b</td><td align="center">a.tiems(b)</td></tr><tr><td align="center">a / b</td><td align="center">a.div(b)</td></tr><tr><td align="center">a % b</td><td align="center">a.rem(b)</td></tr><tr><td align="center">a .. b</td><td align="center">a.rangTo(b)</td></tr></tbody></table><h3 id="复杂二元"><a href="#复杂二元" class="headerlink" title="复杂二元"></a>复杂二元</h3><table><thead><tr><th align="center">操作符</th><th align="center">表示</th><th align="center">重载</th></tr></thead><tbody><tr><td align="center">a += b</td><td align="center">a = a + b</td><td align="center">a = a.plus(b)</td></tr><tr><td align="center">a -= b</td><td align="center">a = a - b</td><td align="center">a = a.minus(b)</td></tr><tr><td align="center">a *= b</td><td align="center">a = a * b</td><td align="center">a = a.tiems(b)</td></tr><tr><td align="center">a /= b</td><td align="center">a = a / b</td><td align="center">a = a.div(b)</td></tr><tr><td align="center">a %= b</td><td align="center">a = a % b</td><td align="center">a = a.rem(b)</td></tr></tbody></table><h2 id="区间操作"><a href="#区间操作" class="headerlink" title="区间操作"></a>区间操作</h2><p>区间操作符：<code>..</code>，注意两个操作数都是整型</p><table><thead><tr><th align="center">操作符</th><th align="center">表示</th><th align="center">重载</th></tr></thead><tbody><tr><td align="center">a .. b</td><td align="center">a 到 b 中间的值</td><td align="center">a.rangeTo(b)</td></tr></tbody></table><h1 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h1><h2 id="可空类型，空安全"><a href="#可空类型，空安全" class="headerlink" title="可空类型，空安全"></a>可空类型，空安全</h2><h3 id="定义一个可空类型的变量"><a href="#定义一个可空类型的变量" class="headerlink" title="定义一个可空类型的变量"></a>定义一个可空类型的变量</h3><blockquote><p><strong>修饰符 变量名 : 类型? = 值</strong></p></blockquote><h3 id="判断可空类型的两种方式"><a href="#判断可空类型的两种方式" class="headerlink" title="判断可空类型的两种方式"></a>判断可空类型的两种方式</h3><ul><li><p>if…else… 判断</p></li><li><p>使用符号<code>?.</code>判断</p><p>该符号的用法为：<code>可空类型变量?.属性/方法</code>。如果可空类型变量为null是，返回null；</p><p>这种方法大量用于<strong>链式操作</strong>的用法中，能有效避免<code>空引用异常</code>，因为只要链式中有一个<code>null</code>，则整个表达式都为<code>null</code>。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习使用方法及错误记录</title>
      <link href="/git.html"/>
      <url>/git.html</url>
      
        <content type="html"><![CDATA[<h2 id="git使用记录"><a href="#git使用记录" class="headerlink" title="git使用记录"></a>git使用记录</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li><p>初始化仓库</p><pre class=" language-shell"><code class="language-shell">git init</code></pre></li><li><p>添加文件/文件夹到本地仓库</p><pre class=" language-shell"><code class="language-shell">git add file.txtgit add Directorygit add .    //添加当前目录所有项</code></pre></li><li><p>提交更改到本地仓库</p><pre class=" language-shell"><code class="language-shell">git commit -m "initial commit"</code></pre></li><li><p>关联远程仓库</p><pre class=" language-shell"><code class="language-shell">git remote add origin git@github.com:Mahoo12138/android_learn_demo.git</code></pre></li><li><p>推送到远程仓库</p><pre><code>git push origin master</code></pre></li><li><p>本地仓库删除文件</p><pre class=" language-shell"><code class="language-shell">git rm -r Directory</code></pre></li></ul><hr><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><ul><li><p>回退本地版本</p><ul><li><p>先找到回退版本的<code>commit_id</code>：</p><pre class=" language-shell"><code class="language-shell">git reflog</code></pre></li><li><p>然后回退版本</p><pre class=" language-shell"><code class="language-shell">git reset --hard commit_id</code></pre></li></ul></li><li><p>远程分支回退</p><ul><li><p>先回退本地分支</p></li><li><p>强制推送到远程分支</p><pre class=" language-shell"><code class="language-shell">git push -f origin master</code></pre><p><code>origin</code>是一个名字，指的是你的远程代码库的标签，而<code>master</code>就是这个远程代码库repository的主分支</p></li></ul></li></ul><hr><ul><li><p>将<code>dist</code>作为子分支推送到github</p><p><code>/dist</code> 目录需要被 git 记录，于是后面我们才可以用它作为子树（subtree），因此 <code>/dist</code> 不能被 <code>.gitignore</code> 规则排除，之后执行命令：</p><pre><code>git subtree push --prefix dist origin gh-pages</code></pre><ul><li><code>dist</code> 代表子树所在的目录名</li><li><code>origin</code> 是 remote name</li><li><code>gh-pages</code> 是目标分支名称</li></ul></li></ul><h2 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h2><ul><li><p>git pull 失败 ,提示：<code>fatal: refusing to merge unrelated histories</code></p><p><strong>原因：</strong>无关的仓库无法合并</p><p><strong>方法：</strong></p><ul><li><p>使用强制命令：</p><pre class=" language-sh"><code class="language-sh">git pull origin master --allow-unrelated-histories</code></pre></li><li><p>先将远程仓库拉取到本地仓库，再推送</p></li></ul></li><li><p>git push 失败，提示：<code>Updates were rejected because the tip of your current branch is behind</code></p><p><strong>原因：</strong>本地仓库版本低于远程仓库版本，或做了一些自定义修改</p><p><strong>方法：</strong></p><ul><li><p>强制推送</p><pre class=" language-shell"><code class="language-shell"> git push -u origin master -f</code></pre></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>Win10下 git bash 中文显示乱码：类似﷨﷨﷨﷨或▒▒▒▒</p><p><strong>解决方法</strong>：</p><ul><li>在窗口内右击，选择<code>Options...</code></li><li>在<code>Text</code>内，选择Locale为<em>zh_CN<em>，Character set 为</em>GBK</em></li><li>Save</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的cin,getchar,get,getline详解</title>
      <link href="/c-cpp-1.html"/>
      <url>/c-cpp-1.html</url>
      
        <content type="html"><![CDATA[<h1 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h1><p>获取输入的一个字符或数字：</p><pre class=" language-c++"><code class="language-c++">int a;cin >> a;</code></pre><p>cin &gt;&gt; 会自动隐性字符，如空格，制表符（Tab），回车等，若不想过滤掉这些字符，可以用noskipws流进行控制，后文会对noskipws这些操作符做一个总结，先看例子：</p><pre class=" language-c++"><code class="language-c++">char test[5];for (int i = 0;i < 5;i++){    cin >> noskipws >> test[i];}for (int i = 0;i < 5;i++){    cout << test[i];}</code></pre><p>输出结果如下：</p><pre class=" language-c++"><code class="language-c++">ma oomaoo</code></pre><p>还有一个要注意的是，使用cin输入时遇到空白字符后后面的字符会被过滤掉，即会停留在缓冲区，当下一个cin输入时会直接从缓冲区读取：</p><pre class=" language-c++"><code class="language-c++">char test_1[10];char test_2[10];cin >> test_1;cin >> test_2;cout << test_1 << endl;cout << test_2 << endl;</code></pre><p>执行结果如下：</p><pre class=" language-c++"><code class="language-c++">Hello World     //输入字符Hello           //test_1，遇到空格停止输入World           //test_2，从输入流缓冲区读取被过滤掉的字符</code></pre><h1 id="cin-get"><a href="#cin-get" class="headerlink" title="cin.get()"></a>cin.get()</h1><h2 id="含一个参数"><a href="#含一个参数" class="headerlink" title="含一个参数"></a>含一个参数</h2><p>cin.get(数组名)，一次读取一个字符：</p><pre class=" language-c++"><code class="language-c++">char test[5];for (int i = 0;i < 5;i++){    cin.get(test[i]);}</code></pre><h2 id="含两个参数"><a href="#含两个参数" class="headerlink" title="含两个参数"></a>含两个参数</h2><p>cin.get(数组名,接收的字符数量)，可以接收空格，遇到回车停止。先看例子：</p><pre class=" language-c++"><code class="language-c++">char test_1[10];cin.get(test_1,10);cout << test_1;</code></pre><p>执行如下：</p><pre class=" language-c++"><code class="language-c++">1234567890          //输入10个数字123456789           //输出了前9个</code></pre><p>因为数组最后一个字符是’\0’,所以字符长度为10的数组只能接收9个字符。</p><h1 id="cin-getline"><a href="#cin-getline" class="headerlink" title="cin.getline()"></a>cin.getline()</h1><p>函数重载显示：</p><pre class=" language-c++"><code class="language-c++">istream& getline (char* s, streamsize n );istream& getline (char* s, streamsize n, char delim );</code></pre><p>getline内有三个参数，一个字符数组，一个读取的数量，以及定界字符（默认’\n’）,通过流对象调用使用，读取的最后一个字符为’\0’，例如：</p><pre class=" language-c++"><code class="language-c++">char test[5];cin.getline(test,5);cout << test;</code></pre><p>输入输出结果：</p><pre class=" language-c++"><code class="language-c++">ma hooma h</code></pre><h1 id="getline-string"><a href="#getline-string" class="headerlink" title="getline (string)"></a>getline (string)</h1><p>重载形式：</p><pre class=" language-c++"><code class="language-c++">istream& getline (istream&  is, string& str, char delim);istream& getline (istream&& is, string& str, char delim);istream& getline (istream&  is, string& str);istream& getline (istream&& is, string& str);</code></pre><p>首先看到string就知道这应该要包含#include&lt;<strong>string</strong>&gt;头文件，getline内有三个参数，一个流对象，字符串和定界字符，例如：</p><pre class=" language-c++"><code class="language-c++">char ch = 'o';    //定界字符'o'string str;getline(cin,str,ch);cout << str;</code></pre><pre class=" language-c++"><code class="language-c++">mahoo    //控制台输入mah      //输出，遇到定界字符'o'停止提取字符到str</code></pre><p>当然，也可以不用定界字符参数，默认为’\n’，getline可以接受空格，不能接受回车，据我测试，getline执行后会把缓冲区中的回车读走，但没有存入到指定的字符串中，贴代码：</p><p><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/C++/test.png" alt=""><br>当输入”mahoo”(getline)和”a”(getchar)后，”b”读到了<code>c = getchar()</code>缓冲区的<code>'\n'</code>，而<code>c = getchar()</code>却没读到<code>getline</code>的回车。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的文件输入和输出</title>
      <link href="/c-cpp-2.html"/>
      <url>/c-cpp-2.html</url>
      
        <content type="html"><![CDATA[<p>C++ I/O类软件包处理文件输入和输出的方式与处理标准输入和输出的方式非常相似。<br><img src="https://cdn.jsdelivr.net/gh/mahoo12138/js-css-cdn@1.0/hexo_images/C++/file.png" alt=""></p><h2 id="简单的文件I-O"><a href="#简单的文件I-O" class="headerlink" title="简单的文件I/O"></a>简单的文件I/O</h2><p>要让程序写入文件，必须这样做:</p><ul><li>创建一个ofstream对象来管理输出流；</li><li>将该对象与特定的文件关联起来；</li><li>以使用cout的方式使用该对象，唯一的区别是输出将进入文件，而不是屏幕。</li></ul><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>前提是要包含头文件<strong>fstream</strong>，对于大部分操作（不是全部），包含该头文件，等于自动包含了iostream文件，因为该头文件中的类都是派生自头文件iostream中的类。因此不必再包含iosteam文件。<br>先声明一个ofsteam对象：</p><pre class=" language-C++"><code class="language-C++"> ofstream fout;        </code></pre><p>之后，必须将这个对象与特定的文件关联起来，可以使用成员函数open()来实现，例如要打开<code>mahoo.txt</code>进行操作：</p><pre class=" language-c++"><code class="language-c++">fout.open("mahoo.txt");</code></pre><p>也可以使用一个构造函数，将两行代码（创建对象和关联文件）合并：</p><pre class=" language-c++"><code class="language-c++">ofstream fout (mahoo.txt);</code></pre><p>然后以<strong>cout</strong>的方式操作fout对象。例如要把文本”I am Mahoo”放入到文件中，可以这样做：</p><pre class=" language-c++"><code class="language-c++">fout << "I am Mahoo";</code></pre><p>由于ostream是ofstream类的基类，因此可以使用所有的ostream方法，包括各种运算符定义，格式化方法和控制符。ofstream类使用被缓存的输出，因此程序再创建像fout这样的ofstream对象时，将为输出缓冲区分配空间。如果创建了两个ofstream对象，程序将创建两个缓冲区，各一个。像fout这样的ofstream对象从程序那里逐字节地收集输出，当缓冲区填满后，它便将缓冲区内容一同传输给目标文件。<br>注意，以这样的方式打开文件操作时，如果没有该文件，会创建一个新的文件；如果有将清空文件。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>读取文件操作与写入文件类似：</p><ul><li>创建一个ifstream对象管理输入流;</li><li>将该对象与特定的文件关联起来；</li><li>以cin的方式使用该对象。</li></ul><p>当然，包含头文件fstream必不可少。</p><pre class=" language-c++"><code class="language-c++">ifstream fin;            fin.open("Mahoo.txt");ifstream fin("Mahoo.txt");</code></pre><p>现在，可以像使用cin那样使用fin：</p><pre class=" language-c++"><code class="language-c++">char ch;               fin >> ch;              //从mahoo.txt中读取一个字符char test[100];fin >> test;            //一直读取，知道读取到enter，tab，space等fin.getline(test,100);  //读取一行存入test[100]string line;getline(fin,line);      //读取到string对象line中</code></pre><p>在上述代码<code>getline(fin,line)</code>对于文件内容只读取一行，补充一下string对象的长度大小，其限制基于当前编译器，可以使用：</p><pre class=" language-c++"><code class="language-c++">cout << line.max_size();     //line为创建的string对象</code></pre><p>查看当前编译器理论上支持的最大长度。</p><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><p>当输入和输出流对象过期（如程序终止时），文件的连接将自动关闭。作为一名合格的程序员，绝不会这么做，可以使用close()方法显式地关闭到文件的连接：</p><pre class=" language-C++"><code class="language-C++">fout.close();fin.close();</code></pre><p>OK，今天的学习就到这里了，累了，睡觉！</p><hr><p><em>2019年5月14日更新</em></p><h3 id="打开文件的模式"><a href="#打开文件的模式" class="headerlink" title="打开文件的模式"></a>打开文件的模式</h3><p>下面是 open() 函数的标准语法，open() 函数是 fstream、ifstream 和 ofstream 对象的一个成员。</p><pre class=" language-c++"><code class="language-c++">void open(const char *filename, ios::openmode mode);</code></pre><p>open() 成员函数其实有两个参数，第一个参数指定要打开的文件的名称和位置，第二个参数定义文件被打开的模式。</p><table><thead><tr><th align="center">模式标志</th><th align="center">简单描述</th></tr></thead><tbody><tr><td align="center">ios::in</td><td align="center">打开文件用于读取</td></tr><tr><td align="center">ios::out</td><td align="center">打开文件用于写入</td></tr><tr><td align="center">ios::app</td><td align="center">追加模式：即把所有的写入放到末尾</td></tr><tr><td align="center">ios::ate</td><td align="center">文件打开后，定位到末尾</td></tr><tr><td align="center">ios::trunc</td><td align="center">预打开文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0</td></tr><tr><td align="center">ios::binary</td><td align="center">以二进制方式打开</td></tr></tbody></table><p>而且这些当时可以任意组合，通过 ** “|” **（运算符“或”）进行连接即可例如：</p><pre class=" language-c++"><code class="language-c++">ofstream fout;fout.open("Mahoo.txt", ios::in|ios::out|ios::binary);    //根据实际需要进行组合</code></pre><h3 id="检查文件是否被成功打开"><a href="#检查文件是否被成功打开" class="headerlink" title="检查文件是否被成功打开"></a>检查文件是否被成功打开</h3><p>在操作文件时，我们都应该检查文件是否被成功打开，否则进行读取的时候就会报错。具体方法可以使用<strong>is_open()</strong>，例如：</p><pre class=" language-c++"><code class="language-c++">fin.open("Mahoo.txt");if (!fin.is_open()){       exit(EXIT_FAILURE);}</code></pre><p>如果文件成功被打开，方法is_open()将返回true；exit()函数作用是关闭所有打开的文件并终止程序，并将参数value返回给主调进程。</p><pre class=" language-c++"><code class="language-c++">void exit(int value);    //一般0表示程序寿终正寝，1表示死于非命。</code></pre><p><strong>EXIT_FAILURE</strong>是定义在cstdlib.h中的一个常量，通常EXIT_SUCCESS = 0，EXIT_FAILURE = 1。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10系统内的Java环境变量配置</title>
      <link href="/other-2.html"/>
      <url>/other-2.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Java的JDK"><a href="#安装Java的JDK" class="headerlink" title="安装Java的JDK"></a>安装Java的JDK</h2><p>首先去<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">官网链接</a>把JDK下载安装好，我安装的是最新版本的<em>jdk-8u211-windows-x64</em>，由于我总是忘记环境变量的配置，所以决定写篇博文记录，OK，开始配置！<a id="more"></a></p><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>在桌面右键单击<strong>此电脑</strong>进入<strong>属性</strong>，<br><img src="http://yun.airlife.club/view.php/4544a12f50a60e864cdd060b6128a9d7.png" alt=""></p><p>点击左栏的<strong>高级系统设置</strong>再然后是<strong>环境变量</strong>，<br><img src="http://yun.airlife.club/view.php/e379426a4bc0447112736d7cf9429822.png" alt=""><br>接下来就是核心要点了，咳咳，圈重点了哦</p><ol><li>点击【系统变量】下面的【新建】选项，在【变量名】处填上【Java_Home】，【变量值】就是你刚才JDK安装的路径，我的是<em>”C:\Program Files\Java\jdk1.8.0_211“</em>，点击【确定】；<br><img src="http://yun.airlife.club/view.php/7ba200957f85d66fcf828a3c203cc8bb.png" alt=""></li><li>在【系统变量】中找到【Path】，选中并点击【编辑】，再点击右侧的【编辑文本】，将引号里面的全部复制<strong>“%Java_Home%\bin;%Java_Home%\jre\bin;”</strong>，到“变量值”栏的最前面，【确定】；<br><img src="http://yun.airlife.club/view.php/5731314d7a32fa1be535c13d27844cd1.png" alt=""></li><li>在【系统变量】中，【新建】一个【变量名】为“CLASSPATH”，【变量值】为<em>“.;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar”</em><br><img src="http://yun.airlife.club/view.php/b72aa91ef838c21039e2197337e8f6ff.png" alt=""></li><li>一路【确定】回退到桌面，打开Cmd控制台，方法挺多，一般就是”Win+R”,输入“cmd”，回车，开始检测Java环境是否配置成功：<ul><li>输入”Java”，回车；</li><li>输入”Javac”，回车；</li><li>输入”Java -version”，回车；<br><img src="http://yun.airlife.club/view.php/afc11ff2097f9f5b1a38b8b27a44938f.png" alt=""><br><img src="http://yun.airlife.club/view.php/a8a27058556630beefc44e9c2de59b68.png" alt=""><br><img src="http://yun.airlife.club/view.php/3ba7991598360c47b82617a07daac8c6.png" alt=""></li></ul></li><li>三次都出现如图类似的信息，说明<strong>配置成功</strong>！</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
